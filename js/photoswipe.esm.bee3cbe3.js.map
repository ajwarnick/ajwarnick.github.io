{"mappings":"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","sources":["<anon>","node_modules/photoswipe/dist/photoswipe.esm.js","src/js/util/util.js","src/js/util/dom-events.js","src/js/util/viewport-size.js","src/js/slide/pan-bounds.js","src/js/slide/zoom-level.js","src/js/slide/slide.js","src/js/gestures/drag-handler.js","src/js/gestures/zoom-handler.js","src/js/gestures/tap-handler.js","src/js/gestures/gestures.js","src/js/main-scroll.js","src/js/keyboard.js","src/js/util/css-animation.js","src/js/util/spring-easer.js","src/js/util/spring-animation.js","src/js/util/animations.js","src/js/scroll-wheel.js","src/js/ui/ui-element.js","src/js/ui/button-arrow.js","src/js/ui/button-close.js","src/js/ui/button-zoom.js","src/js/ui/loading-indicator.js","src/js/ui/counter-indicator.js","src/js/ui/ui.js","src/js/slide/get-thumb-bounds.js","src/js/core/eventable.js","src/js/slide/placeholder.js","src/js/slide/content.js","src/js/slide/loader.js","src/js/core/base.js","src/js/opener.js","src/js/photoswipe.js"],"sourcesContent":["(() => {\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true, configurable: true});\n}\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\nvar $parcel$global =\ntypeof globalThis !== 'undefined'\n  ? globalThis\n  : typeof self !== 'undefined'\n  ? self\n  : typeof window !== 'undefined'\n  ? window\n  : typeof global !== 'undefined'\n  ? global\n  : {};\nvar parcelRequire = $parcel$global[\"parcelRequire17c5\"];\nparcelRequire.register(\"Mmk6f\", function(module, exports) {\n\n$parcel$defineInteropFlag(module.exports);\n\n$parcel$export(module.exports, \"default\", () => $0915ccbaea3d6573$export$2e2bcd8739ae039);\n/*!\n  * PhotoSwipe 5.3.7 - https://photoswipe.com\n  * (c) 2023 Dmytro Semenov\n  */ /** @typedef {import('../photoswipe.js').Point} Point */ /**\r\n * @template {keyof HTMLElementTagNameMap} T\r\n * @param {string} className\r\n * @param {T} tagName\r\n * @param {Node} [appendToEl]\r\n * @returns {HTMLElementTagNameMap[T]}\r\n */ function $0915ccbaea3d6573$var$createElement(className, tagName, appendToEl) {\n    const el = document.createElement(tagName);\n    if (className) el.className = className;\n    if (appendToEl) appendToEl.appendChild(el);\n    return el;\n}\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */ function $0915ccbaea3d6573$var$equalizePoints(p1, p2) {\n    p1.x = p2.x;\n    p1.y = p2.y;\n    if (p2.id !== undefined) p1.id = p2.id;\n    return p1;\n}\n/**\r\n * @param {Point} p\r\n */ function $0915ccbaea3d6573$var$roundPoint(p) {\n    p.x = Math.round(p.x);\n    p.y = Math.round(p.y);\n}\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {number}\r\n */ function $0915ccbaea3d6573$var$getDistanceBetween(p1, p2) {\n    const x = Math.abs(p1.x - p2.x);\n    const y = Math.abs(p1.y - p2.y);\n    return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Whether X and Y positions of points are equal\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {boolean}\r\n */ function $0915ccbaea3d6573$var$pointsEqual(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n}\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n * @returns {number}\r\n */ function $0915ccbaea3d6573$var$clamp(val, min, max) {\n    return Math.min(Math.max(val, min), max);\n}\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n * @returns {string}\r\n */ function $0915ccbaea3d6573$var$toTransformString(x, y, scale) {\n    let propValue = `translate3d(${x}px,${y || 0}px,0)`;\n    if (scale !== undefined) propValue += ` scale3d(${scale},${scale},1)`;\n    return propValue;\n}\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n */ function $0915ccbaea3d6573$var$setTransform(el, x, y, scale) {\n    el.style.transform = $0915ccbaea3d6573$var$toTransformString(x, y, scale);\n}\nconst $0915ccbaea3d6573$var$defaultCSSEasing = \"cubic-bezier(.4,0,.22,1)\";\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string} [prop] CSS property to animate\r\n * @param {number} [duration] in ms\r\n * @param {string} [ease] CSS easing function\r\n */ function $0915ccbaea3d6573$var$setTransitionStyle(el, prop, duration, ease) {\n    // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\n    // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\n    // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\n    el.style.transition = prop ? `${prop} ${duration}ms ${ease || $0915ccbaea3d6573$var$defaultCSSEasing}` : \"none\";\n}\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */ function $0915ccbaea3d6573$var$setWidthHeight(el, w, h) {\n    el.style.width = typeof w === \"number\" ? `${w}px` : w;\n    el.style.height = typeof h === \"number\" ? `${h}px` : h;\n}\n/**\r\n * @param {HTMLElement} el\r\n */ function $0915ccbaea3d6573$var$removeTransitionStyle(el) {\n    $0915ccbaea3d6573$var$setTransitionStyle(el);\n}\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */ function $0915ccbaea3d6573$var$decodeImage(img) {\n    if (\"decode\" in img) return img.decode().catch(()=>{});\n    if (img.complete) return Promise.resolve(img);\n    return new Promise((resolve, reject)=>{\n        img.onload = ()=>resolve(img);\n        img.onerror = reject;\n    });\n}\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */ /** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */ const $0915ccbaea3d6573$var$LOAD_STATE = {\n    IDLE: \"idle\",\n    LOADING: \"loading\",\n    LOADED: \"loaded\",\n    ERROR: \"error\"\n};\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n * @returns {boolean}\r\n */ function $0915ccbaea3d6573$var$specialKeyUsed(e) {\n    return \"button\" in e && e.button === 1 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey;\n}\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} [option]\r\n * @param {string} [legacySelector]\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */ function $0915ccbaea3d6573$var$getElementsFromOption(option, legacySelector, parent = document) {\n    /** @type {HTMLElement[]} */ let elements = [];\n    if (option instanceof Element) elements = [\n        option\n    ];\n    else if (option instanceof NodeList || Array.isArray(option)) elements = Array.from(option);\n    else {\n        const selector = typeof option === \"string\" ? option : legacySelector;\n        if (selector) elements = Array.from(parent.querySelectorAll(selector));\n    }\n    return elements;\n}\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */ function $0915ccbaea3d6573$var$isSafari() {\n    return !!(navigator.vendor && navigator.vendor.match(/apple/i));\n}\n// Detect passive event listener support\nlet $0915ccbaea3d6573$var$supportsPassive = false;\n/* eslint-disable */ try {\n    /* @ts-ignore */ window.addEventListener(\"test\", null, Object.defineProperty({}, \"passive\", {\n        get: ()=>{\n            $0915ccbaea3d6573$var$supportsPassive = true;\n        }\n    }));\n} catch (e) {}\n/* eslint-enable */ /**\r\n * @typedef {Object} PoolItem\r\n * @prop {HTMLElement | Window | Document | undefined | null} target\r\n * @prop {string} type\r\n * @prop {EventListenerOrEventListenerObject} listener\r\n * @prop {boolean} [passive]\r\n */ class $0915ccbaea3d6573$var$DOMEvents {\n    constructor(){\n        /**\r\n     * @type {PoolItem[]}\r\n     * @private\r\n     */ this._pool = [];\n    }\n    /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type Can be multiple, separated by space.\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   */ add(target, type, listener, passive) {\n        this._toggleListener(target, type, listener, passive);\n    }\n    /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   */ remove(target, type, listener, passive) {\n        this._toggleListener(target, type, listener, passive, true);\n    }\n    /**\r\n   * Removes all bound events\r\n   */ removeAll() {\n        this._pool.forEach((poolItem)=>{\n            this._toggleListener(poolItem.target, poolItem.type, poolItem.listener, poolItem.passive, true, true);\n        });\n        this._pool = [];\n    }\n    /**\r\n   * Adds or removes event\r\n   *\r\n   * @private\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   * @param {boolean} [unbind] Whether the event should be added or removed\r\n   * @param {boolean} [skipPool] Whether events pool should be skipped\r\n   */ _toggleListener(target, type, listener, passive, unbind, skipPool) {\n        if (!target) return;\n        const methodName = unbind ? \"removeEventListener\" : \"addEventListener\";\n        const types = type.split(\" \");\n        types.forEach((eType)=>{\n            if (eType) {\n                // Events pool is used to easily unbind all events when PhotoSwipe is closed,\n                // so developer doesn't need to do this manually\n                if (!skipPool) {\n                    if (unbind) // Remove from the events pool\n                    this._pool = this._pool.filter((poolItem)=>{\n                        return poolItem.type !== eType || poolItem.listener !== listener || poolItem.target !== target;\n                    });\n                    else // Add to the events pool\n                    this._pool.push({\n                        target: target,\n                        type: eType,\n                        listener: listener,\n                        passive: passive\n                    });\n                }\n                // most PhotoSwipe events call preventDefault,\n                // and we do not need browser to scroll the page\n                const eventOptions = $0915ccbaea3d6573$var$supportsPassive ? {\n                    passive: passive || false\n                } : false;\n                target[methodName](eType, listener, eventOptions);\n            }\n        });\n    }\n}\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */ /** @typedef {import('../core/base.js').default} PhotoSwipeBase */ /** @typedef {import('../photoswipe.js').Point} Point */ /** @typedef {import('../slide/slide.js').SlideData} SlideData */ /**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipeBase} pswp\r\n * @returns {Point}\r\n */ function $0915ccbaea3d6573$var$getViewportSize(options, pswp) {\n    if (options.getViewportSizeFn) {\n        const newViewportSize = options.getViewportSizeFn(options, pswp);\n        if (newViewportSize) return newViewportSize;\n    }\n    return {\n        x: document.documentElement.clientWidth,\n        // TODO: height on mobile is very incosistent due to toolbar\n        // find a way to improve this\n        //\n        // document.documentElement.clientHeight - doesn't seem to work well\n        y: window.innerHeight\n    };\n}\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {Point} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */ function $0915ccbaea3d6573$var$parsePaddingOption(prop, options, viewportSize, itemData, index) {\n    let paddingValue = 0;\n    if (options.paddingFn) paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\n    else if (options.padding) paddingValue = options.padding[prop];\n    else {\n        const legacyPropName = \"padding\" + prop[0].toUpperCase() + prop.slice(1);\n        // @ts-expect-error\n        if (options[legacyPropName]) // @ts-expect-error\n        paddingValue = options[legacyPropName];\n    }\n    return Number(paddingValue) || 0;\n}\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {Point} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n * @returns {Point}\r\n */ function $0915ccbaea3d6573$var$getPanAreaSize(options, viewportSize, itemData, index) {\n    return {\n        x: viewportSize.x - $0915ccbaea3d6573$var$parsePaddingOption(\"left\", options, viewportSize, itemData, index) - $0915ccbaea3d6573$var$parsePaddingOption(\"right\", options, viewportSize, itemData, index),\n        y: viewportSize.y - $0915ccbaea3d6573$var$parsePaddingOption(\"top\", options, viewportSize, itemData, index) - $0915ccbaea3d6573$var$parsePaddingOption(\"bottom\", options, viewportSize, itemData, index)\n    };\n}\n/** @typedef {import('./slide.js').default} Slide */ /** @typedef {Record<Axis, number>} Point */ /** @typedef {'x' | 'y'} Axis */ /**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */ class $0915ccbaea3d6573$var$PanBounds {\n    /**\r\n   * @param {Slide} slide\r\n   */ constructor(slide){\n        this.slide = slide;\n        this.currZoomLevel = 1;\n        this.center = /** @type {Point} */ {\n            x: 0,\n            y: 0\n        };\n        this.max = /** @type {Point} */ {\n            x: 0,\n            y: 0\n        };\n        this.min = /** @type {Point} */ {\n            x: 0,\n            y: 0\n        };\n    }\n    /**\r\n   * _getItemBounds\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */ update(currZoomLevel) {\n        this.currZoomLevel = currZoomLevel;\n        if (!this.slide.width) this.reset();\n        else {\n            this._updateAxis(\"x\");\n            this._updateAxis(\"y\");\n            this.slide.pswp.dispatch(\"calcBounds\", {\n                slide: this.slide\n            });\n        }\n    }\n    /**\r\n   * _calculateItemBoundsForAxis\r\n   *\r\n   * @param {Axis} axis\r\n   */ _updateAxis(axis) {\n        const { pswp: pswp } = this.slide;\n        const elSize = this.slide[axis === \"x\" ? \"width\" : \"height\"] * this.currZoomLevel;\n        const paddingProp = axis === \"x\" ? \"left\" : \"top\";\n        const padding = $0915ccbaea3d6573$var$parsePaddingOption(paddingProp, pswp.options, pswp.viewportSize, this.slide.data, this.slide.index);\n        const panAreaSize = this.slide.panAreaSize[axis];\n        // Default position of element.\n        // By default, it is center of viewport:\n        this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding;\n        // maximum pan position\n        this.max[axis] = elSize > panAreaSize ? Math.round(panAreaSize - elSize) + padding : this.center[axis];\n        // minimum pan position\n        this.min[axis] = elSize > panAreaSize ? padding : this.center[axis];\n    }\n    // _getZeroBounds\n    reset() {\n        this.center.x = 0;\n        this.center.y = 0;\n        this.max.x = 0;\n        this.max.y = 0;\n        this.min.x = 0;\n        this.min.y = 0;\n    }\n    /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {Axis} axis x or y\r\n   * @param {number} panOffset\r\n   * @returns {number}\r\n   */ correctPan(axis, panOffset) {\n        return $0915ccbaea3d6573$var$clamp(panOffset, this.max[axis], this.min[axis]);\n    }\n}\nconst $0915ccbaea3d6573$var$MAX_IMAGE_WIDTH = 4000;\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */ /** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */ /** @typedef {import('../photoswipe.js').Point} Point */ /** @typedef {import('../slide/slide.js').SlideData} SlideData */ /** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */ /**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */ class $0915ccbaea3d6573$var$ZoomLevel {\n    /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe} [pswp] PhotoSwipe instance, can be undefined if not initialized yet\r\n   */ constructor(options, itemData, index, pswp){\n        this.pswp = pswp;\n        this.options = options;\n        this.itemData = itemData;\n        this.index = index;\n        /** @type { Point | null } */ this.panAreaSize = null;\n        /** @type { Point | null } */ this.elementSize = null;\n        this.fit = 1;\n        this.fill = 1;\n        this.vFill = 1;\n        this.initial = 1;\n        this.secondary = 1;\n        this.max = 1;\n        this.min = 1;\n    }\n    /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {Point} panAreaSize\r\n   */ update(maxWidth, maxHeight, panAreaSize) {\n        /** @type {Point} */ const elementSize = {\n            x: maxWidth,\n            y: maxHeight\n        };\n        this.elementSize = elementSize;\n        this.panAreaSize = panAreaSize;\n        const hRatio = panAreaSize.x / elementSize.x;\n        const vRatio = panAreaSize.y / elementSize.y;\n        this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\n        this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\n        // zoom.vFill defines zoom level of the image\n        // when it has 100% of viewport vertical space (height)\n        this.vFill = Math.min(1, vRatio);\n        this.initial = this._getInitial();\n        this.secondary = this._getSecondary();\n        this.max = Math.max(this.initial, this.secondary, this._getMax());\n        this.min = Math.min(this.fit, this.initial, this.secondary);\n        if (this.pswp) this.pswp.dispatch(\"zoomLevelsUpdate\", {\n            zoomLevels: this,\n            slideData: this.itemData\n        });\n    }\n    /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   * @returns { number | undefined }\r\n   */ _parseZoomLevelOption(optionPrefix) {\n        const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ optionPrefix + \"ZoomLevel\";\n        const optionValue = this.options[optionName];\n        if (!optionValue) return;\n        if (typeof optionValue === \"function\") return optionValue(this);\n        if (optionValue === \"fill\") return this.fill;\n        if (optionValue === \"fit\") return this.fit;\n        return Number(optionValue);\n    }\n    /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */ _getSecondary() {\n        let currZoomLevel = this._parseZoomLevelOption(\"secondary\");\n        if (currZoomLevel) return currZoomLevel;\n        // 3x of \"fit\" state, but not larger than original\n        currZoomLevel = Math.min(1, this.fit * 3);\n        if (this.elementSize && currZoomLevel * this.elementSize.x > $0915ccbaea3d6573$var$MAX_IMAGE_WIDTH) currZoomLevel = $0915ccbaea3d6573$var$MAX_IMAGE_WIDTH / this.elementSize.x;\n        return currZoomLevel;\n    }\n    /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */ _getInitial() {\n        return this._parseZoomLevelOption(\"initial\") || this.fit;\n    }\n    /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */ _getMax() {\n        // max zoom level is x4 from \"fit state\",\n        // used for zoom gesture and ctrl/trackpad zoom\n        return this._parseZoomLevelOption(\"max\") || Math.max(1, this.fit * 4);\n    }\n}\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */ /**\r\n * Renders and allows to control a single slide\r\n */ class $0915ccbaea3d6573$var$Slide {\n    /**\r\n   * @param {SlideData} data\r\n   * @param {number} index\r\n   * @param {PhotoSwipe} pswp\r\n   */ constructor(data, index, pswp){\n        this.data = data;\n        this.index = index;\n        this.pswp = pswp;\n        this.isActive = index === pswp.currIndex;\n        this.currentResolution = 0;\n        /** @type {Point} */ this.panAreaSize = {\n            x: 0,\n            y: 0\n        };\n        /** @type {Point} */ this.pan = {\n            x: 0,\n            y: 0\n        };\n        this.isFirstSlide = this.isActive && !pswp.opener.isOpen;\n        this.zoomLevels = new $0915ccbaea3d6573$var$ZoomLevel(pswp.options, data, index, pswp);\n        this.pswp.dispatch(\"gettingData\", {\n            slide: this,\n            data: this.data,\n            index: index\n        });\n        this.content = this.pswp.contentLoader.getContentBySlide(this);\n        this.container = $0915ccbaea3d6573$var$createElement(\"pswp__zoom-wrap\", \"div\");\n        /** @type {HTMLElement | null} */ this.holderElement = null;\n        this.currZoomLevel = 1;\n        /** @type {number} */ this.width = this.content.width;\n        /** @type {number} */ this.height = this.content.height;\n        this.heavyAppended = false;\n        this.bounds = new $0915ccbaea3d6573$var$PanBounds(this);\n        this.prevDisplayedWidth = -1;\n        this.prevDisplayedHeight = -1;\n        this.pswp.dispatch(\"slideInit\", {\n            slide: this\n        });\n    }\n    /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {boolean} isActive\r\n   */ setIsActive(isActive) {\n        if (isActive && !this.isActive) // slide just became active\n        this.activate();\n        else if (!isActive && this.isActive) // slide just became non-active\n        this.deactivate();\n    }\n    /**\r\n   * Appends slide content to DOM\r\n   *\r\n   * @param {HTMLElement} holderElement\r\n   */ append(holderElement) {\n        this.holderElement = holderElement;\n        this.container.style.transformOrigin = \"0 0\";\n        // Slide appended to DOM\n        if (!this.data) return;\n        this.calculateSize();\n        this.load();\n        this.updateContentSize();\n        this.appendHeavy();\n        this.holderElement.appendChild(this.container);\n        this.zoomAndPanToInitial();\n        this.pswp.dispatch(\"firstZoomPan\", {\n            slide: this\n        });\n        this.applyCurrentZoomPan();\n        this.pswp.dispatch(\"afterSetContent\", {\n            slide: this\n        });\n        if (this.isActive) this.activate();\n    }\n    load() {\n        this.content.load(false);\n        this.pswp.dispatch(\"slideLoad\", {\n            slide: this\n        });\n    }\n    /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */ appendHeavy() {\n        const { pswp: pswp } = this;\n        const appendHeavyNearby = true; // todo\n        // Avoid appending heavy elements during animations\n        if (this.heavyAppended || !pswp.opener.isOpen || pswp.mainScroll.isShifted() || !this.isActive && !appendHeavyNearby) return;\n        if (this.pswp.dispatch(\"appendHeavy\", {\n            slide: this\n        }).defaultPrevented) return;\n        this.heavyAppended = true;\n        this.content.append();\n        this.pswp.dispatch(\"appendHeavyContent\", {\n            slide: this\n        });\n    }\n    /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */ activate() {\n        this.isActive = true;\n        this.appendHeavy();\n        this.content.activate();\n        this.pswp.dispatch(\"slideActivate\", {\n            slide: this\n        });\n    }\n    /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */ deactivate() {\n        this.isActive = false;\n        this.content.deactivate();\n        if (this.currZoomLevel !== this.zoomLevels.initial) // allow filtering\n        this.calculateSize();\n        // reset zoom level\n        this.currentResolution = 0;\n        this.zoomAndPanToInitial();\n        this.applyCurrentZoomPan();\n        this.updateContentSize();\n        this.pswp.dispatch(\"slideDeactivate\", {\n            slide: this\n        });\n    }\n    /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */ destroy() {\n        this.content.hasSlide = false;\n        this.content.remove();\n        this.container.remove();\n        this.pswp.dispatch(\"slideDestroy\", {\n            slide: this\n        });\n    }\n    resize() {\n        if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\n            // Keep initial zoom level if it was before the resize,\n            // as well as when this slide is not active\n            // Reset position and scale to original state\n            this.calculateSize();\n            this.currentResolution = 0;\n            this.zoomAndPanToInitial();\n            this.applyCurrentZoomPan();\n            this.updateContentSize();\n        } else {\n            // readjust pan position if it's beyond the bounds\n            this.calculateSize();\n            this.bounds.update(this.currZoomLevel);\n            this.panTo(this.pan.x, this.pan.y);\n        }\n    }\n    /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {boolean} [force] if size should be updated even if dimensions weren't changed\r\n   */ updateContentSize(force) {\n        // Use initial zoom level\n        // if resolution is not defined (user didn't zoom yet)\n        const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\n        if (!scaleMultiplier) return;\n        const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\n        const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\n        if (!this.sizeChanged(width, height) && !force) return;\n        this.content.setDisplayedSize(width, height);\n    }\n    /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */ sizeChanged(width, height) {\n        if (width !== this.prevDisplayedWidth || height !== this.prevDisplayedHeight) {\n            this.prevDisplayedWidth = width;\n            this.prevDisplayedHeight = height;\n            return true;\n        }\n        return false;\n    }\n    /** @returns {HTMLImageElement | HTMLDivElement | null | undefined} */ getPlaceholderElement() {\n        return this.content.placeholder?.element;\n    }\n    /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param {number} destZoomLevel Destination zoom level.\r\n   * @param {Point} [centerPoint]\r\n   * Transform origin center point, or false if viewport center should be used.\r\n   * @param {number | false} [transitionDuration] Transition duration, may be set to 0.\r\n   * @param {boolean} [ignoreBounds] Minimum and maximum zoom levels will be ignored.\r\n   */ zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\n        const { pswp: pswp } = this;\n        if (!this.isZoomable() || pswp.mainScroll.isShifted()) return;\n        pswp.dispatch(\"beforeZoomTo\", {\n            destZoomLevel: destZoomLevel,\n            centerPoint: centerPoint,\n            transitionDuration: transitionDuration\n        });\n        // stop all pan and zoom transitions\n        pswp.animations.stopAllPan();\n        // if (!centerPoint) {\n        //   centerPoint = pswp.getViewportCenterPoint();\n        // }\n        const prevZoomLevel = this.currZoomLevel;\n        if (!ignoreBounds) destZoomLevel = $0915ccbaea3d6573$var$clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\n        // if (transitionDuration === undefined) {\n        //   transitionDuration = this.pswp.options.zoomAnimationDuration;\n        // }\n        this.setZoomLevel(destZoomLevel);\n        this.pan.x = this.calculateZoomToPanOffset(\"x\", centerPoint, prevZoomLevel);\n        this.pan.y = this.calculateZoomToPanOffset(\"y\", centerPoint, prevZoomLevel);\n        $0915ccbaea3d6573$var$roundPoint(this.pan);\n        const finishTransition = ()=>{\n            this._setResolution(destZoomLevel);\n            this.applyCurrentZoomPan();\n        };\n        if (!transitionDuration) finishTransition();\n        else pswp.animations.startTransition({\n            isPan: true,\n            name: \"zoomTo\",\n            target: this.container,\n            transform: this.getCurrentTransform(),\n            onComplete: finishTransition,\n            duration: transitionDuration,\n            easing: pswp.options.easing\n        });\n    }\n    /**\r\n   * @param {Point} [centerPoint]\r\n   */ toggleZoom(centerPoint) {\n        this.zoomTo(this.currZoomLevel === this.zoomLevels.initial ? this.zoomLevels.secondary : this.zoomLevels.initial, centerPoint, this.pswp.options.zoomAnimationDuration);\n    }\n    /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */ setZoomLevel(currZoomLevel) {\n        this.currZoomLevel = currZoomLevel;\n        this.bounds.update(this.currZoomLevel);\n    }\n    /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {'x' | 'y'} axis\r\n   * @param {Point} [point]\r\n   * point based on which zoom is performed, usually refers to the current mouse position,\r\n   * if false - viewport center will be used.\r\n   * @param {number} [prevZoomLevel] Zoom level before new zoom was applied.\r\n   * @returns {number}\r\n   */ calculateZoomToPanOffset(axis, point, prevZoomLevel) {\n        const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\n        if (totalPanDistance === 0) return this.bounds.center[axis];\n        if (!point) point = this.pswp.getViewportCenterPoint();\n        if (!prevZoomLevel) prevZoomLevel = this.zoomLevels.initial;\n        const zoomFactor = this.currZoomLevel / prevZoomLevel;\n        return this.bounds.correctPan(axis, (this.pan[axis] - point[axis]) * zoomFactor + point[axis]);\n    }\n    /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {number} panX\r\n   * @param {number} panY\r\n   */ panTo(panX, panY) {\n        this.pan.x = this.bounds.correctPan(\"x\", panX);\n        this.pan.y = this.bounds.correctPan(\"y\", panY);\n        this.applyCurrentZoomPan();\n    }\n    /**\r\n   * If the slide in the current state can be panned by the user\r\n   * @returns {boolean}\r\n   */ isPannable() {\n        return Boolean(this.width) && this.currZoomLevel > this.zoomLevels.fit;\n    }\n    /**\r\n   * If the slide can be zoomed\r\n   * @returns {boolean}\r\n   */ isZoomable() {\n        return Boolean(this.width) && this.content.isZoomable();\n    }\n    /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */ applyCurrentZoomPan() {\n        this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\n        if (this === this.pswp.currSlide) this.pswp.dispatch(\"zoomPanUpdate\", {\n            slide: this\n        });\n    }\n    zoomAndPanToInitial() {\n        this.currZoomLevel = this.zoomLevels.initial;\n        // pan according to the zoom level\n        this.bounds.update(this.currZoomLevel);\n        $0915ccbaea3d6573$var$equalizePoints(this.pan, this.bounds.center);\n        this.pswp.dispatch(\"initialZoomPan\", {\n            slide: this\n        });\n    }\n    /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} zoom\r\n   * @private\r\n   */ _applyZoomTransform(x, y, zoom) {\n        zoom /= this.currentResolution || this.zoomLevels.initial;\n        $0915ccbaea3d6573$var$setTransform(this.container, x, y, zoom);\n    }\n    calculateSize() {\n        const { pswp: pswp } = this;\n        $0915ccbaea3d6573$var$equalizePoints(this.panAreaSize, $0915ccbaea3d6573$var$getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index));\n        this.zoomLevels.update(this.width, this.height, this.panAreaSize);\n        pswp.dispatch(\"calcSlideSize\", {\n            slide: this\n        });\n    }\n    /** @returns {string} */ getCurrentTransform() {\n        const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\n        return $0915ccbaea3d6573$var$toTransformString(this.pan.x, this.pan.y, scale);\n    }\n    /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in the highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {number} newResolution\r\n   */ _setResolution(newResolution) {\n        if (newResolution === this.currentResolution) return;\n        this.currentResolution = newResolution;\n        this.updateContentSize();\n        this.pswp.dispatch(\"resolutionChanged\");\n    }\n}\n/** @typedef {import('../photoswipe.js').Point} Point */ /** @typedef {import('./gestures.js').default} Gestures */ const $0915ccbaea3d6573$var$PAN_END_FRICTION = 0.35;\nconst $0915ccbaea3d6573$var$VERTICAL_DRAG_FRICTION = 0.6;\n// 1 corresponds to the third of viewport height\nconst $0915ccbaea3d6573$var$MIN_RATIO_TO_CLOSE = 0.4;\n// Minimum speed required to navigate\n// to next or previous slide\nconst $0915ccbaea3d6573$var$MIN_NEXT_SLIDE_SPEED = 0.5;\n/**\r\n * @param {number} initialVelocity\r\n * @param {number} decelerationRate\r\n * @returns {number}\r\n */ function $0915ccbaea3d6573$var$project(initialVelocity, decelerationRate) {\n    return initialVelocity * decelerationRate / (1 - decelerationRate);\n}\n/**\r\n * Handles single pointer dragging\r\n */ class $0915ccbaea3d6573$var$DragHandler {\n    /**\r\n   * @param {Gestures} gestures\r\n   */ constructor(gestures){\n        this.gestures = gestures;\n        this.pswp = gestures.pswp;\n        /** @type {Point} */ this.startPan = {\n            x: 0,\n            y: 0\n        };\n    }\n    start() {\n        if (this.pswp.currSlide) $0915ccbaea3d6573$var$equalizePoints(this.startPan, this.pswp.currSlide.pan);\n        this.pswp.animations.stopAll();\n    }\n    change() {\n        const { p1: p1, prevP1: prevP1, dragAxis: dragAxis } = this.gestures;\n        const { currSlide: currSlide } = this.pswp;\n        if (dragAxis === \"y\" && this.pswp.options.closeOnVerticalDrag && currSlide && currSlide.currZoomLevel <= currSlide.zoomLevels.fit && !this.gestures.isMultitouch) {\n            // Handle vertical drag to close\n            const panY = currSlide.pan.y + (p1.y - prevP1.y);\n            if (!this.pswp.dispatch(\"verticalDrag\", {\n                panY: panY\n            }).defaultPrevented) {\n                this._setPanWithFriction(\"y\", panY, $0915ccbaea3d6573$var$VERTICAL_DRAG_FRICTION);\n                const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\n                this.pswp.applyBgOpacity(bgOpacity);\n                currSlide.applyCurrentZoomPan();\n            }\n        } else {\n            const mainScrollChanged = this._panOrMoveMainScroll(\"x\");\n            if (!mainScrollChanged) {\n                this._panOrMoveMainScroll(\"y\");\n                if (currSlide) {\n                    $0915ccbaea3d6573$var$roundPoint(currSlide.pan);\n                    currSlide.applyCurrentZoomPan();\n                }\n            }\n        }\n    }\n    end() {\n        const { velocity: velocity } = this.gestures;\n        const { mainScroll: mainScroll, currSlide: currSlide } = this.pswp;\n        let indexDiff = 0;\n        this.pswp.animations.stopAll();\n        // Handle main scroll if it's shifted\n        if (mainScroll.isShifted()) {\n            // Position of the main scroll relative to the viewport\n            const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX();\n            // Ratio between 0 and 1:\n            // 0 - slide is not visible at all,\n            // 0.5 - half of the slide is visible\n            // 1 - slide is fully visible\n            const currentSlideVisibilityRatio = mainScrollShiftDiff / this.pswp.viewportSize.x;\n            // Go next slide.\n            //\n            // - if velocity and its direction is matched,\n            //   and we see at least tiny part of the next slide\n            //\n            // - or if we see less than 50% of the current slide\n            //   and velocity is close to 0\n            //\n            if (velocity.x < -$0915ccbaea3d6573$var$MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0 || velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5) {\n                // Go to next slide\n                indexDiff = 1;\n                velocity.x = Math.min(velocity.x, 0);\n            } else if (velocity.x > $0915ccbaea3d6573$var$MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0 || velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5) {\n                // Go to prev slide\n                indexDiff = -1;\n                velocity.x = Math.max(velocity.x, 0);\n            }\n            mainScroll.moveIndexBy(indexDiff, true, velocity.x);\n        }\n        // Restore zoom level\n        if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.max || this.gestures.isMultitouch) this.gestures.zoomLevels.correctZoomPan(true);\n        else {\n            // we run two animations instead of one,\n            // as each axis has own pan boundaries and thus different spring function\n            // (correctZoomPan does not have this functionality,\n            //  it animates all properties with single timing function)\n            this._finishPanGestureForAxis(\"x\");\n            this._finishPanGestureForAxis(\"y\");\n        }\n    }\n    /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */ _finishPanGestureForAxis(axis) {\n        const { velocity: velocity } = this.gestures;\n        const { currSlide: currSlide } = this.pswp;\n        if (!currSlide) return;\n        const { pan: pan, bounds: bounds } = currSlide;\n        const panPos = pan[axis];\n        const restoreBgOpacity = this.pswp.bgOpacity < 1 && axis === \"y\";\n        // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\n        // Increasing this number will reduce travel distance\n        const decelerationRate = 0.995; // 0.99\n        // Pan position if there is no bounds\n        const projectedPosition = panPos + $0915ccbaea3d6573$var$project(velocity[axis], decelerationRate);\n        if (restoreBgOpacity) {\n            const vDragRatio = this._getVerticalDragRatio(panPos);\n            const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition);\n            // If we are above and moving upwards,\n            // or if we are below and moving downwards\n            if (vDragRatio < 0 && projectedVDragRatio < -$0915ccbaea3d6573$var$MIN_RATIO_TO_CLOSE || vDragRatio > 0 && projectedVDragRatio > $0915ccbaea3d6573$var$MIN_RATIO_TO_CLOSE) {\n                this.pswp.close();\n                return;\n            }\n        }\n        // Pan position with corrected bounds\n        const correctedPanPosition = bounds.correctPan(axis, projectedPosition);\n        // Exit if pan position should not be changed\n        // or if speed it too low\n        if (panPos === correctedPanPosition) return;\n        // Overshoot if the final position is out of pan bounds\n        const dampingRatio = correctedPanPosition === projectedPosition ? 1 : 0.82;\n        const initialBgOpacity = this.pswp.bgOpacity;\n        const totalPanDist = correctedPanPosition - panPos;\n        this.pswp.animations.startSpring({\n            name: \"panGesture\" + axis,\n            isPan: true,\n            start: panPos,\n            end: correctedPanPosition,\n            velocity: velocity[axis],\n            dampingRatio: dampingRatio,\n            onUpdate: (pos)=>{\n                // Animate opacity of background relative to Y pan position of an image\n                if (restoreBgOpacity && this.pswp.bgOpacity < 1) {\n                    // 0 - start of animation, 1 - end of animation\n                    const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist;\n                    // We clamp opacity to keep it between 0 and 1.\n                    // As progress ratio can be larger than 1 due to overshoot,\n                    // and we do not want to bounce opacity.\n                    this.pswp.applyBgOpacity($0915ccbaea3d6573$var$clamp(initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio, 0, 1));\n                }\n                pan[axis] = Math.floor(pos);\n                currSlide.applyCurrentZoomPan();\n            }\n        });\n    }\n    /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @returns {boolean}\r\n   */ _panOrMoveMainScroll(axis) {\n        const { p1: p1, dragAxis: dragAxis, prevP1: prevP1, isMultitouch: isMultitouch } = this.gestures;\n        const { currSlide: currSlide, mainScroll: mainScroll } = this.pswp;\n        const delta = p1[axis] - prevP1[axis];\n        const newMainScrollX = mainScroll.x + delta;\n        if (!delta || !currSlide) return false;\n        // Always move main scroll if image can not be panned\n        if (axis === \"x\" && !currSlide.isPannable() && !isMultitouch) {\n            mainScroll.moveTo(newMainScrollX, true);\n            return true; // changed main scroll\n        }\n        const { bounds: bounds } = currSlide;\n        const newPan = currSlide.pan[axis] + delta;\n        if (this.pswp.options.allowPanToNext && dragAxis === \"x\" && axis === \"x\" && !isMultitouch) {\n            const currSlideMainScrollX = mainScroll.getCurrSlideX();\n            // Position of the main scroll relative to the viewport\n            const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\n            const isLeftToRight = delta > 0;\n            const isRightToLeft = !isLeftToRight;\n            if (newPan > bounds.min[axis] && isLeftToRight) {\n                // Panning from left to right, beyond the left edge\n                // Wether the image was at minimum pan position (or less)\n                // when this drag gesture started.\n                // Minimum pan position refers to the left edge of the image.\n                const wasAtMinPanPosition = bounds.min[axis] <= this.startPan[axis];\n                if (wasAtMinPanPosition) {\n                    mainScroll.moveTo(newMainScrollX, true);\n                    return true;\n                } else this._setPanWithFriction(axis, newPan);\n            } else if (newPan < bounds.max[axis] && isRightToLeft) {\n                // Paning from right to left, beyond the right edge\n                // Maximum pan position refers to the right edge of the image.\n                const wasAtMaxPanPosition = this.startPan[axis] <= bounds.max[axis];\n                if (wasAtMaxPanPosition) {\n                    mainScroll.moveTo(newMainScrollX, true);\n                    return true;\n                } else this._setPanWithFriction(axis, newPan);\n            } else // If main scroll is shifted\n            if (mainScrollShiftDiff !== 0) {\n                // If main scroll is shifted right\n                if (mainScrollShiftDiff > 0 /*&& isRightToLeft*/ ) {\n                    mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\n                    return true;\n                } else if (mainScrollShiftDiff < 0 /*&& isLeftToRight*/ ) {\n                    // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\n                    mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\n                    return true;\n                }\n            } else // We are within pan bounds, so just pan\n            this._setPanWithFriction(axis, newPan);\n        } else {\n            if (axis === \"y\") // Do not pan vertically if main scroll is shifted o\n            {\n                if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) this._setPanWithFriction(axis, newPan);\n            } else this._setPanWithFriction(axis, newPan);\n        }\n        return false;\n    }\n    // If we move above - the ratio is negative\n    // If we move below the ratio is positive\n    /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @private\r\n   * @param {number} panY The current pan Y position.\r\n   * @returns {number}\r\n   */ _getVerticalDragRatio(panY) {\n        return (panY - (this.pswp.currSlide?.bounds.center.y ?? 0)) / (this.pswp.viewportSize.y / 3);\n    }\n    /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} potentialPan\r\n   * @param {number} [customFriction] (0.1 - 1)\r\n   */ _setPanWithFriction(axis, potentialPan, customFriction) {\n        const { currSlide: currSlide } = this.pswp;\n        if (!currSlide) return;\n        const { pan: pan, bounds: bounds } = currSlide;\n        const correctedPan = bounds.correctPan(axis, potentialPan);\n        // If we are out of pan bounds\n        if (correctedPan !== potentialPan || customFriction) {\n            const delta = Math.round(potentialPan - pan[axis]);\n            pan[axis] += delta * (customFriction || $0915ccbaea3d6573$var$PAN_END_FRICTION);\n        } else pan[axis] = potentialPan;\n    }\n}\n/** @typedef {import('../photoswipe.js').Point} Point */ /** @typedef {import('./gestures.js').default} Gestures */ const $0915ccbaea3d6573$var$UPPER_ZOOM_FRICTION = 0.05;\nconst $0915ccbaea3d6573$var$LOWER_ZOOM_FRICTION = 0.15;\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */ function $0915ccbaea3d6573$var$getZoomPointsCenter(p, p1, p2) {\n    p.x = (p1.x + p2.x) / 2;\n    p.y = (p1.y + p2.y) / 2;\n    return p;\n}\nclass $0915ccbaea3d6573$var$ZoomHandler {\n    /**\r\n   * @param {Gestures} gestures\r\n   */ constructor(gestures){\n        this.gestures = gestures;\n        /**\r\n     * @private\r\n     * @type {Point}\r\n     */ this._startPan = {\n            x: 0,\n            y: 0\n        };\n        /**\r\n     * @private\r\n     * @type {Point}\r\n     */ this._startZoomPoint = {\n            x: 0,\n            y: 0\n        };\n        /**\r\n     * @private\r\n     * @type {Point}\r\n     */ this._zoomPoint = {\n            x: 0,\n            y: 0\n        };\n        /** @private */ this._wasOverFitZoomLevel = false;\n        /** @private */ this._startZoomLevel = 1;\n    }\n    start() {\n        const { currSlide: currSlide } = this.gestures.pswp;\n        if (currSlide) {\n            this._startZoomLevel = currSlide.currZoomLevel;\n            $0915ccbaea3d6573$var$equalizePoints(this._startPan, currSlide.pan);\n        }\n        this.gestures.pswp.animations.stopAllPan();\n        this._wasOverFitZoomLevel = false;\n    }\n    change() {\n        const { p1: p1, startP1: startP1, p2: p2, startP2: startP2, pswp: pswp } = this.gestures;\n        const { currSlide: currSlide } = pswp;\n        if (!currSlide) return;\n        const minZoomLevel = currSlide.zoomLevels.min;\n        const maxZoomLevel = currSlide.zoomLevels.max;\n        if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) return;\n        $0915ccbaea3d6573$var$getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\n        $0915ccbaea3d6573$var$getZoomPointsCenter(this._zoomPoint, p1, p2);\n        let currZoomLevel = 1 / $0915ccbaea3d6573$var$getDistanceBetween(startP1, startP2) * $0915ccbaea3d6573$var$getDistanceBetween(p1, p2) * this._startZoomLevel;\n        // slightly over the zoom.fit\n        if (currZoomLevel > currSlide.zoomLevels.initial + currSlide.zoomLevels.initial / 15) this._wasOverFitZoomLevel = true;\n        if (currZoomLevel < minZoomLevel) {\n            if (pswp.options.pinchToClose && !this._wasOverFitZoomLevel && this._startZoomLevel <= currSlide.zoomLevels.initial) {\n                // fade out background if zooming out\n                const bgOpacity = 1 - (minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2);\n                if (!pswp.dispatch(\"pinchClose\", {\n                    bgOpacity: bgOpacity\n                }).defaultPrevented) pswp.applyBgOpacity(bgOpacity);\n            } else // Apply the friction if zoom level is below the min\n            currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * $0915ccbaea3d6573$var$LOWER_ZOOM_FRICTION;\n        } else if (currZoomLevel > maxZoomLevel) // Apply the friction if zoom level is above the max\n        currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * $0915ccbaea3d6573$var$UPPER_ZOOM_FRICTION;\n        currSlide.pan.x = this._calculatePanForZoomLevel(\"x\", currZoomLevel);\n        currSlide.pan.y = this._calculatePanForZoomLevel(\"y\", currZoomLevel);\n        currSlide.setZoomLevel(currZoomLevel);\n        currSlide.applyCurrentZoomPan();\n    }\n    end() {\n        const { pswp: pswp } = this.gestures;\n        const { currSlide: currSlide } = pswp;\n        if ((!currSlide || currSlide.currZoomLevel < currSlide.zoomLevels.initial) && !this._wasOverFitZoomLevel && pswp.options.pinchToClose) pswp.close();\n        else this.correctZoomPan();\n    }\n    /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} currZoomLevel\r\n   * @returns {number}\r\n   */ _calculatePanForZoomLevel(axis, currZoomLevel) {\n        const zoomFactor = currZoomLevel / this._startZoomLevel;\n        return this._zoomPoint[axis] - (this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor;\n    }\n    /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {boolean} [ignoreGesture]\r\n   * Wether gesture coordinates should be ignored when calculating destination pan position.\r\n   */ correctZoomPan(ignoreGesture) {\n        const { pswp: pswp } = this.gestures;\n        const { currSlide: currSlide } = pswp;\n        if (!currSlide?.isZoomable()) return;\n        if (this._zoomPoint.x === 0) ignoreGesture = true;\n        const prevZoomLevel = currSlide.currZoomLevel;\n        /** @type {number} */ let destinationZoomLevel;\n        let currZoomLevelNeedsChange = true;\n        if (prevZoomLevel < currSlide.zoomLevels.initial) destinationZoomLevel = currSlide.zoomLevels.initial;\n        else if (prevZoomLevel > currSlide.zoomLevels.max) destinationZoomLevel = currSlide.zoomLevels.max;\n        else {\n            currZoomLevelNeedsChange = false;\n            destinationZoomLevel = prevZoomLevel;\n        }\n        const initialBgOpacity = pswp.bgOpacity;\n        const restoreBgOpacity = pswp.bgOpacity < 1;\n        const initialPan = $0915ccbaea3d6573$var$equalizePoints({\n            x: 0,\n            y: 0\n        }, currSlide.pan);\n        let destinationPan = $0915ccbaea3d6573$var$equalizePoints({\n            x: 0,\n            y: 0\n        }, initialPan);\n        if (ignoreGesture) {\n            this._zoomPoint.x = 0;\n            this._zoomPoint.y = 0;\n            this._startZoomPoint.x = 0;\n            this._startZoomPoint.y = 0;\n            this._startZoomLevel = prevZoomLevel;\n            $0915ccbaea3d6573$var$equalizePoints(this._startPan, initialPan);\n        }\n        if (currZoomLevelNeedsChange) destinationPan = {\n            x: this._calculatePanForZoomLevel(\"x\", destinationZoomLevel),\n            y: this._calculatePanForZoomLevel(\"y\", destinationZoomLevel)\n        };\n        // set zoom level, so pan bounds are updated according to it\n        currSlide.setZoomLevel(destinationZoomLevel);\n        destinationPan = {\n            x: currSlide.bounds.correctPan(\"x\", destinationPan.x),\n            y: currSlide.bounds.correctPan(\"y\", destinationPan.y)\n        };\n        // return zoom level and its bounds to initial\n        currSlide.setZoomLevel(prevZoomLevel);\n        const panNeedsChange = !$0915ccbaea3d6573$var$pointsEqual(destinationPan, initialPan);\n        if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\n            // update resolution after gesture\n            currSlide._setResolution(destinationZoomLevel);\n            currSlide.applyCurrentZoomPan();\n            // nothing to animate\n            return;\n        }\n        pswp.animations.stopAllPan();\n        pswp.animations.startSpring({\n            isPan: true,\n            start: 0,\n            end: 1000,\n            velocity: 0,\n            dampingRatio: 1,\n            naturalFrequency: 40,\n            onUpdate: (now)=>{\n                now /= 1000; // 0 - start, 1 - end\n                if (panNeedsChange || currZoomLevelNeedsChange) {\n                    if (panNeedsChange) {\n                        currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\n                        currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\n                    }\n                    if (currZoomLevelNeedsChange) {\n                        const newZoomLevel = prevZoomLevel + (destinationZoomLevel - prevZoomLevel) * now;\n                        currSlide.setZoomLevel(newZoomLevel);\n                    }\n                    currSlide.applyCurrentZoomPan();\n                }\n                // Restore background opacity\n                if (restoreBgOpacity && pswp.bgOpacity < 1) // We clamp opacity to keep it between 0 and 1.\n                // As progress ratio can be larger than 1 due to overshoot,\n                // and we do not want to bounce opacity.\n                pswp.applyBgOpacity($0915ccbaea3d6573$var$clamp(initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1));\n            },\n            onComplete: ()=>{\n                // update resolution after transition ends\n                currSlide._setResolution(destinationZoomLevel);\n                currSlide.applyCurrentZoomPan();\n            }\n        });\n    }\n}\n/**\r\n * @template {string} T\r\n * @template {string} P\r\n * @typedef {import('../types.js').AddPostfix<T, P>} AddPostfix<T, P>\r\n */ /** @typedef {import('./gestures.js').default} Gestures */ /** @typedef {import('../photoswipe.js').Point} Point */ /** @typedef {'imageClick' | 'bgClick' | 'tap' | 'doubleTap'} Actions */ /**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {PointerEvent} event\r\n * @returns {boolean}\r\n */ function $0915ccbaea3d6573$var$didTapOnMainContent(event) {\n    return !!/** @type {HTMLElement} */ event.target.closest(\".pswp__container\");\n}\n/**\r\n * Tap, double-tap handler.\r\n */ class $0915ccbaea3d6573$var$TapHandler {\n    /**\r\n   * @param {Gestures} gestures\r\n   */ constructor(gestures){\n        this.gestures = gestures;\n    }\n    /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */ click(point, originalEvent) {\n        const targetClassList = /** @type {HTMLElement} */ originalEvent.target.classList;\n        const isImageClick = targetClassList.contains(\"pswp__img\");\n        const isBackgroundClick = targetClassList.contains(\"pswp__item\") || targetClassList.contains(\"pswp__zoom-wrap\");\n        if (isImageClick) this._doClickOrTapAction(\"imageClick\", point, originalEvent);\n        else if (isBackgroundClick) this._doClickOrTapAction(\"bgClick\", point, originalEvent);\n    }\n    /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */ tap(point, originalEvent) {\n        if ($0915ccbaea3d6573$var$didTapOnMainContent(originalEvent)) this._doClickOrTapAction(\"tap\", point, originalEvent);\n    }\n    /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */ doubleTap(point, originalEvent) {\n        if ($0915ccbaea3d6573$var$didTapOnMainContent(originalEvent)) this._doClickOrTapAction(\"doubleTap\", point, originalEvent);\n    }\n    /**\r\n   * @private\r\n   * @param {Actions} actionName\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */ _doClickOrTapAction(actionName, point, originalEvent) {\n        const { pswp: pswp } = this.gestures;\n        const { currSlide: currSlide } = pswp;\n        const actionFullName = /** @type {AddPostfix<Actions, 'Action'>} */ actionName + \"Action\";\n        const optionValue = pswp.options[actionFullName];\n        if (pswp.dispatch(actionFullName, {\n            point: point,\n            originalEvent: originalEvent\n        }).defaultPrevented) return;\n        if (typeof optionValue === \"function\") {\n            optionValue.call(pswp, point, originalEvent);\n            return;\n        }\n        switch(optionValue){\n            case \"close\":\n            case \"next\":\n                pswp[optionValue]();\n                break;\n            case \"zoom\":\n                currSlide?.toggleZoom(point);\n                break;\n            case \"zoom-or-close\":\n                // by default click zooms current image,\n                // if it can not be zoomed - gallery will be closed\n                if (currSlide?.isZoomable() && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) currSlide.toggleZoom(point);\n                else if (pswp.options.clickToCloseNonZoomable) pswp.close();\n                break;\n            case \"toggle-controls\":\n                this.gestures.pswp.element?.classList.toggle(\"pswp--ui-visible\");\n                break;\n        }\n    }\n}\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */ /** @typedef {import('../photoswipe.js').Point} Point */ // How far should user should drag\n// until we can determine that the gesture is swipe and its direction\nconst $0915ccbaea3d6573$var$AXIS_SWIPE_HYSTERISIS = 10;\n//const PAN_END_FRICTION = 0.35;\nconst $0915ccbaea3d6573$var$DOUBLE_TAP_DELAY = 300; // ms\nconst $0915ccbaea3d6573$var$MIN_TAP_DISTANCE = 25; // px\n/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */ class $0915ccbaea3d6573$var$Gestures {\n    /**\r\n   * @param {PhotoSwipe} pswp\r\n   */ constructor(pswp){\n        this.pswp = pswp;\n        /** @type {'x' | 'y' | null} */ this.dragAxis = null;\n        // point objects are defined once and reused\n        // PhotoSwipe keeps track only of two pointers, others are ignored\n        /** @type {Point} */ this.p1 = {\n            x: 0,\n            y: 0\n        }; // the first pressed pointer\n        /** @type {Point} */ this.p2 = {\n            x: 0,\n            y: 0\n        }; // the second pressed pointer\n        /** @type {Point} */ this.prevP1 = {\n            x: 0,\n            y: 0\n        };\n        /** @type {Point} */ this.prevP2 = {\n            x: 0,\n            y: 0\n        };\n        /** @type {Point} */ this.startP1 = {\n            x: 0,\n            y: 0\n        };\n        /** @type {Point} */ this.startP2 = {\n            x: 0,\n            y: 0\n        };\n        /** @type {Point} */ this.velocity = {\n            x: 0,\n            y: 0\n        };\n        /** @type {Point}\r\n     * @private\r\n     */ this._lastStartP1 = {\n            x: 0,\n            y: 0\n        };\n        /** @type {Point}\r\n     * @private\r\n     */ this._intervalP1 = {\n            x: 0,\n            y: 0\n        };\n        /** @private */ this._numActivePoints = 0;\n        /** @type {Point[]}\r\n     * @private\r\n     */ this._ongoingPointers = [];\n        /** @private */ this._touchEventEnabled = \"ontouchstart\" in window;\n        /** @private */ this._pointerEventEnabled = !!window.PointerEvent;\n        this.supportsTouch = this._touchEventEnabled || this._pointerEventEnabled && navigator.maxTouchPoints > 1;\n        /** @private */ this._numActivePoints = 0;\n        /** @private */ this._intervalTime = 0;\n        /** @private */ this._velocityCalculated = false;\n        this.isMultitouch = false;\n        this.isDragging = false;\n        this.isZooming = false;\n        /** @type {number | null} */ this.raf = null;\n        /** @type {NodeJS.Timeout | null}\r\n     * @private\r\n     */ this._tapTimer = null;\n        if (!this.supportsTouch) // disable pan to next slide for non-touch devices\n        pswp.options.allowPanToNext = false;\n        this.drag = new $0915ccbaea3d6573$var$DragHandler(this);\n        this.zoomLevels = new $0915ccbaea3d6573$var$ZoomHandler(this);\n        this.tapHandler = new $0915ccbaea3d6573$var$TapHandler(this);\n        pswp.on(\"bindEvents\", ()=>{\n            pswp.events.add(pswp.scrollWrap, \"click\", /** @type EventListener */ this._onClick.bind(this));\n            if (this._pointerEventEnabled) this._bindEvents(\"pointer\", \"down\", \"up\", \"cancel\");\n            else if (this._touchEventEnabled) {\n                this._bindEvents(\"touch\", \"start\", \"end\", \"cancel\");\n                // In previous versions we also bound mouse event here,\n                // in case device supports both touch and mouse events,\n                // but newer versions of browsers now support PointerEvent.\n                // on iOS10 if you bind touchmove/end after touchstart,\n                // and you don't preventDefault touchstart (which PhotoSwipe does),\n                // preventDefault will have no effect on touchmove and touchend.\n                // Unless you bind it previously.\n                if (pswp.scrollWrap) {\n                    pswp.scrollWrap.ontouchmove = ()=>{};\n                    pswp.scrollWrap.ontouchend = ()=>{};\n                }\n            } else this._bindEvents(\"mouse\", \"down\", \"up\");\n        });\n    }\n    /**\r\n   * @private\r\n   * @param {'mouse' | 'touch' | 'pointer'} pref\r\n   * @param {'down' | 'start'} down\r\n   * @param {'up' | 'end'} up\r\n   * @param {'cancel'} [cancel]\r\n   */ _bindEvents(pref, down, up, cancel) {\n        const { pswp: pswp } = this;\n        const { events: events } = pswp;\n        const cancelEvent = cancel ? pref + cancel : \"\";\n        events.add(pswp.scrollWrap, pref + down, /** @type EventListener */ this.onPointerDown.bind(this));\n        events.add(window, pref + \"move\", /** @type EventListener */ this.onPointerMove.bind(this));\n        events.add(window, pref + up, /** @type EventListener */ this.onPointerUp.bind(this));\n        if (cancelEvent) events.add(pswp.scrollWrap, cancelEvent, /** @type EventListener */ this.onPointerUp.bind(this));\n    }\n    /**\r\n   * @param {PointerEvent} e\r\n   */ onPointerDown(e) {\n        // We do not call preventDefault for touch events\n        // to allow browser to show native dialog on longpress\n        // (the one that allows to save image or open it in new tab).\n        //\n        // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\n        // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\n        const isMousePointer = e.type === \"mousedown\" || e.pointerType === \"mouse\";\n        // Allow dragging only via left mouse button.\n        // http://www.quirksmode.org/js/events_properties.html\n        // https://developer.mozilla.org/en-US/docs/Web/API/event.button\n        if (isMousePointer && e.button > 0) return;\n        const { pswp: pswp } = this;\n        // if PhotoSwipe is opening or closing\n        if (!pswp.opener.isOpen) {\n            e.preventDefault();\n            return;\n        }\n        if (pswp.dispatch(\"pointerDown\", {\n            originalEvent: e\n        }).defaultPrevented) return;\n        if (isMousePointer) {\n            pswp.mouseDetected();\n            // preventDefault mouse event to prevent\n            // browser image drag feature\n            this._preventPointerEventBehaviour(e);\n        }\n        pswp.animations.stopAll();\n        this._updatePoints(e, \"down\");\n        if (this._numActivePoints === 1) {\n            this.dragAxis = null;\n            // we need to store initial point to determine the main axis,\n            // drag is activated only after the axis is determined\n            $0915ccbaea3d6573$var$equalizePoints(this.startP1, this.p1);\n        }\n        if (this._numActivePoints > 1) {\n            // Tap or double tap should not trigger if more than one pointer\n            this._clearTapTimer();\n            this.isMultitouch = true;\n        } else this.isMultitouch = false;\n    }\n    /**\r\n   * @param {PointerEvent} e\r\n   */ onPointerMove(e) {\n        e.preventDefault(); // always preventDefault move event\n        if (!this._numActivePoints) return;\n        this._updatePoints(e, \"move\");\n        if (this.pswp.dispatch(\"pointerMove\", {\n            originalEvent: e\n        }).defaultPrevented) return;\n        if (this._numActivePoints === 1 && !this.isDragging) {\n            if (!this.dragAxis) this._calculateDragDirection();\n            // Drag axis was detected, emit drag.start\n            if (this.dragAxis && !this.isDragging) {\n                if (this.isZooming) {\n                    this.isZooming = false;\n                    this.zoomLevels.end();\n                }\n                this.isDragging = true;\n                this._clearTapTimer(); // Tap can not trigger after drag\n                // Adjust starting point\n                this._updateStartPoints();\n                this._intervalTime = Date.now();\n                //this._startTime = this._intervalTime;\n                this._velocityCalculated = false;\n                $0915ccbaea3d6573$var$equalizePoints(this._intervalP1, this.p1);\n                this.velocity.x = 0;\n                this.velocity.y = 0;\n                this.drag.start();\n                this._rafStopLoop();\n                this._rafRenderLoop();\n            }\n        } else if (this._numActivePoints > 1 && !this.isZooming) {\n            this._finishDrag();\n            this.isZooming = true;\n            // Adjust starting points\n            this._updateStartPoints();\n            this.zoomLevels.start();\n            this._rafStopLoop();\n            this._rafRenderLoop();\n        }\n    }\n    /**\r\n   * @private\r\n   */ _finishDrag() {\n        if (this.isDragging) {\n            this.isDragging = false;\n            // Try to calculate velocity,\n            // if it wasn't calculated yet in drag.change\n            if (!this._velocityCalculated) this._updateVelocity(true);\n            this.drag.end();\n            this.dragAxis = null;\n        }\n    }\n    /**\r\n   * @param {PointerEvent} e\r\n   */ onPointerUp(e) {\n        if (!this._numActivePoints) return;\n        this._updatePoints(e, \"up\");\n        if (this.pswp.dispatch(\"pointerUp\", {\n            originalEvent: e\n        }).defaultPrevented) return;\n        if (this._numActivePoints === 0) {\n            this._rafStopLoop();\n            if (this.isDragging) this._finishDrag();\n            else if (!this.isZooming && !this.isMultitouch) //this.zoomLevels.correctZoomPan();\n            this._finishTap(e);\n        }\n        if (this._numActivePoints < 2 && this.isZooming) {\n            this.isZooming = false;\n            this.zoomLevels.end();\n            if (this._numActivePoints === 1) {\n                // Since we have 1 point left, we need to reinitiate drag\n                this.dragAxis = null;\n                this._updateStartPoints();\n            }\n        }\n    }\n    /**\r\n   * @private\r\n   */ _rafRenderLoop() {\n        if (this.isDragging || this.isZooming) {\n            this._updateVelocity();\n            if (this.isDragging) // make sure that pointer moved since the last update\n            {\n                if (!$0915ccbaea3d6573$var$pointsEqual(this.p1, this.prevP1)) this.drag.change();\n            } else if (!$0915ccbaea3d6573$var$pointsEqual(this.p1, this.prevP1) || !$0915ccbaea3d6573$var$pointsEqual(this.p2, this.prevP2)) this.zoomLevels.change();\n            this._updatePrevPoints();\n            this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\n        }\n    }\n    /**\r\n   * Update velocity at 50ms interval\r\n   *\r\n   * @private\r\n   * @param {boolean} [force]\r\n   */ _updateVelocity(force) {\n        const time = Date.now();\n        const duration = time - this._intervalTime;\n        if (duration < 50 && !force) return;\n        this.velocity.x = this._getVelocity(\"x\", duration);\n        this.velocity.y = this._getVelocity(\"y\", duration);\n        this._intervalTime = time;\n        $0915ccbaea3d6573$var$equalizePoints(this._intervalP1, this.p1);\n        this._velocityCalculated = true;\n    }\n    /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */ _finishTap(e) {\n        const { mainScroll: mainScroll } = this.pswp;\n        // Do not trigger tap events if main scroll is shifted\n        if (mainScroll.isShifted()) {\n            // restore main scroll position\n            // (usually happens if stopped in the middle of animation)\n            mainScroll.moveIndexBy(0, true);\n            return;\n        }\n        // Do not trigger tap for touchcancel or pointercancel\n        if (e.type.indexOf(\"cancel\") > 0) return;\n        // Trigger click instead of tap for mouse events\n        if (e.type === \"mouseup\" || e.pointerType === \"mouse\") {\n            this.tapHandler.click(this.startP1, e);\n            return;\n        }\n        // Disable delay if there is no doubleTapAction\n        const tapDelay = this.pswp.options.doubleTapAction ? $0915ccbaea3d6573$var$DOUBLE_TAP_DELAY : 0;\n        // If tapTimer is defined - we tapped recently,\n        // check if the current tap is close to the previous one,\n        // if yes - trigger double tap\n        if (this._tapTimer) {\n            this._clearTapTimer();\n            // Check if two taps were more or less on the same place\n            if ($0915ccbaea3d6573$var$getDistanceBetween(this._lastStartP1, this.startP1) < $0915ccbaea3d6573$var$MIN_TAP_DISTANCE) this.tapHandler.doubleTap(this.startP1, e);\n        } else {\n            $0915ccbaea3d6573$var$equalizePoints(this._lastStartP1, this.startP1);\n            this._tapTimer = setTimeout(()=>{\n                this.tapHandler.tap(this.startP1, e);\n                this._clearTapTimer();\n            }, tapDelay);\n        }\n    }\n    /**\r\n   * @private\r\n   */ _clearTapTimer() {\n        if (this._tapTimer) {\n            clearTimeout(this._tapTimer);\n            this._tapTimer = null;\n        }\n    }\n    /**\r\n   * Get velocity for axis\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} duration\r\n   * @returns {number}\r\n   */ _getVelocity(axis, duration) {\n        // displacement is like distance, but can be negative.\n        const displacement = this.p1[axis] - this._intervalP1[axis];\n        if (Math.abs(displacement) > 1 && duration > 5) return displacement / duration;\n        return 0;\n    }\n    /**\r\n   * @private\r\n   */ _rafStopLoop() {\n        if (this.raf) {\n            cancelAnimationFrame(this.raf);\n            this.raf = null;\n        }\n    }\n    /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */ _preventPointerEventBehaviour(e) {\n        // TODO find a way to disable e.preventDefault on some elements\n        //      via event or some class or something\n        e.preventDefault();\n    }\n    /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @private\r\n   * @param {PointerEvent | TouchEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */ _updatePoints(e, pointerType) {\n        if (this._pointerEventEnabled) {\n            const pointerEvent = /** @type {PointerEvent} */ e;\n            // Try to find the current pointer in ongoing pointers by its ID\n            const pointerIndex = this._ongoingPointers.findIndex((ongoingPointer)=>{\n                return ongoingPointer.id === pointerEvent.pointerId;\n            });\n            if (pointerType === \"up\" && pointerIndex > -1) // release the pointer - remove it from ongoing\n            this._ongoingPointers.splice(pointerIndex, 1);\n            else if (pointerType === \"down\" && pointerIndex === -1) // add new pointer\n            this._ongoingPointers.push(this._convertEventPosToPoint(pointerEvent, {\n                x: 0,\n                y: 0\n            }));\n            else if (pointerIndex > -1) // update existing pointer\n            this._convertEventPosToPoint(pointerEvent, this._ongoingPointers[pointerIndex]);\n            this._numActivePoints = this._ongoingPointers.length;\n            // update points that PhotoSwipe uses\n            // to calculate position and scale\n            if (this._numActivePoints > 0) $0915ccbaea3d6573$var$equalizePoints(this.p1, this._ongoingPointers[0]);\n            if (this._numActivePoints > 1) $0915ccbaea3d6573$var$equalizePoints(this.p2, this._ongoingPointers[1]);\n        } else {\n            const touchEvent = /** @type {TouchEvent} */ e;\n            this._numActivePoints = 0;\n            if (touchEvent.type.indexOf(\"touch\") > -1) // Touch Event\n            // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\n            {\n                if (touchEvent.touches && touchEvent.touches.length > 0) {\n                    this._convertEventPosToPoint(touchEvent.touches[0], this.p1);\n                    this._numActivePoints++;\n                    if (touchEvent.touches.length > 1) {\n                        this._convertEventPosToPoint(touchEvent.touches[1], this.p2);\n                        this._numActivePoints++;\n                    }\n                }\n            } else {\n                // Mouse Event\n                this._convertEventPosToPoint(/** @type {PointerEvent} */ e, this.p1);\n                if (pointerType === \"up\") // clear all points on mouseup\n                this._numActivePoints = 0;\n                else this._numActivePoints++;\n            }\n        }\n    }\n    /** update points that were used during previous rAF tick\r\n   * @private\r\n   */ _updatePrevPoints() {\n        $0915ccbaea3d6573$var$equalizePoints(this.prevP1, this.p1);\n        $0915ccbaea3d6573$var$equalizePoints(this.prevP2, this.p2);\n    }\n    /** update points at the start of gesture\r\n   * @private\r\n   */ _updateStartPoints() {\n        $0915ccbaea3d6573$var$equalizePoints(this.startP1, this.p1);\n        $0915ccbaea3d6573$var$equalizePoints(this.startP2, this.p2);\n        this._updatePrevPoints();\n    }\n    /** @private */ _calculateDragDirection() {\n        if (this.pswp.mainScroll.isShifted()) // if main scroll position is shifted – direction is always horizontal\n        this.dragAxis = \"x\";\n        else {\n            // calculate delta of the last touchmove tick\n            const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\n            if (diff !== 0) {\n                // check if pointer was shifted horizontally or vertically\n                const axisToCheck = diff > 0 ? \"x\" : \"y\";\n                if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= $0915ccbaea3d6573$var$AXIS_SWIPE_HYSTERISIS) this.dragAxis = axisToCheck;\n            }\n        }\n    }\n    /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @private\r\n   * @param {Touch | PointerEvent} e\r\n   * @param {Point} p\r\n   * @returns {Point}\r\n   */ _convertEventPosToPoint(e, p) {\n        p.x = e.pageX - this.pswp.offset.x;\n        p.y = e.pageY - this.pswp.offset.y;\n        if (\"pointerId\" in e) p.id = e.pointerId;\n        else if (e.identifier !== undefined) p.id = e.identifier;\n        return p;\n    }\n    /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */ _onClick(e) {\n        // Do not allow click event to pass through after drag\n        if (this.pswp.mainScroll.isShifted()) {\n            e.preventDefault();\n            e.stopPropagation();\n        }\n    }\n}\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */ /** @typedef {import('./slide/slide.js').default} Slide */ /** @typedef {{ el: HTMLDivElement; slide?: Slide }} ItemHolder */ const $0915ccbaea3d6573$var$MAIN_SCROLL_END_FRICTION = 0.35;\n// const MIN_SWIPE_TRANSITION_DURATION = 250;\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\n/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */ class $0915ccbaea3d6573$var$MainScroll {\n    /**\r\n   * @param {PhotoSwipe} pswp\r\n   */ constructor(pswp){\n        this.pswp = pswp;\n        this.x = 0;\n        this.slideWidth = 0;\n        /** @private */ this._currPositionIndex = 0;\n        /** @private */ this._prevPositionIndex = 0;\n        /** @private */ this._containerShiftIndex = -1;\n        /** @type {ItemHolder[]} */ this.itemHolders = [];\n    }\n    /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {boolean} [resizeSlides] Whether slides content should resized\r\n   */ resize(resizeSlides) {\n        const { pswp: pswp } = this;\n        const newSlideWidth = Math.round(pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing);\n        // Mobile browsers might trigger a resize event during a gesture.\n        // (due to toolbar appearing or hiding).\n        // Avoid re-adjusting main scroll position if width wasn't changed\n        const slideWidthChanged = newSlideWidth !== this.slideWidth;\n        if (slideWidthChanged) {\n            this.slideWidth = newSlideWidth;\n            this.moveTo(this.getCurrSlideX());\n        }\n        this.itemHolders.forEach((itemHolder, index)=>{\n            if (slideWidthChanged) $0915ccbaea3d6573$var$setTransform(itemHolder.el, (index + this._containerShiftIndex) * this.slideWidth);\n            if (resizeSlides && itemHolder.slide) itemHolder.slide.resize();\n        });\n    }\n    /**\r\n   * Reset X position of the main scroller to zero\r\n   */ resetPosition() {\n        // Position on the main scroller (offset)\n        // it is independent from slide index\n        this._currPositionIndex = 0;\n        this._prevPositionIndex = 0;\n        // This will force recalculation of size on next resize()\n        this.slideWidth = 0;\n        // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\n        this._containerShiftIndex = -1;\n    }\n    /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */ appendHolders() {\n        this.itemHolders = [];\n        // append our three slide holders -\n        // previous, current, and next\n        for(let i = 0; i < 3; i++){\n            const el = $0915ccbaea3d6573$var$createElement(\"pswp__item\", \"div\", this.pswp.container);\n            el.setAttribute(\"role\", \"group\");\n            el.setAttribute(\"aria-roledescription\", \"slide\");\n            el.setAttribute(\"aria-hidden\", \"true\");\n            // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\n            el.style.display = i === 1 ? \"block\" : \"none\";\n            this.itemHolders.push({\n                el: el\n            });\n        }\n    }\n    /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   * @returns {boolean}\r\n   */ canBeSwiped() {\n        return this.pswp.getNumItems() > 1;\n    }\n    /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {number} diff\r\n   * @param {boolean} [animate]\r\n   * @param {number} [velocityX]\r\n   * @returns {boolean} whether index was changed or not\r\n   */ moveIndexBy(diff, animate, velocityX) {\n        const { pswp: pswp } = this;\n        let newIndex = pswp.potentialIndex + diff;\n        const numSlides = pswp.getNumItems();\n        if (pswp.canLoop()) {\n            newIndex = pswp.getLoopedIndex(newIndex);\n            const distance = (diff + numSlides) % numSlides;\n            if (distance <= numSlides / 2) // go forward\n            diff = distance;\n            else // go backwards\n            diff = distance - numSlides;\n        } else {\n            if (newIndex < 0) newIndex = 0;\n            else if (newIndex >= numSlides) newIndex = numSlides - 1;\n            diff = newIndex - pswp.potentialIndex;\n        }\n        pswp.potentialIndex = newIndex;\n        this._currPositionIndex -= diff;\n        pswp.animations.stopMainScroll();\n        const destinationX = this.getCurrSlideX();\n        if (!animate) {\n            this.moveTo(destinationX);\n            this.updateCurrItem();\n        } else {\n            pswp.animations.startSpring({\n                isMainScroll: true,\n                start: this.x,\n                end: destinationX,\n                velocity: velocityX || 0,\n                naturalFrequency: 30,\n                dampingRatio: 1,\n                onUpdate: (x)=>{\n                    this.moveTo(x);\n                },\n                onComplete: ()=>{\n                    this.updateCurrItem();\n                    pswp.appendHeavy();\n                }\n            });\n            let currDiff = pswp.potentialIndex - pswp.currIndex;\n            if (pswp.canLoop()) {\n                const currDistance = (currDiff + numSlides) % numSlides;\n                if (currDistance <= numSlides / 2) // go forward\n                currDiff = currDistance;\n                else // go backwards\n                currDiff = currDistance - numSlides;\n            }\n            // Force-append new slides during transition\n            // if difference between slides is more than 1\n            if (Math.abs(currDiff) > 1) this.updateCurrItem();\n        }\n        return Boolean(diff);\n    }\n    /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   * @returns {number}\r\n   */ getCurrSlideX() {\n        return this.slideWidth * this._currPositionIndex;\n    }\n    /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   * @returns {boolean}\r\n   */ isShifted() {\n        return this.x !== this.getCurrSlideX();\n    }\n    /**\r\n   * Update slides X positions and set their content\r\n   */ updateCurrItem() {\n        const { pswp: pswp } = this;\n        const positionDifference = this._prevPositionIndex - this._currPositionIndex;\n        if (!positionDifference) return;\n        this._prevPositionIndex = this._currPositionIndex;\n        pswp.currIndex = pswp.potentialIndex;\n        let diffAbs = Math.abs(positionDifference);\n        /** @type {ItemHolder | undefined} */ let tempHolder;\n        if (diffAbs >= 3) {\n            this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\n            diffAbs = 3;\n        }\n        for(let i = 0; i < diffAbs; i++)if (positionDifference > 0) {\n            tempHolder = this.itemHolders.shift();\n            if (tempHolder) {\n                this.itemHolders[2] = tempHolder; // move first to last\n                this._containerShiftIndex++;\n                $0915ccbaea3d6573$var$setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\n                pswp.setContent(tempHolder, pswp.currIndex - diffAbs + i + 2);\n            }\n        } else {\n            tempHolder = this.itemHolders.pop();\n            if (tempHolder) {\n                this.itemHolders.unshift(tempHolder); // move last to first\n                this._containerShiftIndex--;\n                $0915ccbaea3d6573$var$setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\n                pswp.setContent(tempHolder, pswp.currIndex + diffAbs - i - 2);\n            }\n        }\n        // Reset transfrom every 50ish navigations in one direction.\n        //\n        // Otherwise transform will keep growing indefinitely,\n        // which might cause issues as browsers have a maximum transform limit.\n        // I wasn't able to reach it, but just to be safe.\n        // This should not cause noticable lag.\n        if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\n            this.resetPosition();\n            this.resize();\n        }\n        // Pan transition might be running (and consntantly updating pan position)\n        pswp.animations.stopAllPan();\n        this.itemHolders.forEach((itemHolder, i)=>{\n            if (itemHolder.slide) // Slide in the 2nd holder is always active\n            itemHolder.slide.setIsActive(i === 1);\n        });\n        pswp.currSlide = this.itemHolders[1]?.slide;\n        pswp.contentLoader.updateLazy(positionDifference);\n        if (pswp.currSlide) pswp.currSlide.applyCurrentZoomPan();\n        pswp.dispatch(\"change\");\n    }\n    /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {number} x\r\n   * @param {boolean} [dragging]\r\n   */ moveTo(x, dragging) {\n        if (!this.pswp.canLoop() && dragging) {\n            // Apply friction\n            let newSlideIndexOffset = (this.slideWidth * this._currPositionIndex - x) / this.slideWidth;\n            newSlideIndexOffset += this.pswp.currIndex;\n            const delta = Math.round(x - this.x);\n            if (newSlideIndexOffset < 0 && delta > 0 || newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0) x = this.x + delta * $0915ccbaea3d6573$var$MAIN_SCROLL_END_FRICTION;\n        }\n        this.x = x;\n        if (this.pswp.container) $0915ccbaea3d6573$var$setTransform(this.pswp.container, x);\n        this.pswp.dispatch(\"moveMainScroll\", {\n            x: x,\n            dragging: dragging ?? false\n        });\n    }\n}\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */ /**\r\n * @template T\r\n * @typedef {import('./types.js').Methods<T>} Methods<T>\r\n */ const $0915ccbaea3d6573$var$KeyboardKeyCodesMap = {\n    Escape: 27,\n    z: 90,\n    ArrowLeft: 37,\n    ArrowUp: 38,\n    ArrowRight: 39,\n    ArrowDown: 40,\n    Tab: 9\n};\n/**\r\n * @template {keyof KeyboardKeyCodesMap} T\r\n * @param {T} key\r\n * @param {boolean} isKeySupported\r\n * @returns {T | number | undefined}\r\n */ const $0915ccbaea3d6573$var$getKeyboardEventKey = (key, isKeySupported)=>{\n    return isKeySupported ? key : $0915ccbaea3d6573$var$KeyboardKeyCodesMap[key];\n};\n/**\r\n * - Manages keyboard shortcuts.\r\n * - Helps trap focus within photoswipe.\r\n */ class $0915ccbaea3d6573$var$Keyboard {\n    /**\r\n   * @param {PhotoSwipe} pswp\r\n   */ constructor(pswp){\n        this.pswp = pswp;\n        /** @private */ this._wasFocused = false;\n        pswp.on(\"bindEvents\", ()=>{\n            // Dialog was likely opened by keyboard if initial point is not defined\n            if (!pswp.options.initialPointerPos) // focus causes layout,\n            // which causes lag during the animation,\n            // that's why we delay it until the opener transition ends\n            this._focusRoot();\n            pswp.events.add(document, \"focusin\", /** @type EventListener */ this._onFocusIn.bind(this));\n            pswp.events.add(document, \"keydown\", /** @type EventListener */ this._onKeyDown.bind(this));\n        });\n        const lastActiveElement = /** @type {HTMLElement} */ document.activeElement;\n        pswp.on(\"destroy\", ()=>{\n            if (pswp.options.returnFocus && lastActiveElement && this._wasFocused) lastActiveElement.focus();\n        });\n    }\n    /** @private */ _focusRoot() {\n        if (!this._wasFocused && this.pswp.element) {\n            this.pswp.element.focus();\n            this._wasFocused = true;\n        }\n    }\n    /**\r\n   * @private\r\n   * @param {KeyboardEvent} e\r\n   */ _onKeyDown(e) {\n        const { pswp: pswp } = this;\n        if (pswp.dispatch(\"keydown\", {\n            originalEvent: e\n        }).defaultPrevented) return;\n        if ($0915ccbaea3d6573$var$specialKeyUsed(e)) // don't do anything if special key pressed\n        // to prevent from overriding default browser actions\n        // for example, in Chrome on Mac cmd+arrow-left returns to previous page\n        return;\n        /** @type {Methods<PhotoSwipe> | undefined} */ let keydownAction;\n        /** @type {'x' | 'y' | undefined} */ let axis;\n        let isForward = false;\n        const isKeySupported = \"key\" in e;\n        switch(isKeySupported ? e.key : e.keyCode){\n            case $0915ccbaea3d6573$var$getKeyboardEventKey(\"Escape\", isKeySupported):\n                if (pswp.options.escKey) keydownAction = \"close\";\n                break;\n            case $0915ccbaea3d6573$var$getKeyboardEventKey(\"z\", isKeySupported):\n                keydownAction = \"toggleZoom\";\n                break;\n            case $0915ccbaea3d6573$var$getKeyboardEventKey(\"ArrowLeft\", isKeySupported):\n                axis = \"x\";\n                break;\n            case $0915ccbaea3d6573$var$getKeyboardEventKey(\"ArrowUp\", isKeySupported):\n                axis = \"y\";\n                break;\n            case $0915ccbaea3d6573$var$getKeyboardEventKey(\"ArrowRight\", isKeySupported):\n                axis = \"x\";\n                isForward = true;\n                break;\n            case $0915ccbaea3d6573$var$getKeyboardEventKey(\"ArrowDown\", isKeySupported):\n                isForward = true;\n                axis = \"y\";\n                break;\n            case $0915ccbaea3d6573$var$getKeyboardEventKey(\"Tab\", isKeySupported):\n                this._focusRoot();\n                break;\n        }\n        // if left/right/top/bottom key\n        if (axis) {\n            // prevent page scroll\n            e.preventDefault();\n            const { currSlide: currSlide } = pswp;\n            if (pswp.options.arrowKeys && axis === \"x\" && pswp.getNumItems() > 1) keydownAction = isForward ? \"next\" : \"prev\";\n            else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\n                // up/down arrow keys pan the image vertically\n                // left/right arrow keys pan horizontally.\n                // Unless there is only one image,\n                // or arrowKeys option is disabled\n                currSlide.pan[axis] += isForward ? -80 : 80;\n                currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\n            }\n        }\n        if (keydownAction) {\n            e.preventDefault();\n            // @ts-ignore\n            pswp[keydownAction]();\n        }\n    }\n    /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @private\r\n   * @param {FocusEvent} e\r\n   */ _onFocusIn(e) {\n        const { template: template } = this.pswp;\n        if (template && document !== e.target && template !== e.target && !template.contains(/** @type {Node} */ e.target)) // focus root element\n        template.focus();\n    }\n}\nconst $0915ccbaea3d6573$var$DEFAULT_EASING = \"cubic-bezier(.4,0,.22,1)\";\n/** @typedef {import('./animations.js').SharedAnimationProps} SharedAnimationProps */ /** @typedef {Object} DefaultCssAnimationProps\r\n *\r\n * @prop {HTMLElement} target\r\n * @prop {number} [duration]\r\n * @prop {string} [easing]\r\n * @prop {string} [transform]\r\n * @prop {string} [opacity]\r\n * */ /** @typedef {SharedAnimationProps & DefaultCssAnimationProps} CssAnimationProps */ /**\r\n * Runs CSS transition.\r\n */ class $0915ccbaea3d6573$var$CSSAnimation {\n    /**\r\n   * onComplete can be unpredictable, be careful about current state\r\n   *\r\n   * @param {CssAnimationProps} props\r\n   */ constructor(props){\n        this.props = props;\n        const { target: target, onComplete: onComplete, transform: transform, onFinish: onFinish = ()=>{}, duration: duration = 333, easing: easing = $0915ccbaea3d6573$var$DEFAULT_EASING } = props;\n        this.onFinish = onFinish;\n        // support only transform and opacity\n        const prop = transform ? \"transform\" : \"opacity\";\n        const propValue = props[prop] ?? \"\";\n        /** @private */ this._target = target;\n        /** @private */ this._onComplete = onComplete;\n        /** @private */ this._finished = false;\n        /** @private */ this._onTransitionEnd = this._onTransitionEnd.bind(this);\n        // Using timeout hack to make sure that animation\n        // starts even if the animated property was changed recently,\n        // otherwise transitionend might not fire or transition won't start.\n        // https://drafts.csswg.org/css-transitions/#starting\n        //\n        // ¯\\_(ツ)_/¯\n        /** @private */ this._helperTimeout = setTimeout(()=>{\n            $0915ccbaea3d6573$var$setTransitionStyle(target, prop, duration, easing);\n            this._helperTimeout = setTimeout(()=>{\n                target.addEventListener(\"transitionend\", this._onTransitionEnd, false);\n                target.addEventListener(\"transitioncancel\", this._onTransitionEnd, false);\n                // Safari occasionally does not emit transitionend event\n                // if element property was modified during the transition,\n                // which may be caused by resize or third party component,\n                // using timeout as a safety fallback\n                this._helperTimeout = setTimeout(()=>{\n                    this._finalizeAnimation();\n                }, duration + 500);\n                target.style[prop] = propValue;\n            }, 30); // Do not reduce this number\n        }, 0);\n    }\n    /**\r\n   * @private\r\n   * @param {TransitionEvent} e\r\n   */ _onTransitionEnd(e) {\n        if (e.target === this._target) this._finalizeAnimation();\n    }\n    /**\r\n   * @private\r\n   */ _finalizeAnimation() {\n        if (!this._finished) {\n            this._finished = true;\n            this.onFinish();\n            if (this._onComplete) this._onComplete();\n        }\n    }\n    // Destroy is called automatically onFinish\n    destroy() {\n        if (this._helperTimeout) clearTimeout(this._helperTimeout);\n        $0915ccbaea3d6573$var$removeTransitionStyle(this._target);\n        this._target.removeEventListener(\"transitionend\", this._onTransitionEnd, false);\n        this._target.removeEventListener(\"transitioncancel\", this._onTransitionEnd, false);\n        if (!this._finished) this._finalizeAnimation();\n    }\n}\nconst $0915ccbaea3d6573$var$DEFAULT_NATURAL_FREQUENCY = 12;\nconst $0915ccbaea3d6573$var$DEFAULT_DAMPING_RATIO = 0.75;\n/**\r\n * Spring easing helper\r\n */ class $0915ccbaea3d6573$var$SpringEaser {\n    /**\r\n   * @param {number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {number} [dampingRatio]\r\n   * Determines how bouncy animation will be.\r\n   * From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   * \"overshoot\" refers to part of animation that\r\n   * goes beyond the final value.\r\n   *\r\n   * @param {number} [naturalFrequency]\r\n   * Determines how fast animation will slow down.\r\n   * The higher value - the stiffer the transition will be,\r\n   * and the faster it will slow down.\r\n   * Recommended value from 10 to 50\r\n   */ constructor(initialVelocity, dampingRatio, naturalFrequency){\n        this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\n        // https://en.wikipedia.org/wiki/Damping_ratio\n        this._dampingRatio = dampingRatio || $0915ccbaea3d6573$var$DEFAULT_DAMPING_RATIO;\n        // https://en.wikipedia.org/wiki/Natural_frequency\n        this._naturalFrequency = naturalFrequency || $0915ccbaea3d6573$var$DEFAULT_NATURAL_FREQUENCY;\n        this._dampedFrequency = this._naturalFrequency;\n        if (this._dampingRatio < 1) this._dampedFrequency *= Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\n    }\n    /**\r\n   * @param {number} deltaPosition Difference between current and end position of the animation\r\n   * @param {number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {number} Displacement, relative to the end position.\r\n   */ easeFrame(deltaPosition, deltaTime) {\n        // Inspired by Apple Webkit and Android spring function implementation\n        // https://en.wikipedia.org/wiki/Oscillation\n        // https://en.wikipedia.org/wiki/Damping_ratio\n        // we ignore mass (assume that it's 1kg)\n        let displacement = 0;\n        let coeff;\n        deltaTime /= 1000;\n        const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\n        if (this._dampingRatio === 1) {\n            coeff = this.velocity + this._naturalFrequency * deltaPosition;\n            displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\n            this.velocity = displacement * -this._naturalFrequency + coeff * naturalDumpingPow;\n        } else if (this._dampingRatio < 1) {\n            coeff = 1 / this._dampedFrequency * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\n            const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\n            const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\n            displacement = naturalDumpingPow * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\n            this.velocity = displacement * -this._naturalFrequency * this._dampingRatio + naturalDumpingPow * (-this._dampedFrequency * deltaPosition * dumpedFSin + this._dampedFrequency * coeff * dumpedFCos);\n        }\n        // Overdamped (>1) damping ratio is not supported\n        return displacement;\n    }\n}\n/** @typedef {import('./animations.js').SharedAnimationProps} SharedAnimationProps */ /**\r\n * @typedef {Object} DefaultSpringAnimationProps\r\n *\r\n * @prop {number} start\r\n * @prop {number} end\r\n * @prop {number} velocity\r\n * @prop {number} [dampingRatio]\r\n * @prop {number} [naturalFrequency]\r\n * @prop {(end: number) => void} onUpdate\r\n */ /** @typedef {SharedAnimationProps & DefaultSpringAnimationProps} SpringAnimationProps */ class $0915ccbaea3d6573$var$SpringAnimation {\n    /**\r\n   * @param {SpringAnimationProps} props\r\n   */ constructor(props){\n        this.props = props;\n        this._raf = 0;\n        const { start: start, end: end, velocity: velocity, onUpdate: onUpdate, onComplete: onComplete, onFinish: onFinish = ()=>{}, dampingRatio: dampingRatio, naturalFrequency: naturalFrequency } = props;\n        this.onFinish = onFinish;\n        const easer = new $0915ccbaea3d6573$var$SpringEaser(velocity, dampingRatio, naturalFrequency);\n        let prevTime = Date.now();\n        let deltaPosition = start - end;\n        const animationLoop = ()=>{\n            if (this._raf) {\n                deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime);\n                // Stop the animation if velocity is low and position is close to end\n                if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\n                    // Finalize the animation\n                    onUpdate(end);\n                    if (onComplete) onComplete();\n                    this.onFinish();\n                } else {\n                    prevTime = Date.now();\n                    onUpdate(deltaPosition + end);\n                    this._raf = requestAnimationFrame(animationLoop);\n                }\n            }\n        };\n        this._raf = requestAnimationFrame(animationLoop);\n    }\n    // Destroy is called automatically onFinish\n    destroy() {\n        if (this._raf >= 0) cancelAnimationFrame(this._raf);\n        this._raf = 0;\n    }\n}\n/** @typedef {import('./css-animation.js').CssAnimationProps} CssAnimationProps */ /** @typedef {import('./spring-animation.js').SpringAnimationProps} SpringAnimationProps */ /** @typedef {Object} SharedAnimationProps\r\n * @prop {string} [name]\r\n * @prop {boolean} [isPan]\r\n * @prop {boolean} [isMainScroll]\r\n * @prop {VoidFunction} [onComplete]\r\n * @prop {VoidFunction} [onFinish]\r\n */ /** @typedef {SpringAnimation | CSSAnimation} Animation */ /** @typedef {SpringAnimationProps | CssAnimationProps} AnimationProps */ /**\r\n * Manages animations\r\n */ class $0915ccbaea3d6573$var$Animations {\n    constructor(){\n        /** @type {Animation[]} */ this.activeAnimations = [];\n    }\n    /**\r\n   * @param {SpringAnimationProps} props\r\n   */ startSpring(props) {\n        this._start(props, true);\n    }\n    /**\r\n   * @param {CssAnimationProps} props\r\n   */ startTransition(props) {\n        this._start(props);\n    }\n    /**\r\n   * @private\r\n   * @param {AnimationProps} props\r\n   * @param {boolean} [isSpring]\r\n   * @returns {Animation}\r\n   */ _start(props, isSpring) {\n        const animation = isSpring ? new $0915ccbaea3d6573$var$SpringAnimation(/** @type SpringAnimationProps */ props) : new $0915ccbaea3d6573$var$CSSAnimation(/** @type CssAnimationProps */ props);\n        this.activeAnimations.push(animation);\n        animation.onFinish = ()=>this.stop(animation);\n        return animation;\n    }\n    /**\r\n   * @param {Animation} animation\r\n   */ stop(animation) {\n        animation.destroy();\n        const index = this.activeAnimations.indexOf(animation);\n        if (index > -1) this.activeAnimations.splice(index, 1);\n    }\n    stopAll() {\n        this.activeAnimations.forEach((animation)=>{\n            animation.destroy();\n        });\n        this.activeAnimations = [];\n    }\n    /**\r\n   * Stop all pan or zoom transitions\r\n   */ stopAllPan() {\n        this.activeAnimations = this.activeAnimations.filter((animation)=>{\n            if (animation.props.isPan) {\n                animation.destroy();\n                return false;\n            }\n            return true;\n        });\n    }\n    stopMainScroll() {\n        this.activeAnimations = this.activeAnimations.filter((animation)=>{\n            if (animation.props.isMainScroll) {\n                animation.destroy();\n                return false;\n            }\n            return true;\n        });\n    }\n    /**\r\n   * Returns true if main scroll transition is running\r\n   */ // isMainScrollRunning() {\n    //   return this.activeAnimations.some((animation) => {\n    //     return animation.props.isMainScroll;\n    //   });\n    // }\n    /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */ isPanRunning() {\n        return this.activeAnimations.some((animation)=>{\n            return animation.props.isPan;\n        });\n    }\n}\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */ /**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */ class $0915ccbaea3d6573$var$ScrollWheel {\n    /**\r\n   * @param {PhotoSwipe} pswp\r\n   */ constructor(pswp){\n        this.pswp = pswp;\n        pswp.events.add(pswp.element, \"wheel\", /** @type EventListener */ this._onWheel.bind(this));\n    }\n    /**\r\n   * @private\r\n   * @param {WheelEvent} e\r\n   */ _onWheel(e) {\n        e.preventDefault();\n        const { currSlide: currSlide } = this.pswp;\n        let { deltaX: deltaX, deltaY: deltaY } = e;\n        if (!currSlide) return;\n        if (this.pswp.dispatch(\"wheel\", {\n            originalEvent: e\n        }).defaultPrevented) return;\n        if (e.ctrlKey || this.pswp.options.wheelToZoom) // zoom\n        {\n            if (currSlide.isZoomable()) {\n                let zoomFactor = -deltaY;\n                if (e.deltaMode === 1 /* DOM_DELTA_LINE */ ) zoomFactor *= 0.05;\n                else zoomFactor *= e.deltaMode ? 1 : 0.002;\n                zoomFactor = 2 ** zoomFactor;\n                const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\n                currSlide.zoomTo(destZoomLevel, {\n                    x: e.clientX,\n                    y: e.clientY\n                });\n            }\n        } else // pan\n        if (currSlide.isPannable()) {\n            if (e.deltaMode === 1 /* DOM_DELTA_LINE */ ) {\n                // 18 - average line height\n                deltaX *= 18;\n                deltaY *= 18;\n            }\n            currSlide.panTo(currSlide.pan.x - deltaX, currSlide.pan.y - deltaY);\n        }\n    }\n}\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */ /**\r\n * @template T\r\n * @typedef {import('../types.js').Methods<T>} Methods<T>\r\n */ /**\r\n * @typedef {Object} UIElementMarkupProps\r\n * @prop {boolean} [isCustomSVG]\r\n * @prop {string} inner\r\n * @prop {string} [outlineID]\r\n * @prop {number | string} [size]\r\n */ /**\r\n * @typedef {Object} UIElementData\r\n * @prop {DefaultUIElements | string} [name]\r\n * @prop {string} [className]\r\n * @prop {UIElementMarkup} [html]\r\n * @prop {boolean} [isButton]\r\n * @prop {keyof HTMLElementTagNameMap} [tagName]\r\n * @prop {string} [title]\r\n * @prop {string} [ariaLabel]\r\n * @prop {(element: HTMLElement, pswp: PhotoSwipe) => void} [onInit]\r\n * @prop {Methods<PhotoSwipe> | ((e: MouseEvent, element: HTMLElement, pswp: PhotoSwipe) => void)} [onClick]\r\n * @prop {'bar' | 'wrapper' | 'root'} [appendTo]\r\n * @prop {number} [order]\r\n */ /** @typedef {'arrowPrev' | 'arrowNext' | 'close' | 'zoom' | 'counter'} DefaultUIElements */ /** @typedef {string | UIElementMarkupProps} UIElementMarkup */ /**\r\n * @param {UIElementMarkup} [htmlData]\r\n * @returns {string}\r\n */ function $0915ccbaea3d6573$var$addElementHTML(htmlData) {\n    if (typeof htmlData === \"string\") // Allow developers to provide full svg,\n    // For example:\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\n    //   <path d=\"...\" />\n    //   <circle ... />\n    // </svg>\n    // Can also be any HTML string.\n    return htmlData;\n    if (!htmlData || !htmlData.isCustomSVG) return \"\";\n    const svgData = htmlData;\n    let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">';\n    // replace all %d with size\n    out = out.split(\"%d\").join(/** @type {string} */ svgData.size || 32);\n    // Icons may contain outline/shadow,\n    // to make it we \"clone\" base icon shape and add border to it.\n    // Icon itself and border are styled via CSS.\n    //\n    // Property shadowID defines ID of element that should be cloned.\n    if (svgData.outlineID) out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\n    out += svgData.inner;\n    out += \"</svg>\";\n    return out;\n}\nclass $0915ccbaea3d6573$var$UIElement {\n    /**\r\n   * @param {PhotoSwipe} pswp\r\n   * @param {UIElementData} data\r\n   */ constructor(pswp, data){\n        const name = data.name || data.className;\n        let elementHTML = data.html;\n        // @ts-expect-error lookup only by `data.name` maybe?\n        if (pswp.options[name] === false) // exit if element is disabled from options\n        return;\n        // Allow to override SVG icons from options\n        // @ts-expect-error lookup only by `data.name` maybe?\n        if (typeof pswp.options[name + \"SVG\"] === \"string\") // arrowPrevSVG\n        // arrowNextSVG\n        // closeSVG\n        // zoomSVG\n        // @ts-expect-error lookup only by `data.name` maybe?\n        elementHTML = pswp.options[name + \"SVG\"];\n        pswp.dispatch(\"uiElementCreate\", {\n            data: data\n        });\n        let className = \"\";\n        if (data.isButton) {\n            className += \"pswp__button \";\n            className += data.className || `pswp__button--${data.name}`;\n        } else className += data.className || `pswp__${data.name}`;\n        let tagName = data.isButton ? data.tagName || \"button\" : data.tagName || \"div\";\n        tagName = /** @type {keyof HTMLElementTagNameMap} */ tagName.toLowerCase();\n        /** @type {HTMLElement} */ const element = $0915ccbaea3d6573$var$createElement(className, tagName);\n        if (data.isButton) {\n            if (tagName === \"button\") /** @type {HTMLButtonElement} */ element.type = \"button\";\n            let { title: title } = data;\n            const { ariaLabel: ariaLabel } = data;\n            // @ts-expect-error lookup only by `data.name` maybe?\n            if (typeof pswp.options[name + \"Title\"] === \"string\") // @ts-expect-error lookup only by `data.name` maybe?\n            title = pswp.options[name + \"Title\"];\n            if (title) element.title = title;\n            const ariaText = ariaLabel || title;\n            if (ariaText) element.setAttribute(\"aria-label\", ariaText);\n        }\n        element.innerHTML = $0915ccbaea3d6573$var$addElementHTML(elementHTML);\n        if (data.onInit) data.onInit(element, pswp);\n        if (data.onClick) element.onclick = (e)=>{\n            if (typeof data.onClick === \"string\") // @ts-ignore\n            pswp[data.onClick]();\n            else if (typeof data.onClick === \"function\") data.onClick(e, element, pswp);\n        };\n        // Top bar is default position\n        const appendTo = data.appendTo || \"bar\";\n        /** @type {HTMLElement | undefined} root element by default */ let container = pswp.element;\n        if (appendTo === \"bar\") {\n            if (!pswp.topBar) pswp.topBar = $0915ccbaea3d6573$var$createElement(\"pswp__top-bar pswp__hide-on-close\", \"div\", pswp.scrollWrap);\n            container = pswp.topBar;\n        } else {\n            // element outside of top bar gets a secondary class\n            // that makes element fade out on close\n            element.classList.add(\"pswp__hide-on-close\");\n            if (appendTo === \"wrapper\") container = pswp.scrollWrap;\n        }\n        container?.appendChild(pswp.applyFilters(\"uiElement\", element, data));\n    }\n}\n/*\r\n  Backward and forward arrow buttons\r\n */ /** @typedef {import('./ui-element.js').UIElementData} UIElementData */ /** @typedef {import('../photoswipe.js').default} PhotoSwipe */ /**\r\n *\r\n * @param {HTMLElement} element\r\n * @param {PhotoSwipe} pswp\r\n * @param {boolean} [isNextButton]\r\n */ function $0915ccbaea3d6573$var$initArrowButton(element, pswp, isNextButton) {\n    element.classList.add(\"pswp__button--arrow\");\n    // TODO: this should point to a unique id for this instance\n    element.setAttribute(\"aria-controls\", \"pswp__items\");\n    pswp.on(\"change\", ()=>{\n        if (!pswp.options.loop) {\n            if (isNextButton) /** @type {HTMLButtonElement} */ element.disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\n            else /** @type {HTMLButtonElement} */ element.disabled = !(pswp.currIndex > 0);\n        }\n    });\n}\n/** @type {UIElementData} */ const $0915ccbaea3d6573$var$arrowPrev = {\n    name: \"arrowPrev\",\n    className: \"pswp__button--arrow--prev\",\n    title: \"Previous\",\n    order: 10,\n    isButton: true,\n    appendTo: \"wrapper\",\n    html: {\n        isCustomSVG: true,\n        size: 60,\n        inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\n        outlineID: \"pswp__icn-arrow\"\n    },\n    onClick: \"prev\",\n    onInit: $0915ccbaea3d6573$var$initArrowButton\n};\n/** @type {UIElementData} */ const $0915ccbaea3d6573$var$arrowNext = {\n    name: \"arrowNext\",\n    className: \"pswp__button--arrow--next\",\n    title: \"Next\",\n    order: 11,\n    isButton: true,\n    appendTo: \"wrapper\",\n    html: {\n        isCustomSVG: true,\n        size: 60,\n        inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\n        outlineID: \"pswp__icn-arrow\"\n    },\n    onClick: \"next\",\n    onInit: (el, pswp)=>{\n        $0915ccbaea3d6573$var$initArrowButton(el, pswp, true);\n    }\n};\n/** @type {import('./ui-element.js').UIElementData} UIElementData */ const $0915ccbaea3d6573$var$closeButton = {\n    name: \"close\",\n    title: \"Close\",\n    order: 20,\n    isButton: true,\n    html: {\n        isCustomSVG: true,\n        inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\n        outlineID: \"pswp__icn-close\"\n    },\n    onClick: \"close\"\n};\n/** @type {import('./ui-element.js').UIElementData} UIElementData */ const $0915ccbaea3d6573$var$zoomButton = {\n    name: \"zoom\",\n    title: \"Zoom\",\n    order: 10,\n    isButton: true,\n    html: {\n        isCustomSVG: true,\n        // eslint-disable-next-line max-len\n        inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/><path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/><path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\n        outlineID: \"pswp__icn-zoom\"\n    },\n    onClick: \"toggleZoom\"\n};\n/** @type {import('./ui-element.js').UIElementData} UIElementData */ const $0915ccbaea3d6573$var$loadingIndicator = {\n    name: \"preloader\",\n    appendTo: \"bar\",\n    order: 7,\n    html: {\n        isCustomSVG: true,\n        // eslint-disable-next-line max-len\n        inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\n        outlineID: \"pswp__icn-loading\"\n    },\n    onInit: (indicatorElement, pswp)=>{\n        /** @type {boolean | undefined} */ let isVisible;\n        /** @type {NodeJS.Timeout | null} */ let delayTimeout = null;\n        /**\r\n     * @param {string} className\r\n     * @param {boolean} add\r\n     */ const toggleIndicatorClass = (className, add)=>{\n            indicatorElement.classList.toggle(\"pswp__preloader--\" + className, add);\n        };\n        /**\r\n     * @param {boolean} visible\r\n     */ const setIndicatorVisibility = (visible)=>{\n            if (isVisible !== visible) {\n                isVisible = visible;\n                toggleIndicatorClass(\"active\", visible);\n            }\n        };\n        const updatePreloaderVisibility = ()=>{\n            if (!pswp.currSlide?.content.isLoading()) {\n                setIndicatorVisibility(false);\n                if (delayTimeout) {\n                    clearTimeout(delayTimeout);\n                    delayTimeout = null;\n                }\n                return;\n            }\n            if (!delayTimeout) // display loading indicator with delay\n            delayTimeout = setTimeout(()=>{\n                setIndicatorVisibility(Boolean(pswp.currSlide?.content.isLoading()));\n                delayTimeout = null;\n            }, pswp.options.preloaderDelay);\n        };\n        pswp.on(\"change\", updatePreloaderVisibility);\n        pswp.on(\"loadComplete\", (e)=>{\n            if (pswp.currSlide === e.slide) updatePreloaderVisibility();\n        });\n        // expose the method\n        if (pswp.ui) pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\n    }\n};\n/** @type {import('./ui-element.js').UIElementData} UIElementData */ const $0915ccbaea3d6573$var$counterIndicator = {\n    name: \"counter\",\n    order: 5,\n    onInit: (counterElement, pswp)=>{\n        pswp.on(\"change\", ()=>{\n            counterElement.innerText = pswp.currIndex + 1 + pswp.options.indexIndicatorSep + pswp.getNumItems();\n        });\n    }\n};\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */ /** @typedef {import('./ui-element.js').UIElementData} UIElementData */ /**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default, it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {HTMLElement} el\r\n * @param {boolean} isZoomedIn\r\n */ function $0915ccbaea3d6573$var$setZoomedIn(el, isZoomedIn) {\n    el.classList.toggle(\"pswp--zoomed-in\", isZoomedIn);\n}\nclass $0915ccbaea3d6573$var$UI {\n    /**\r\n   * @param {PhotoSwipe} pswp\r\n   */ constructor(pswp){\n        this.pswp = pswp;\n        this.isRegistered = false;\n        /** @type {UIElementData[]} */ this.uiElementsData = [];\n        /** @type {(UIElement | UIElementData)[]} */ this.items = [];\n        /** @type {() => void} */ this.updatePreloaderVisibility = ()=>{};\n        /**\r\n     * @private\r\n     * @type {number | undefined}\r\n     */ this._lastUpdatedZoomLevel = undefined;\n    }\n    init() {\n        const { pswp: pswp } = this;\n        this.isRegistered = false;\n        this.uiElementsData = [\n            $0915ccbaea3d6573$var$closeButton,\n            $0915ccbaea3d6573$var$arrowPrev,\n            $0915ccbaea3d6573$var$arrowNext,\n            $0915ccbaea3d6573$var$zoomButton,\n            $0915ccbaea3d6573$var$loadingIndicator,\n            $0915ccbaea3d6573$var$counterIndicator\n        ];\n        pswp.dispatch(\"uiRegister\");\n        // sort by order\n        this.uiElementsData.sort((a, b)=>{\n            // default order is 0\n            return (a.order || 0) - (b.order || 0);\n        });\n        this.items = [];\n        this.isRegistered = true;\n        this.uiElementsData.forEach((uiElementData)=>{\n            this.registerElement(uiElementData);\n        });\n        pswp.on(\"change\", ()=>{\n            pswp.element?.classList.toggle(\"pswp--one-slide\", pswp.getNumItems() === 1);\n        });\n        pswp.on(\"zoomPanUpdate\", ()=>this._onZoomPanUpdate());\n    }\n    /**\r\n   * @param {UIElementData} elementData\r\n   */ registerElement(elementData) {\n        if (this.isRegistered) this.items.push(new $0915ccbaea3d6573$var$UIElement(this.pswp, elementData));\n        else this.uiElementsData.push(elementData);\n    }\n    /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   *\r\n   * @private\r\n   */ _onZoomPanUpdate() {\n        const { template: template, currSlide: currSlide, options: options } = this.pswp;\n        if (this.pswp.opener.isClosing || !template || !currSlide) return;\n        let { currZoomLevel: currZoomLevel } = currSlide;\n        // if not open yet - check against initial zoom level\n        if (!this.pswp.opener.isOpen) currZoomLevel = currSlide.zoomLevels.initial;\n        if (currZoomLevel === this._lastUpdatedZoomLevel) return;\n        this._lastUpdatedZoomLevel = currZoomLevel;\n        const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary;\n        // Initial and secondary zoom levels are almost equal\n        if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\n            // disable zoom\n            $0915ccbaea3d6573$var$setZoomedIn(template, false);\n            template.classList.remove(\"pswp--zoom-allowed\");\n            return;\n        }\n        template.classList.add(\"pswp--zoom-allowed\");\n        const potentialZoomLevel = currZoomLevel === currSlide.zoomLevels.initial ? currSlide.zoomLevels.secondary : currSlide.zoomLevels.initial;\n        $0915ccbaea3d6573$var$setZoomedIn(template, potentialZoomLevel <= currZoomLevel);\n        if (options.imageClickAction === \"zoom\" || options.imageClickAction === \"zoom-or-close\") template.classList.add(\"pswp--click-to-zoom\");\n    }\n}\n/** @typedef {import('./slide.js').SlideData} SlideData */ /** @typedef {import('../photoswipe.js').default} PhotoSwipe */ /** @typedef {{ x: number; y: number; w: number; innerRect?: { w: number; h: number; x: number; y: number } }} Bounds */ /**\r\n * @param {HTMLElement} el\r\n * @returns Bounds\r\n */ function $0915ccbaea3d6573$var$getBoundsByElement(el) {\n    const thumbAreaRect = el.getBoundingClientRect();\n    return {\n        x: thumbAreaRect.left,\n        y: thumbAreaRect.top,\n        w: thumbAreaRect.width\n    };\n}\n/**\r\n * @param {HTMLElement} el\r\n * @param {number} imageWidth\r\n * @param {number} imageHeight\r\n * @returns Bounds\r\n */ function $0915ccbaea3d6573$var$getCroppedBoundsByElement(el, imageWidth, imageHeight) {\n    const thumbAreaRect = el.getBoundingClientRect();\n    // fill image into the area\n    // (do they same as object-fit:cover does to retrieve coordinates)\n    const hRatio = thumbAreaRect.width / imageWidth;\n    const vRatio = thumbAreaRect.height / imageHeight;\n    const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\n    const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\n    const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\n    /**\r\n   * Coordinates of the image,\r\n   * as if it was not cropped,\r\n   * height is calculated automatically\r\n   *\r\n   * @type {Bounds}\r\n   */ const bounds = {\n        x: thumbAreaRect.left + offsetX,\n        y: thumbAreaRect.top + offsetY,\n        w: imageWidth * fillZoomLevel\n    };\n    // Coordinates of inner crop area\n    // relative to the image\n    bounds.innerRect = {\n        w: thumbAreaRect.width,\n        h: thumbAreaRect.height,\n        x: offsetX,\n        y: offsetY\n    };\n    return bounds;\n}\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {number} index\r\n * @param {SlideData} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns {Bounds | undefined}\r\n */ function $0915ccbaea3d6573$var$getThumbBounds(index, itemData, instance) {\n    // legacy event, before filters were introduced\n    const event = instance.dispatch(\"thumbBounds\", {\n        index: index,\n        itemData: itemData,\n        instance: instance\n    });\n    // @ts-expect-error\n    if (event.thumbBounds) // @ts-expect-error\n    return event.thumbBounds;\n    const { element: element } = itemData;\n    /** @type {Bounds | undefined} */ let thumbBounds;\n    /** @type {HTMLElement | null | undefined} */ let thumbnail;\n    if (element && instance.options.thumbSelector !== false) {\n        const thumbSelector = instance.options.thumbSelector || \"img\";\n        thumbnail = element.matches(thumbSelector) ? element : /** @type {HTMLElement | null} */ element.querySelector(thumbSelector);\n    }\n    thumbnail = instance.applyFilters(\"thumbEl\", thumbnail, itemData, index);\n    if (thumbnail) {\n        if (!itemData.thumbCropped) thumbBounds = $0915ccbaea3d6573$var$getBoundsByElement(thumbnail);\n        else thumbBounds = $0915ccbaea3d6573$var$getCroppedBoundsByElement(thumbnail, itemData.width || itemData.w || 0, itemData.height || itemData.h || 0);\n    }\n    return instance.applyFilters(\"thumbBounds\", thumbBounds, itemData, index);\n}\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */ /** @typedef {import('../photoswipe.js').default} PhotoSwipe */ /** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */ /** @typedef {import('../photoswipe.js').DataSource} DataSource */ /** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */ /** @typedef {import('../slide/content.js').default} ContentDefault */ /** @typedef {import('../slide/slide.js').default} Slide */ /** @typedef {import('../slide/slide.js').SlideData} SlideData */ /** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */ /** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */ /**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */ /** @typedef {{ x?: number; y?: number }} Point */ /**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide | undefined, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point | undefined, transitionDuration: number | false | undefined }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource | undefined, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */ /**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource | undefined) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement | null | undefined, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thubmnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds | undefined, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thubmnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n */ /**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter\r\n */ /**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */ /**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback\r\n */ /**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */ class $0915ccbaea3d6573$var$PhotoSwipeEvent {\n    /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */ constructor(type, details){\n        this.type = type;\n        this.defaultPrevented = false;\n        if (details) Object.assign(this, details);\n    }\n    preventDefault() {\n        this.defaultPrevented = true;\n    }\n}\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */ class $0915ccbaea3d6573$var$Eventable {\n    constructor(){\n        /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */ this._listeners = {};\n        /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */ this._filters = {};\n        /** @type {PhotoSwipe | undefined} */ this.pswp = undefined;\n        /** @type {PhotoSwipeOptions | undefined} */ this.options = undefined;\n    }\n    /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */ addFilter(name, fn, priority = 100) {\n        if (!this._filters[name]) this._filters[name] = [];\n        this._filters[name]?.push({\n            fn: fn,\n            priority: priority\n        });\n        this._filters[name]?.sort((f1, f2)=>f1.priority - f2.priority);\n        this.pswp?.addFilter(name, fn, priority);\n    }\n    /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */ removeFilter(name, fn) {\n        if (this._filters[name]) // @ts-expect-error\n        this._filters[name] = this._filters[name].filter((filter)=>filter.fn !== fn);\n        if (this.pswp) this.pswp.removeFilter(name, fn);\n    }\n    /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */ applyFilters(name, ...args) {\n        this._filters[name]?.forEach((filter)=>{\n            // @ts-expect-error\n            args[0] = filter.fn.apply(this, args);\n        });\n        return args[0];\n    }\n    /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */ on(name, fn) {\n        if (!this._listeners[name]) this._listeners[name] = [];\n        this._listeners[name]?.push(fn);\n        // When binding events to lightbox,\n        // also bind events to PhotoSwipe Core,\n        // if it's open.\n        this.pswp?.on(name, fn);\n    }\n    /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */ off(name, fn) {\n        if (this._listeners[name]) // @ts-expect-error\n        this._listeners[name] = this._listeners[name].filter((listener)=>fn !== listener);\n        this.pswp?.off(name, fn);\n    }\n    /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */ dispatch(name, details) {\n        if (this.pswp) return this.pswp.dispatch(name, details);\n        const event = /** @type {AugmentedEvent<T>} */ new $0915ccbaea3d6573$var$PhotoSwipeEvent(name, details);\n        this._listeners[name]?.forEach((listener)=>{\n            listener.call(this, event);\n        });\n        return event;\n    }\n}\nclass $0915ccbaea3d6573$var$Placeholder {\n    /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */ constructor(imageSrc, container){\n        // Create placeholder\n        // (stretched thumbnail or simple div behind the main image)\n        /** @type {HTMLImageElement | HTMLDivElement | null} */ this.element = $0915ccbaea3d6573$var$createElement(\"pswp__img pswp__img--placeholder\", imageSrc ? \"img\" : \"div\", container);\n        if (imageSrc) {\n            const imgEl = /** @type {HTMLImageElement} */ this.element;\n            imgEl.decoding = \"async\";\n            imgEl.alt = \"\";\n            imgEl.src = imageSrc;\n            imgEl.setAttribute(\"role\", \"presentation\");\n        }\n        this.element.setAttribute(\"aria-hidden\", \"true\");\n    }\n    /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */ setDisplayedSize(width, height) {\n        if (!this.element) return;\n        if (this.element.tagName === \"IMG\") {\n            // Use transform scale() to modify img placeholder size\n            // (instead of changing width/height directly).\n            // This helps with performance, specifically in iOS15 Safari.\n            $0915ccbaea3d6573$var$setWidthHeight(this.element, 250, \"auto\");\n            this.element.style.transformOrigin = \"0 0\";\n            this.element.style.transform = $0915ccbaea3d6573$var$toTransformString(0, 0, width / 250);\n        } else $0915ccbaea3d6573$var$setWidthHeight(this.element, width, height);\n    }\n    destroy() {\n        if (this.element?.parentNode) this.element.remove();\n        this.element = null;\n    }\n}\n/** @typedef {import('./slide.js').default} Slide */ /** @typedef {import('./slide.js').SlideData} SlideData */ /** @typedef {import('../core/base.js').default} PhotoSwipeBase */ /** @typedef {import('../util/util.js').LoadState} LoadState */ class $0915ccbaea3d6573$var$Content {\n    /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */ constructor(itemData, instance, index){\n        this.instance = instance;\n        this.data = itemData;\n        this.index = index;\n        /** @type {HTMLImageElement | HTMLDivElement | undefined} */ this.element = undefined;\n        /** @type {Placeholder | undefined} */ this.placeholder = undefined;\n        /** @type {Slide | undefined} */ this.slide = undefined;\n        this.displayedImageWidth = 0;\n        this.displayedImageHeight = 0;\n        this.width = Number(this.data.w) || Number(this.data.width) || 0;\n        this.height = Number(this.data.h) || Number(this.data.height) || 0;\n        this.isAttached = false;\n        this.hasSlide = false;\n        this.isDecoding = false;\n        /** @type {LoadState} */ this.state = $0915ccbaea3d6573$var$LOAD_STATE.IDLE;\n        if (this.data.type) this.type = this.data.type;\n        else if (this.data.src) this.type = \"image\";\n        else this.type = \"html\";\n        this.instance.dispatch(\"contentInit\", {\n            content: this\n        });\n    }\n    removePlaceholder() {\n        if (this.placeholder && !this.keepPlaceholder()) // With delay, as image might be loaded, but not rendered\n        setTimeout(()=>{\n            if (this.placeholder) {\n                this.placeholder.destroy();\n                this.placeholder = undefined;\n            }\n        }, 1000);\n    }\n    /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean} isLazy\r\n   * @param {boolean} [reload]\r\n   */ load(isLazy, reload) {\n        if (this.slide && this.usePlaceholder()) {\n            if (!this.placeholder) {\n                const placeholderSrc = this.instance.applyFilters(\"placeholderSrc\", // use  image-based placeholder only for the first slide,\n                // as rendering (even small stretched thumbnail) is an expensive operation\n                this.data.msrc && this.slide.isFirstSlide ? this.data.msrc : false, this);\n                this.placeholder = new $0915ccbaea3d6573$var$Placeholder(placeholderSrc, this.slide.container);\n            } else {\n                const placeholderEl = this.placeholder.element;\n                // Add placeholder to DOM if it was already created\n                if (placeholderEl && !placeholderEl.parentElement) this.slide.container.prepend(placeholderEl);\n            }\n        }\n        if (this.element && !reload) return;\n        if (this.instance.dispatch(\"contentLoad\", {\n            content: this,\n            isLazy: isLazy\n        }).defaultPrevented) return;\n        if (this.isImageContent()) {\n            this.element = $0915ccbaea3d6573$var$createElement(\"pswp__img\", \"img\");\n            // Start loading only after width is defined, as sizes might depend on it.\n            // Due to Safari feature, we must define sizes before srcset.\n            if (this.displayedImageWidth) this.loadImage(isLazy);\n        } else {\n            this.element = $0915ccbaea3d6573$var$createElement(\"pswp__content\", \"div\");\n            this.element.innerHTML = this.data.html || \"\";\n        }\n        if (reload && this.slide) this.slide.updateContentSize(true);\n    }\n    /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */ loadImage(isLazy) {\n        if (!this.isImageContent() || !this.element || this.instance.dispatch(\"contentLoadImage\", {\n            content: this,\n            isLazy: isLazy\n        }).defaultPrevented) return;\n        const imageElement = /** @type HTMLImageElement */ this.element;\n        this.updateSrcsetSizes();\n        if (this.data.srcset) imageElement.srcset = this.data.srcset;\n        imageElement.src = this.data.src ?? \"\";\n        imageElement.alt = this.data.alt ?? \"\";\n        this.state = $0915ccbaea3d6573$var$LOAD_STATE.LOADING;\n        if (imageElement.complete) this.onLoaded();\n        else {\n            imageElement.onload = ()=>{\n                this.onLoaded();\n            };\n            imageElement.onerror = ()=>{\n                this.onError();\n            };\n        }\n    }\n    /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */ setSlide(slide) {\n        this.slide = slide;\n        this.hasSlide = true;\n        this.instance = slide.pswp;\n    // todo: do we need to unset slide?\n    }\n    /**\r\n   * Content load success handler\r\n   */ onLoaded() {\n        this.state = $0915ccbaea3d6573$var$LOAD_STATE.LOADED;\n        if (this.slide && this.element) {\n            this.instance.dispatch(\"loadComplete\", {\n                slide: this.slide,\n                content: this\n            });\n            // if content is reloaded\n            if (this.slide.isActive && this.slide.heavyAppended && !this.element.parentNode) {\n                this.append();\n                this.slide.updateContentSize(true);\n            }\n            if (this.state === $0915ccbaea3d6573$var$LOAD_STATE.LOADED || this.state === $0915ccbaea3d6573$var$LOAD_STATE.ERROR) this.removePlaceholder();\n        }\n    }\n    /**\r\n   * Content load error handler\r\n   */ onError() {\n        this.state = $0915ccbaea3d6573$var$LOAD_STATE.ERROR;\n        if (this.slide) {\n            this.displayError();\n            this.instance.dispatch(\"loadComplete\", {\n                slide: this.slide,\n                isError: true,\n                content: this\n            });\n            this.instance.dispatch(\"loadError\", {\n                slide: this.slide,\n                content: this\n            });\n        }\n    }\n    /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */ isLoading() {\n        return this.instance.applyFilters(\"isContentLoading\", this.state === $0915ccbaea3d6573$var$LOAD_STATE.LOADING, this);\n    }\n    /**\r\n   * @returns {Boolean} If the content is in error state\r\n   */ isError() {\n        return this.state === $0915ccbaea3d6573$var$LOAD_STATE.ERROR;\n    }\n    /**\r\n   * @returns {boolean} If the content is image\r\n   */ isImageContent() {\n        return this.type === \"image\";\n    }\n    /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */ setDisplayedSize(width, height) {\n        if (!this.element) return;\n        if (this.placeholder) this.placeholder.setDisplayedSize(width, height);\n        if (this.instance.dispatch(\"contentResize\", {\n            content: this,\n            width: width,\n            height: height\n        }).defaultPrevented) return;\n        $0915ccbaea3d6573$var$setWidthHeight(this.element, width, height);\n        if (this.isImageContent() && !this.isError()) {\n            const isInitialSizeUpdate = !this.displayedImageWidth && width;\n            this.displayedImageWidth = width;\n            this.displayedImageHeight = height;\n            if (isInitialSizeUpdate) this.loadImage(false);\n            else this.updateSrcsetSizes();\n            if (this.slide) this.instance.dispatch(\"imageSizeChange\", {\n                slide: this.slide,\n                width: width,\n                height: height,\n                content: this\n            });\n        }\n    }\n    /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */ isZoomable() {\n        return this.instance.applyFilters(\"isContentZoomable\", this.isImageContent() && this.state !== $0915ccbaea3d6573$var$LOAD_STATE.ERROR, this);\n    }\n    /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */ updateSrcsetSizes() {\n        // Handle srcset sizes attribute.\n        //\n        // Never lower quality, if it was increased previously.\n        // Chrome does this automatically, Firefox and Safari do not,\n        // so we store largest used size in dataset.\n        if (!this.isImageContent() || !this.element || !this.data.srcset) return;\n        const image = /** @type HTMLImageElement */ this.element;\n        const sizesWidth = this.instance.applyFilters(\"srcsetSizesWidth\", this.displayedImageWidth, this);\n        if (!image.dataset.largestUsedSize || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)) {\n            image.sizes = sizesWidth + \"px\";\n            image.dataset.largestUsedSize = String(sizesWidth);\n        }\n    }\n    /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */ usePlaceholder() {\n        return this.instance.applyFilters(\"useContentPlaceholder\", this.isImageContent(), this);\n    }\n    /**\r\n   * Preload content with lazy-loading param\r\n   */ lazyLoad() {\n        if (this.instance.dispatch(\"contentLazyLoad\", {\n            content: this\n        }).defaultPrevented) return;\n        this.load(true);\n    }\n    /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */ keepPlaceholder() {\n        return this.instance.applyFilters(\"isKeepingPlaceholder\", this.isLoading(), this);\n    }\n    /**\r\n   * Destroy the content\r\n   */ destroy() {\n        this.hasSlide = false;\n        this.slide = undefined;\n        if (this.instance.dispatch(\"contentDestroy\", {\n            content: this\n        }).defaultPrevented) return;\n        this.remove();\n        if (this.placeholder) {\n            this.placeholder.destroy();\n            this.placeholder = undefined;\n        }\n        if (this.isImageContent() && this.element) {\n            this.element.onload = null;\n            this.element.onerror = null;\n            this.element = undefined;\n        }\n    }\n    /**\r\n   * Display error message\r\n   */ displayError() {\n        if (this.slide) {\n            let errorMsgEl = $0915ccbaea3d6573$var$createElement(\"pswp__error-msg\", \"div\");\n            errorMsgEl.innerText = this.instance.options?.errorMsg ?? \"\";\n            errorMsgEl = /** @type {HTMLDivElement} */ this.instance.applyFilters(\"contentErrorElement\", errorMsgEl, this);\n            this.element = $0915ccbaea3d6573$var$createElement(\"pswp__content pswp__error-msg-container\", \"div\");\n            this.element.appendChild(errorMsgEl);\n            this.slide.container.innerText = \"\";\n            this.slide.container.appendChild(this.element);\n            this.slide.updateContentSize(true);\n            this.removePlaceholder();\n        }\n    }\n    /**\r\n   * Append the content\r\n   */ append() {\n        if (this.isAttached || !this.element) return;\n        this.isAttached = true;\n        if (this.state === $0915ccbaea3d6573$var$LOAD_STATE.ERROR) {\n            this.displayError();\n            return;\n        }\n        if (this.instance.dispatch(\"contentAppend\", {\n            content: this\n        }).defaultPrevented) return;\n        const supportsDecode = \"decode\" in this.element;\n        if (this.isImageContent()) {\n            // Use decode() on nearby slides\n            //\n            // Nearby slide images are in DOM and not hidden via display:none.\n            // However, they are placed offscreen (to the left and right side).\n            //\n            // Some browsers do not composite the image until it's actually visible,\n            // using decode() helps.\n            //\n            // You might ask \"why dont you just decode() and then append all images\",\n            // that's because I want to show image before it's fully loaded,\n            // as browser can render parts of image while it is loading.\n            // We do not do this in Safari due to partial loading bug.\n            if (supportsDecode && this.slide && (!this.slide.isActive || $0915ccbaea3d6573$var$isSafari())) {\n                this.isDecoding = true;\n                // purposefully using finally instead of then,\n                // as if srcset sizes changes dynamically - it may cause decode error\n                /** @type {HTMLImageElement} */ this.element.decode().catch(()=>{}).finally(()=>{\n                    this.isDecoding = false;\n                    this.appendImage();\n                });\n            } else this.appendImage();\n        } else if (this.slide && !this.element.parentNode) this.slide.container.appendChild(this.element);\n    }\n    /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */ activate() {\n        if (this.instance.dispatch(\"contentActivate\", {\n            content: this\n        }).defaultPrevented || !this.slide) return;\n        if (this.isImageContent() && this.isDecoding && !$0915ccbaea3d6573$var$isSafari()) // add image to slide when it becomes active,\n        // even if it's not finished decoding\n        this.appendImage();\n        else if (this.isError()) this.load(false, true); // try to reload\n        if (this.slide.holderElement) this.slide.holderElement.setAttribute(\"aria-hidden\", \"false\");\n    }\n    /**\r\n   * Deactivate the content\r\n   */ deactivate() {\n        this.instance.dispatch(\"contentDeactivate\", {\n            content: this\n        });\n        if (this.slide && this.slide.holderElement) this.slide.holderElement.setAttribute(\"aria-hidden\", \"true\");\n    }\n    /**\r\n   * Remove the content from DOM\r\n   */ remove() {\n        this.isAttached = false;\n        if (this.instance.dispatch(\"contentRemove\", {\n            content: this\n        }).defaultPrevented) return;\n        if (this.element && this.element.parentNode) this.element.remove();\n        if (this.placeholder && this.placeholder.element) this.placeholder.element.remove();\n    }\n    /**\r\n   * Append the image content to slide container\r\n   */ appendImage() {\n        if (!this.isAttached) return;\n        if (this.instance.dispatch(\"contentAppendImage\", {\n            content: this\n        }).defaultPrevented) return;\n        // ensure that element exists and is not already appended\n        if (this.slide && this.element && !this.element.parentNode) this.slide.container.appendChild(this.element);\n        if (this.state === $0915ccbaea3d6573$var$LOAD_STATE.LOADED || this.state === $0915ccbaea3d6573$var$LOAD_STATE.ERROR) this.removePlaceholder();\n    }\n}\n/** @typedef {import('./content.js').default} Content */ /** @typedef {import('./slide.js').default} Slide */ /** @typedef {import('./slide.js').SlideData} SlideData */ /** @typedef {import('../core/base.js').default} PhotoSwipeBase */ /** @typedef {import('../photoswipe.js').default} PhotoSwipe */ const $0915ccbaea3d6573$var$MIN_SLIDES_TO_CACHE = 5;\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n * @param {number} index\r\n * @returns {Content} Image that is being decoded or false.\r\n */ function $0915ccbaea3d6573$var$lazyLoadData(itemData, instance, index) {\n    const content = instance.createContentFromData(itemData, index);\n    /** @type {ZoomLevel | undefined} */ let zoomLevel;\n    const { options: options } = instance;\n    // We need to know dimensions of the image to preload it,\n    // as it might use srcset, and we need to define sizes\n    if (options) {\n        zoomLevel = new $0915ccbaea3d6573$var$ZoomLevel(options, itemData, -1);\n        let viewportSize;\n        if (instance.pswp) viewportSize = instance.pswp.viewportSize;\n        else viewportSize = $0915ccbaea3d6573$var$getViewportSize(options, instance);\n        const panAreaSize = $0915ccbaea3d6573$var$getPanAreaSize(options, viewportSize, itemData, index);\n        zoomLevel.update(content.width, content.height, panAreaSize);\n    }\n    content.lazyLoad();\n    if (zoomLevel) content.setDisplayedSize(Math.ceil(content.width * zoomLevel.initial), Math.ceil(content.height * zoomLevel.initial));\n    return content;\n}\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default, it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n * @returns {Content | undefined}\r\n */ function $0915ccbaea3d6573$var$lazyLoadSlide(index, instance) {\n    const itemData = instance.getItemData(index);\n    if (instance.dispatch(\"lazyLoadSlide\", {\n        index: index,\n        itemData: itemData\n    }).defaultPrevented) return;\n    return $0915ccbaea3d6573$var$lazyLoadData(itemData, instance, index);\n}\nclass $0915ccbaea3d6573$var$ContentLoader {\n    /**\r\n   * @param {PhotoSwipe} pswp\r\n   */ constructor(pswp){\n        this.pswp = pswp;\n        // Total amount of cached images\n        this.limit = Math.max(pswp.options.preload[0] + pswp.options.preload[1] + 1, $0915ccbaea3d6573$var$MIN_SLIDES_TO_CACHE);\n        /** @type {Content[]} */ this._cachedItems = [];\n    }\n    /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number} [diff] Difference between slide indexes that was changed recently, or 0.\r\n   */ updateLazy(diff) {\n        const { pswp: pswp } = this;\n        if (pswp.dispatch(\"lazyLoad\").defaultPrevented) return;\n        const { preload: preload } = pswp.options;\n        const isForward = diff === undefined ? true : diff >= 0;\n        let i;\n        // preload[1] - num items to preload in forward direction\n        for(i = 0; i <= preload[1]; i++)this.loadSlideByIndex(pswp.currIndex + (isForward ? i : -i));\n        // preload[0] - num items to preload in backward direction\n        for(i = 1; i <= preload[0]; i++)this.loadSlideByIndex(pswp.currIndex + (isForward ? -i : i));\n    }\n    /**\r\n   * @param {number} initialIndex\r\n   */ loadSlideByIndex(initialIndex) {\n        const index = this.pswp.getLoopedIndex(initialIndex);\n        // try to get cached content\n        let content = this.getContentByIndex(index);\n        if (!content) {\n            // no cached content, so try to load from scratch:\n            content = $0915ccbaea3d6573$var$lazyLoadSlide(index, this.pswp);\n            // if content can be loaded, add it to cache:\n            if (content) this.addToCache(content);\n        }\n    }\n    /**\r\n   * @param {Slide} slide\r\n   * @returns {Content}\r\n   */ getContentBySlide(slide) {\n        let content = this.getContentByIndex(slide.index);\n        if (!content) {\n            // create content if not found in cache\n            content = this.pswp.createContentFromData(slide.data, slide.index);\n            this.addToCache(content);\n        }\n        // assign slide to content\n        content.setSlide(slide);\n        return content;\n    }\n    /**\r\n   * @param {Content} content\r\n   */ addToCache(content) {\n        // move to the end of array\n        this.removeByIndex(content.index);\n        this._cachedItems.push(content);\n        if (this._cachedItems.length > this.limit) {\n            // Destroy the first content that's not attached\n            const indexToRemove = this._cachedItems.findIndex((item)=>{\n                return !item.isAttached && !item.hasSlide;\n            });\n            if (indexToRemove !== -1) {\n                const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\n                removedItem.destroy();\n            }\n        }\n    }\n    /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */ removeByIndex(index) {\n        const indexToRemove = this._cachedItems.findIndex((item)=>item.index === index);\n        if (indexToRemove !== -1) this._cachedItems.splice(indexToRemove, 1);\n    }\n    /**\r\n   * @param {number} index\r\n   * @returns {Content | undefined}\r\n   */ getContentByIndex(index) {\n        return this._cachedItems.find((content)=>content.index === index);\n    }\n    destroy() {\n        this._cachedItems.forEach((content)=>content.destroy());\n        this._cachedItems = [];\n    }\n}\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */ /** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */ /**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */ class $0915ccbaea3d6573$var$PhotoSwipeBase extends $0915ccbaea3d6573$var$Eventable {\n    /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */ getNumItems() {\n        let numItems = 0;\n        const dataSource = this.options?.dataSource;\n        if (dataSource && \"length\" in dataSource) // may be an array or just object with length property\n        numItems = dataSource.length;\n        else if (dataSource && \"gallery\" in dataSource) {\n            // query DOM elements\n            if (!dataSource.items) dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\n            if (dataSource.items) numItems = dataSource.items.length;\n        }\n        // legacy event, before filters were introduced\n        const event = this.dispatch(\"numItems\", {\n            dataSource: dataSource,\n            numItems: numItems\n        });\n        return this.applyFilters(\"numItems\", event.numItems, dataSource);\n    }\n    /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   * @returns {Content}\r\n   */ createContentFromData(slideData, index) {\n        return new $0915ccbaea3d6573$var$Content(slideData, this, index);\n    }\n    /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   * @returns {SlideData}\r\n   */ getItemData(index) {\n        const dataSource = this.options?.dataSource;\n        /** @type {SlideData | HTMLElement} */ let dataSourceItem = {};\n        if (Array.isArray(dataSource)) // Datasource is an array of elements\n        dataSourceItem = dataSource[index];\n        else if (dataSource && \"gallery\" in dataSource) {\n            // dataSource has gallery property,\n            // thus it was created by Lightbox, based on\n            // gallery and children options\n            // query DOM elements\n            if (!dataSource.items) dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\n            dataSourceItem = dataSource.items[index];\n        }\n        let itemData = dataSourceItem;\n        if (itemData instanceof Element) itemData = this._domElementToItemData(itemData);\n        // Dispatching the itemData event,\n        // it's a legacy verion before filters were introduced\n        const event = this.dispatch(\"itemData\", {\n            itemData: itemData || {},\n            index: index\n        });\n        return this.applyFilters(\"itemData\", event.itemData, index);\n    }\n    /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   * @returns {HTMLElement[]}\r\n   */ _getGalleryDOMElements(galleryElement) {\n        if (this.options?.children || this.options?.childSelector) return $0915ccbaea3d6573$var$getElementsFromOption(this.options.children, this.options.childSelector, galleryElement) || [];\n        return [\n            galleryElement\n        ];\n    }\n    /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   * @returns {SlideData}\r\n   */ _domElementToItemData(element) {\n        /** @type {SlideData} */ const itemData = {\n            element: element\n        };\n        const linkEl = /** @type {HTMLAnchorElement} */ element.tagName === \"A\" ? element : element.querySelector(\"a\");\n        if (linkEl) {\n            // src comes from data-pswp-src attribute,\n            // if it's empty link href is used\n            itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\n            if (linkEl.dataset.pswpSrcset) itemData.srcset = linkEl.dataset.pswpSrcset;\n            itemData.width = linkEl.dataset.pswpWidth ? parseInt(linkEl.dataset.pswpWidth, 10) : 0;\n            itemData.height = linkEl.dataset.pswpHeight ? parseInt(linkEl.dataset.pswpHeight, 10) : 0;\n            // support legacy w & h properties\n            itemData.w = itemData.width;\n            itemData.h = itemData.height;\n            if (linkEl.dataset.pswpType) itemData.type = linkEl.dataset.pswpType;\n            const thumbnailEl = element.querySelector(\"img\");\n            if (thumbnailEl) {\n                // msrc is URL to placeholder image that's displayed before large image is loaded\n                // by default it's displayed only for the first slide\n                itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\n                itemData.alt = thumbnailEl.getAttribute(\"alt\") ?? \"\";\n            }\n            if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) itemData.thumbCropped = true;\n        }\n        return this.applyFilters(\"domItemData\", itemData, element, linkEl);\n    }\n    /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns {Content} Image that is being decoded or false.\r\n   */ lazyLoadData(itemData, index) {\n        return $0915ccbaea3d6573$var$lazyLoadData(itemData, this, index);\n    }\n}\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */ /** @typedef {import('./slide/get-thumb-bounds.js').Bounds} Bounds */ /** @typedef {import('./util/animations.js').AnimationProps} AnimationProps */ // some browsers do not paint\n// elements which opacity is set to 0,\n// since we need to pre-render elements for the animation -\n// we set it to the minimum amount\nconst $0915ccbaea3d6573$var$MIN_OPACITY = 0.003;\n/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */ class $0915ccbaea3d6573$var$Opener {\n    /**\r\n   * @param {PhotoSwipe} pswp\r\n   */ constructor(pswp){\n        this.pswp = pswp;\n        this.isClosed = true;\n        this.isOpen = false;\n        this.isClosing = false;\n        this.isOpening = false;\n        /**\r\n     * @private\r\n     * @type {number | false | undefined}\r\n     */ this._duration = undefined;\n        /** @private */ this._useAnimation = false;\n        /** @private */ this._croppedZoom = false;\n        /** @private */ this._animateRootOpacity = false;\n        /** @private */ this._animateBgOpacity = false;\n        /**\r\n     * @private\r\n     * @type { HTMLDivElement | HTMLImageElement | null | undefined }\r\n     */ this._placeholder = undefined;\n        /**\r\n     * @private\r\n     * @type { HTMLDivElement | undefined }\r\n     */ this._opacityElement = undefined;\n        /**\r\n     * @private\r\n     * @type { HTMLDivElement | undefined }\r\n     */ this._cropContainer1 = undefined;\n        /**\r\n     * @private\r\n     * @type { HTMLElement | null | undefined }\r\n     */ this._cropContainer2 = undefined;\n        /**\r\n     * @private\r\n     * @type {Bounds | undefined}\r\n     */ this._thumbBounds = undefined;\n        this._prepareOpen = this._prepareOpen.bind(this);\n        // Override initial zoom and pan position\n        pswp.on(\"firstZoomPan\", this._prepareOpen);\n    }\n    open() {\n        this._prepareOpen();\n        this._start();\n    }\n    close() {\n        if (this.isClosed || this.isClosing || this.isOpening) // if we close during opening animation\n        // for now do nothing,\n        // browsers aren't good at changing the direction of the CSS transition\n        return;\n        const slide = this.pswp.currSlide;\n        this.isOpen = false;\n        this.isOpening = false;\n        this.isClosing = true;\n        this._duration = this.pswp.options.hideAnimationDuration;\n        if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) this._duration = 0;\n        this._applyStartProps();\n        setTimeout(()=>{\n            this._start();\n        }, this._croppedZoom ? 30 : 0);\n    }\n    /** @private */ _prepareOpen() {\n        this.pswp.off(\"firstZoomPan\", this._prepareOpen);\n        if (!this.isOpening) {\n            const slide = this.pswp.currSlide;\n            this.isOpening = true;\n            this.isClosing = false;\n            this._duration = this.pswp.options.showAnimationDuration;\n            if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) this._duration = 0;\n            this._applyStartProps();\n        }\n    }\n    /** @private */ _applyStartProps() {\n        const { pswp: pswp } = this;\n        const slide = this.pswp.currSlide;\n        const { options: options } = pswp;\n        if (options.showHideAnimationType === \"fade\") {\n            options.showHideOpacity = true;\n            this._thumbBounds = undefined;\n        } else if (options.showHideAnimationType === \"none\") {\n            options.showHideOpacity = false;\n            this._duration = 0;\n            this._thumbBounds = undefined;\n        } else if (this.isOpening && pswp._initialThumbBounds) // Use initial bounds if defined\n        this._thumbBounds = pswp._initialThumbBounds;\n        else this._thumbBounds = this.pswp.getThumbBounds();\n        this._placeholder = slide?.getPlaceholderElement();\n        pswp.animations.stopAll();\n        // Discard animations when duration is less than 50ms\n        this._useAnimation = Boolean(this._duration && this._duration > 50);\n        this._animateZoom = Boolean(this._thumbBounds) && slide?.content.usePlaceholder() && (!this.isClosing || !pswp.mainScroll.isShifted());\n        if (!this._animateZoom) {\n            this._animateRootOpacity = true;\n            if (this.isOpening && slide) {\n                slide.zoomAndPanToInitial();\n                slide.applyCurrentZoomPan();\n            }\n        } else this._animateRootOpacity = options.showHideOpacity ?? false;\n        this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > $0915ccbaea3d6573$var$MIN_OPACITY;\n        this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\n        if (!this._useAnimation) {\n            this._duration = 0;\n            this._animateZoom = false;\n            this._animateBgOpacity = false;\n            this._animateRootOpacity = true;\n            if (this.isOpening) {\n                if (pswp.element) pswp.element.style.opacity = String($0915ccbaea3d6573$var$MIN_OPACITY);\n                pswp.applyBgOpacity(1);\n            }\n            return;\n        }\n        if (this._animateZoom && this._thumbBounds && this._thumbBounds.innerRect) {\n            // Properties are used when animation from cropped thumbnail\n            this._croppedZoom = true;\n            this._cropContainer1 = this.pswp.container;\n            this._cropContainer2 = this.pswp.currSlide?.holderElement;\n            if (pswp.container) {\n                pswp.container.style.overflow = \"hidden\";\n                pswp.container.style.width = pswp.viewportSize.x + \"px\";\n            }\n        } else this._croppedZoom = false;\n        if (this.isOpening) {\n            // Apply styles before opening transition\n            if (this._animateRootOpacity) {\n                if (pswp.element) pswp.element.style.opacity = String($0915ccbaea3d6573$var$MIN_OPACITY);\n                pswp.applyBgOpacity(1);\n            } else {\n                if (this._animateBgOpacity && pswp.bg) pswp.bg.style.opacity = String($0915ccbaea3d6573$var$MIN_OPACITY);\n                if (pswp.element) pswp.element.style.opacity = \"1\";\n            }\n            if (this._animateZoom) {\n                this._setClosedStateZoomPan();\n                if (this._placeholder) {\n                    // tell browser that we plan to animate the placeholder\n                    this._placeholder.style.willChange = \"transform\";\n                    // hide placeholder to allow hiding of\n                    // elements that overlap it (such as icons over the thumbnail)\n                    this._placeholder.style.opacity = String($0915ccbaea3d6573$var$MIN_OPACITY);\n                }\n            }\n        } else if (this.isClosing) {\n            // hide nearby slides to make sure that\n            // they are not painted during the transition\n            if (pswp.mainScroll.itemHolders[0]) pswp.mainScroll.itemHolders[0].el.style.display = \"none\";\n            if (pswp.mainScroll.itemHolders[2]) pswp.mainScroll.itemHolders[2].el.style.display = \"none\";\n            if (this._croppedZoom) {\n                if (pswp.mainScroll.x !== 0) {\n                    // shift the main scroller to zero position\n                    pswp.mainScroll.resetPosition();\n                    pswp.mainScroll.resize();\n                }\n            }\n        }\n    }\n    /** @private */ _start() {\n        if (this.isOpening && this._useAnimation && this._placeholder && this._placeholder.tagName === \"IMG\") // To ensure smooth animation\n        // we wait till the current slide image placeholder is decoded,\n        // but no longer than 250ms,\n        // and no shorter than 50ms\n        // (just using requestanimationframe is not enough in Firefox,\n        // for some reason)\n        new Promise((resolve)=>{\n            let decoded = false;\n            let isDelaying = true;\n            $0915ccbaea3d6573$var$decodeImage(/** @type {HTMLImageElement} */ this._placeholder).finally(()=>{\n                decoded = true;\n                if (!isDelaying) resolve(true);\n            });\n            setTimeout(()=>{\n                isDelaying = false;\n                if (decoded) resolve(true);\n            }, 50);\n            setTimeout(resolve, 250);\n        }).finally(()=>this._initiate());\n        else this._initiate();\n    }\n    /** @private */ _initiate() {\n        this.pswp.element?.style.setProperty(\"--pswp-transition-duration\", this._duration + \"ms\");\n        this.pswp.dispatch(this.isOpening ? \"openingAnimationStart\" : \"closingAnimationStart\");\n        // legacy event\n        this.pswp.dispatch(/** @type {'initialZoomIn' | 'initialZoomOut'} */ \"initialZoom\" + (this.isOpening ? \"In\" : \"Out\"));\n        this.pswp.element?.classList.toggle(\"pswp--ui-visible\", this.isOpening);\n        if (this.isOpening) {\n            if (this._placeholder) // unhide the placeholder\n            this._placeholder.style.opacity = \"1\";\n            this._animateToOpenState();\n        } else if (this.isClosing) this._animateToClosedState();\n        if (!this._useAnimation) this._onAnimationComplete();\n    }\n    /** @private */ _onAnimationComplete() {\n        const { pswp: pswp } = this;\n        this.isOpen = this.isOpening;\n        this.isClosed = this.isClosing;\n        this.isOpening = false;\n        this.isClosing = false;\n        pswp.dispatch(this.isOpen ? \"openingAnimationEnd\" : \"closingAnimationEnd\");\n        // legacy event\n        pswp.dispatch(/** @type {'initialZoomInEnd' | 'initialZoomOutEnd'} */ \"initialZoom\" + (this.isOpen ? \"InEnd\" : \"OutEnd\"));\n        if (this.isClosed) pswp.destroy();\n        else if (this.isOpen) {\n            if (this._animateZoom && pswp.container) {\n                pswp.container.style.overflow = \"visible\";\n                pswp.container.style.width = \"100%\";\n            }\n            pswp.currSlide?.applyCurrentZoomPan();\n        }\n    }\n    /** @private */ _animateToOpenState() {\n        const { pswp: pswp } = this;\n        if (this._animateZoom) {\n            if (this._croppedZoom && this._cropContainer1 && this._cropContainer2) {\n                this._animateTo(this._cropContainer1, \"transform\", \"translate3d(0,0,0)\");\n                this._animateTo(this._cropContainer2, \"transform\", \"none\");\n            }\n            if (pswp.currSlide) {\n                pswp.currSlide.zoomAndPanToInitial();\n                this._animateTo(pswp.currSlide.container, \"transform\", pswp.currSlide.getCurrentTransform());\n            }\n        }\n        if (this._animateBgOpacity && pswp.bg) this._animateTo(pswp.bg, \"opacity\", String(pswp.options.bgOpacity));\n        if (this._animateRootOpacity && pswp.element) this._animateTo(pswp.element, \"opacity\", \"1\");\n    }\n    /** @private */ _animateToClosedState() {\n        const { pswp: pswp } = this;\n        if (this._animateZoom) this._setClosedStateZoomPan(true);\n        // do not animate opacity if it's already at 0\n        if (this._animateBgOpacity && pswp.bgOpacity > 0.01 && pswp.bg) this._animateTo(pswp.bg, \"opacity\", \"0\");\n        if (this._animateRootOpacity && pswp.element) this._animateTo(pswp.element, \"opacity\", \"0\");\n    }\n    /**\r\n   * @private\r\n   * @param {boolean} [animate]\r\n   */ _setClosedStateZoomPan(animate) {\n        if (!this._thumbBounds) return;\n        const { pswp: pswp } = this;\n        const { innerRect: innerRect } = this._thumbBounds;\n        const { currSlide: currSlide, viewportSize: viewportSize } = pswp;\n        if (this._croppedZoom && innerRect && this._cropContainer1 && this._cropContainer2) {\n            const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\n            const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\n            const containerTwoPanX = viewportSize.x - innerRect.w;\n            const containerTwoPanY = viewportSize.y - innerRect.h;\n            if (animate) {\n                this._animateTo(this._cropContainer1, \"transform\", $0915ccbaea3d6573$var$toTransformString(containerOnePanX, containerOnePanY));\n                this._animateTo(this._cropContainer2, \"transform\", $0915ccbaea3d6573$var$toTransformString(containerTwoPanX, containerTwoPanY));\n            } else {\n                $0915ccbaea3d6573$var$setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\n                $0915ccbaea3d6573$var$setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\n            }\n        }\n        if (currSlide) {\n            $0915ccbaea3d6573$var$equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\n            currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\n            if (animate) this._animateTo(currSlide.container, \"transform\", currSlide.getCurrentTransform());\n            else currSlide.applyCurrentZoomPan();\n        }\n    }\n    /**\r\n   * @private\r\n   * @param {HTMLElement} target\r\n   * @param {'transform' | 'opacity'} prop\r\n   * @param {string} propValue\r\n   */ _animateTo(target, prop, propValue) {\n        if (!this._duration) {\n            target.style[prop] = propValue;\n            return;\n        }\n        const { animations: animations } = this.pswp;\n        /** @type {AnimationProps} */ const animProps = {\n            duration: this._duration,\n            easing: this.pswp.options.easing,\n            onComplete: ()=>{\n                if (!animations.activeAnimations.length) this._onAnimationComplete();\n            },\n            target: target\n        };\n        animProps[prop] = propValue;\n        animations.startTransition(animProps);\n    }\n}\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Type<T>} Type<T>\r\n */ /** @typedef {import('./slide/slide.js').SlideData} SlideData */ /** @typedef {import('./slide/zoom-level.js').ZoomLevelOption} ZoomLevelOption */ /** @typedef {import('./ui/ui-element.js').UIElementData} UIElementData */ /** @typedef {import('./main-scroll.js').ItemHolder} ItemHolder */ /** @typedef {import('./core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */ /** @typedef {import('./core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */ /** @typedef {import('./slide/get-thumb-bounds').Bounds} Bounds */ /**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('./core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */ /**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('./core/eventable.js').AugmentedEvent<T>} AugmentedEvent<T>\r\n */ /** @typedef {{ x: number; y: number; id?: string | number }} Point */ /** @typedef {{ top: number; bottom: number; left: number; right: number }} Padding */ /** @typedef {SlideData[]} DataSourceArray */ /** @typedef {{ gallery: HTMLElement; items?: HTMLElement[] }} DataSourceObject */ /** @typedef {DataSourceArray | DataSourceObject} DataSource */ /** @typedef {(point: Point, originalEvent: PointerEvent) => void} ActionFn */ /** @typedef {'close' | 'next' | 'zoom' | 'zoom-or-close' | 'toggle-controls'} ActionType */ /** @typedef {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} PhotoSwipeModule */ /** @typedef {PhotoSwipeModule | Promise<PhotoSwipeModule> | (() => Promise<PhotoSwipeModule>)} PhotoSwipeModuleOption */ /**\r\n * @typedef {string | NodeListOf<HTMLElement> | HTMLElement[] | HTMLElement} ElementProvider\r\n */ /** @typedef {Partial<PreparedPhotoSwipeOptions>} PhotoSwipeOptions https://photoswipe.com/options/ */ /**\r\n * @typedef {Object} PreparedPhotoSwipeOptions\r\n *\r\n * @prop {DataSource} [dataSource]\r\n * Pass an array of any items via dataSource option. Its length will determine amount of slides\r\n * (which may be modified further from numItems event).\r\n *\r\n * Each item should contain data that you need to generate slide\r\n * (for image slide it would be src (image URL), width (image width), height, srcset, alt).\r\n *\r\n * If these properties are not present in your initial array, you may \"pre-parse\" each item from itemData filter.\r\n *\r\n * @prop {number} bgOpacity\r\n * Background backdrop opacity, always define it via this option and not via CSS rgba color.\r\n *\r\n * @prop {number} spacing\r\n * Spacing between slides. Defined as ratio relative to the viewport width (0.1 = 10% of viewport).\r\n *\r\n * @prop {boolean} allowPanToNext\r\n * Allow swipe navigation to the next slide when the current slide is zoomed. Does not apply to mouse events.\r\n *\r\n * @prop {boolean} loop\r\n * If set to true you'll be able to swipe from the last to the first image.\r\n * Option is always false when there are less than 3 slides.\r\n *\r\n * @prop {boolean} [wheelToZoom]\r\n * By default PhotoSwipe zooms image with ctrl-wheel, if you enable this option - image will zoom just via wheel.\r\n *\r\n * @prop {boolean} pinchToClose\r\n * Pinch touch gesture to close the gallery.\r\n *\r\n * @prop {boolean} closeOnVerticalDrag\r\n * Vertical drag gesture to close the PhotoSwipe.\r\n *\r\n * @prop {Padding} [padding]\r\n * Slide area padding (in pixels).\r\n *\r\n * @prop {(viewportSize: Point, itemData: SlideData, index: number) => Padding} [paddingFn]\r\n * The option is checked frequently, so make sure it's performant. Overrides padding option if defined. For example:\r\n *\r\n * @prop {number | false} hideAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} showAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} zoomAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {string} easing\r\n * String, 'cubic-bezier(.4,0,.22,1)'. CSS easing function for open/close/zoom transitions.\r\n *\r\n * @prop {boolean} escKey\r\n * Esc key to close.\r\n *\r\n * @prop {boolean} arrowKeys\r\n * Left/right arrow keys for navigation.\r\n *\r\n * @prop {boolean} returnFocus\r\n * Restore focus the last active element after PhotoSwipe is closed.\r\n *\r\n * @prop {boolean} clickToCloseNonZoomable\r\n * If image is not zoomable (for example, smaller than viewport) it can be closed by clicking on it.\r\n *\r\n * @prop {ActionType | ActionFn | false} imageClickAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} bgClickAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} tapAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} doubleTapAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {number} preloaderDelay\r\n * Delay before the loading indicator will be displayed,\r\n * if image is loaded during it - the indicator will not be displayed at all. Can be zero.\r\n *\r\n * @prop {string} indexIndicatorSep\r\n * Used for slide count indicator (\"1 of 10 \").\r\n *\r\n * @prop {(options: PhotoSwipeOptions, pswp: PhotoSwipeBase) => Point} [getViewportSizeFn]\r\n * A function that should return slide viewport width and height, in format {x: 100, y: 100}.\r\n *\r\n * @prop {string} errorMsg\r\n * Message to display when the image wasn't able to load. If you need to display HTML - use contentErrorElement filter.\r\n *\r\n * @prop {[number, number]} preload\r\n * Lazy loading of nearby slides based on direction of movement. Should be an array with two integers,\r\n * first one - number of items to preload before the current image, second one - after the current image.\r\n * Two nearby images are always loaded.\r\n *\r\n * @prop {string} [mainClass]\r\n * Class that will be added to the root element of PhotoSwipe, may contain multiple separated by space.\r\n * Example on Styling page.\r\n *\r\n * @prop {HTMLElement} [appendToEl]\r\n * Element to which PhotoSwipe dialog will be appended when it opens.\r\n *\r\n * @prop {number} maxWidthToAnimate\r\n * Maximum width of image to animate, if initial rendered image width\r\n * is larger than this value - the opening/closing transition will be automatically disabled.\r\n *\r\n * @prop {string} [closeTitle]\r\n * Translating\r\n *\r\n * @prop {string} [zoomTitle]\r\n * Translating\r\n *\r\n * @prop {string} [arrowPrevTitle]\r\n * Translating\r\n *\r\n * @prop {string} [arrowNextTitle]\r\n * Translating\r\n *\r\n * @prop {'zoom' | 'fade' | 'none'} [showHideAnimationType]\r\n * To adjust opening or closing transition type use lightbox option `showHideAnimationType` (`String`).\r\n * It supports three values - `zoom` (default), `fade` (default if there is no thumbnail) and `none`.\r\n *\r\n * Animations are automatically disabled if user `(prefers-reduced-motion: reduce)`.\r\n *\r\n * @prop {number} index\r\n * Defines start slide index.\r\n *\r\n * @prop {(e: MouseEvent) => number} [getClickedIndexFn]\r\n *\r\n * @prop {boolean} [arrowPrev]\r\n * @prop {boolean} [arrowNext]\r\n * @prop {boolean} [zoom]\r\n * @prop {boolean} [close]\r\n * @prop {boolean} [counter]\r\n *\r\n * @prop {string} [arrowPrevSVG]\r\n * @prop {string} [arrowNextSVG]\r\n * @prop {string} [zoomSVG]\r\n * @prop {string} [closeSVG]\r\n * @prop {string} [counterSVG]\r\n *\r\n * @prop {string} [arrowPrevTitle]\r\n * @prop {string} [arrowNextTitle]\r\n * @prop {string} [zoomTitle]\r\n * @prop {string} [closeTitle]\r\n * @prop {string} [counterTitle]\r\n *\r\n * @prop {ZoomLevelOption} [initialZoomLevel]\r\n * @prop {ZoomLevelOption} [secondaryZoomLevel]\r\n * @prop {ZoomLevelOption} [maxZoomLevel]\r\n *\r\n * @prop {boolean} [mouseMovePan]\r\n * @prop {Point | null} [initialPointerPos]\r\n * @prop {boolean} [showHideOpacity]\r\n *\r\n * @prop {PhotoSwipeModuleOption} [pswpModule]\r\n * @prop {() => Promise<any>} [openPromise]\r\n * @prop {boolean} [preloadFirstSlide]\r\n * @prop {ElementProvider} [gallery]\r\n * @prop {string} [gallerySelector]\r\n * @prop {ElementProvider} [children]\r\n * @prop {string} [childSelector]\r\n * @prop {string | false} [thumbSelector]\r\n */ /** @type {PreparedPhotoSwipeOptions} */ const $0915ccbaea3d6573$var$defaultOptions = {\n    allowPanToNext: true,\n    spacing: 0.1,\n    loop: true,\n    pinchToClose: true,\n    closeOnVerticalDrag: true,\n    hideAnimationDuration: 333,\n    showAnimationDuration: 333,\n    zoomAnimationDuration: 333,\n    escKey: true,\n    arrowKeys: true,\n    returnFocus: true,\n    maxWidthToAnimate: 4000,\n    clickToCloseNonZoomable: true,\n    imageClickAction: \"zoom-or-close\",\n    bgClickAction: \"close\",\n    tapAction: \"toggle-controls\",\n    doubleTapAction: \"zoom\",\n    indexIndicatorSep: \" / \",\n    preloaderDelay: 2000,\n    bgOpacity: 0.8,\n    index: 0,\n    errorMsg: \"The image cannot be loaded\",\n    preload: [\n        1,\n        2\n    ],\n    easing: \"cubic-bezier(.4,0,.22,1)\"\n};\n/**\r\n * PhotoSwipe Core\r\n */ class $0915ccbaea3d6573$export$2e2bcd8739ae039 extends $0915ccbaea3d6573$var$PhotoSwipeBase {\n    /**\r\n   * @param {PhotoSwipeOptions} [options]\r\n   */ constructor(options){\n        super();\n        this.options = this._prepareOptions(options || {});\n        /**\r\n     * offset of viewport relative to document\r\n     *\r\n     * @type {Point}\r\n     */ this.offset = {\n            x: 0,\n            y: 0\n        };\n        /**\r\n     * @type {Point}\r\n     * @private\r\n     */ this._prevViewportSize = {\n            x: 0,\n            y: 0\n        };\n        /**\r\n     * Size of scrollable PhotoSwipe viewport\r\n     *\r\n     * @type {Point}\r\n     */ this.viewportSize = {\n            x: 0,\n            y: 0\n        };\n        /**\r\n     * background (backdrop) opacity\r\n     */ this.bgOpacity = 1;\n        this.currIndex = 0;\n        this.potentialIndex = 0;\n        this.isOpen = false;\n        this.isDestroying = false;\n        this.hasMouse = false;\n        /**\r\n     * @private\r\n     * @type {SlideData}\r\n     */ this._initialItemData = {};\n        /** @type {Bounds | undefined} */ this._initialThumbBounds = undefined;\n        /** @type {HTMLDivElement | undefined} */ this.topBar = undefined;\n        /** @type {HTMLDivElement | undefined} */ this.element = undefined;\n        /** @type {HTMLDivElement | undefined} */ this.template = undefined;\n        /** @type {HTMLDivElement | undefined} */ this.container = undefined;\n        /** @type {HTMLElement | undefined} */ this.scrollWrap = undefined;\n        /** @type {Slide | undefined} */ this.currSlide = undefined;\n        this.events = new $0915ccbaea3d6573$var$DOMEvents();\n        this.animations = new $0915ccbaea3d6573$var$Animations();\n        this.mainScroll = new $0915ccbaea3d6573$var$MainScroll(this);\n        this.gestures = new $0915ccbaea3d6573$var$Gestures(this);\n        this.opener = new $0915ccbaea3d6573$var$Opener(this);\n        this.keyboard = new $0915ccbaea3d6573$var$Keyboard(this);\n        this.contentLoader = new $0915ccbaea3d6573$var$ContentLoader(this);\n    }\n    /** @returns {boolean} */ init() {\n        if (this.isOpen || this.isDestroying) return false;\n        this.isOpen = true;\n        this.dispatch(\"init\"); // legacy\n        this.dispatch(\"beforeOpen\");\n        this._createMainStructure();\n        // add classes to the root element of PhotoSwipe\n        let rootClasses = \"pswp--open\";\n        if (this.gestures.supportsTouch) rootClasses += \" pswp--touch\";\n        if (this.options.mainClass) rootClasses += \" \" + this.options.mainClass;\n        if (this.element) this.element.className += \" \" + rootClasses;\n        this.currIndex = this.options.index || 0;\n        this.potentialIndex = this.currIndex;\n        this.dispatch(\"firstUpdate\"); // starting index can be modified here\n        // initialize scroll wheel handler to block the scroll\n        this.scrollWheel = new $0915ccbaea3d6573$var$ScrollWheel(this);\n        // sanitize index\n        if (Number.isNaN(this.currIndex) || this.currIndex < 0 || this.currIndex >= this.getNumItems()) this.currIndex = 0;\n        if (!this.gestures.supportsTouch) // enable mouse features if no touch support detected\n        this.mouseDetected();\n        // causes forced synchronous layout\n        this.updateSize();\n        this.offset.y = window.pageYOffset;\n        this._initialItemData = this.getItemData(this.currIndex);\n        this.dispatch(\"gettingData\", {\n            index: this.currIndex,\n            data: this._initialItemData,\n            slide: undefined\n        });\n        // *Layout* - calculate size and position of elements here\n        this._initialThumbBounds = this.getThumbBounds();\n        this.dispatch(\"initialLayout\");\n        this.on(\"openingAnimationEnd\", ()=>{\n            const { itemHolders: itemHolders } = this.mainScroll;\n            // Add content to the previous and next slide\n            if (itemHolders[0]) {\n                itemHolders[0].el.style.display = \"block\";\n                this.setContent(itemHolders[0], this.currIndex - 1);\n            }\n            if (itemHolders[2]) {\n                itemHolders[2].el.style.display = \"block\";\n                this.setContent(itemHolders[2], this.currIndex + 1);\n            }\n            this.appendHeavy();\n            this.contentLoader.updateLazy();\n            this.events.add(window, \"resize\", this._handlePageResize.bind(this));\n            this.events.add(window, \"scroll\", this._updatePageScrollOffset.bind(this));\n            this.dispatch(\"bindEvents\");\n        });\n        // set content for center slide (first time)\n        if (this.mainScroll.itemHolders[1]) this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\n        this.dispatch(\"change\");\n        this.opener.open();\n        this.dispatch(\"afterInit\");\n        return true;\n    }\n    /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {number} index\r\n   * @returns {number}\r\n   */ getLoopedIndex(index) {\n        const numSlides = this.getNumItems();\n        if (this.options.loop) {\n            if (index > numSlides - 1) index -= numSlides;\n            if (index < 0) index += numSlides;\n        }\n        return $0915ccbaea3d6573$var$clamp(index, 0, numSlides - 1);\n    }\n    appendHeavy() {\n        this.mainScroll.itemHolders.forEach((itemHolder)=>{\n            itemHolder.slide?.appendHeavy();\n        });\n    }\n    /**\r\n   * Change the slide\r\n   * @param {number} index New index\r\n   */ goTo(index) {\n        this.mainScroll.moveIndexBy(this.getLoopedIndex(index) - this.potentialIndex);\n    }\n    /**\r\n   * Go to the next slide.\r\n   */ next() {\n        this.goTo(this.potentialIndex + 1);\n    }\n    /**\r\n   * Go to the previous slide.\r\n   */ prev() {\n        this.goTo(this.potentialIndex - 1);\n    }\n    /**\r\n   * @see slide/slide.js zoomTo\r\n   *\r\n   * @param {Parameters<Slide['zoomTo']>} args\r\n   */ zoomTo(...args) {\n        this.currSlide?.zoomTo(...args);\n    }\n    /**\r\n   * @see slide/slide.js toggleZoom\r\n   */ toggleZoom() {\n        this.currSlide?.toggleZoom();\n    }\n    /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */ close() {\n        if (!this.opener.isOpen || this.isDestroying) return;\n        this.isDestroying = true;\n        this.dispatch(\"close\");\n        this.events.removeAll();\n        this.opener.close();\n    }\n    /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */ destroy() {\n        if (!this.isDestroying) {\n            this.options.showHideAnimationType = \"none\";\n            this.close();\n            return;\n        }\n        this.dispatch(\"destroy\");\n        this._listeners = {};\n        if (this.scrollWrap) {\n            this.scrollWrap.ontouchmove = null;\n            this.scrollWrap.ontouchend = null;\n        }\n        this.element?.remove();\n        this.mainScroll.itemHolders.forEach((itemHolder)=>{\n            itemHolder.slide?.destroy();\n        });\n        this.contentLoader.destroy();\n        this.events.removeAll();\n    }\n    /**\r\n   * Refresh/reload content of a slide by its index\r\n   *\r\n   * @param {number} slideIndex\r\n   */ refreshSlideContent(slideIndex) {\n        this.contentLoader.removeByIndex(slideIndex);\n        this.mainScroll.itemHolders.forEach((itemHolder, i)=>{\n            let potentialHolderIndex = (this.currSlide?.index ?? 0) - 1 + i;\n            if (this.canLoop()) potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);\n            if (potentialHolderIndex === slideIndex) {\n                // set the new slide content\n                this.setContent(itemHolder, slideIndex, true);\n                // activate the new slide if it's current\n                if (i === 1) {\n                    this.currSlide = itemHolder.slide;\n                    itemHolder.slide?.setIsActive(true);\n                }\n            }\n        });\n        this.dispatch(\"change\");\n    }\n    /**\r\n   * Set slide content\r\n   *\r\n   * @param {ItemHolder} holder mainScroll.itemHolders array item\r\n   * @param {number} index Slide index\r\n   * @param {boolean} [force] If content should be set even if index wasn't changed\r\n   */ setContent(holder, index, force) {\n        if (this.canLoop()) index = this.getLoopedIndex(index);\n        if (holder.slide) {\n            if (holder.slide.index === index && !force) // exit if holder already contains this slide\n            // this could be common when just three slides are used\n            return;\n            // destroy previous slide\n            holder.slide.destroy();\n            holder.slide = undefined;\n        }\n        // exit if no loop and index is out of bounds\n        if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) return;\n        const itemData = this.getItemData(index);\n        holder.slide = new $0915ccbaea3d6573$var$Slide(itemData, index, this);\n        // set current slide\n        if (index === this.currIndex) this.currSlide = holder.slide;\n        holder.slide.append(holder.el);\n    }\n    /** @returns {Point} */ getViewportCenterPoint() {\n        return {\n            x: this.viewportSize.x / 2,\n            y: this.viewportSize.y / 2\n        };\n    }\n    /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param {boolean} [force] Update size even if size of viewport was not changed.\r\n   */ updateSize(force) {\n        // let item;\n        // let itemIndex;\n        if (this.isDestroying) // exit if PhotoSwipe is closed or closing\n        // (to avoid errors, as resize event might be delayed)\n        return;\n        //const newWidth = this.scrollWrap.clientWidth;\n        //const newHeight = this.scrollWrap.clientHeight;\n        const newViewportSize = $0915ccbaea3d6573$var$getViewportSize(this.options, this);\n        if (!force && $0915ccbaea3d6573$var$pointsEqual(newViewportSize, this._prevViewportSize)) // Exit if dimensions were not changed\n        return;\n        //this._prevViewportSize.x = newWidth;\n        //this._prevViewportSize.y = newHeight;\n        $0915ccbaea3d6573$var$equalizePoints(this._prevViewportSize, newViewportSize);\n        this.dispatch(\"beforeResize\");\n        $0915ccbaea3d6573$var$equalizePoints(this.viewportSize, this._prevViewportSize);\n        this._updatePageScrollOffset();\n        this.dispatch(\"viewportSize\");\n        // Resize slides only after opener animation is finished\n        // and don't re-calculate size on inital size update\n        this.mainScroll.resize(this.opener.isOpen);\n        if (!this.hasMouse && window.matchMedia(\"(any-hover: hover)\").matches) this.mouseDetected();\n        this.dispatch(\"resize\");\n    }\n    /**\r\n   * @param {number} opacity\r\n   */ applyBgOpacity(opacity) {\n        this.bgOpacity = Math.max(opacity, 0);\n        if (this.bg) this.bg.style.opacity = String(this.bgOpacity * this.options.bgOpacity);\n    }\n    /**\r\n   * Whether mouse is detected\r\n   */ mouseDetected() {\n        if (!this.hasMouse) {\n            this.hasMouse = true;\n            this.element?.classList.add(\"pswp--has_mouse\");\n        }\n    }\n    /**\r\n   * Page resize event handler\r\n   *\r\n   * @private\r\n   */ _handlePageResize() {\n        this.updateSize();\n        // In iOS webview, if element size depends on document size,\n        // it'll be measured incorrectly in resize event\n        //\n        // https://bugs.webkit.org/show_bug.cgi?id=170595\n        // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\n        if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) setTimeout(()=>{\n            this.updateSize();\n        }, 500);\n    }\n    /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   *\r\n   * @private\r\n   */ _updatePageScrollOffset() {\n        this.setScrollOffset(0, window.pageYOffset);\n    }\n    /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */ setScrollOffset(x, y) {\n        this.offset.x = x;\n        this.offset.y = y;\n        this.dispatch(\"updateScrollOffset\");\n    }\n    /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   *\r\n   * @private\r\n   */ _createMainStructure() {\n        // root DOM element of PhotoSwipe (.pswp)\n        this.element = $0915ccbaea3d6573$var$createElement(\"pswp\", \"div\");\n        this.element.setAttribute(\"tabindex\", \"-1\");\n        this.element.setAttribute(\"role\", \"dialog\");\n        // template is legacy prop\n        this.template = this.element;\n        // Background is added as a separate element,\n        // as animating opacity is faster than animating rgba()\n        this.bg = $0915ccbaea3d6573$var$createElement(\"pswp__bg\", \"div\", this.element);\n        this.scrollWrap = $0915ccbaea3d6573$var$createElement(\"pswp__scroll-wrap\", \"section\", this.element);\n        this.container = $0915ccbaea3d6573$var$createElement(\"pswp__container\", \"div\", this.scrollWrap);\n        // aria pattern: carousel\n        this.scrollWrap.setAttribute(\"aria-roledescription\", \"carousel\");\n        this.container.setAttribute(\"aria-live\", \"off\");\n        this.container.setAttribute(\"id\", \"pswp__items\");\n        this.mainScroll.appendHolders();\n        this.ui = new $0915ccbaea3d6573$var$UI(this);\n        this.ui.init();\n        // append to DOM\n        (this.options.appendToEl || document.body).appendChild(this.element);\n    }\n    /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   *\r\n   * @returns {Bounds | undefined}\r\n   */ getThumbBounds() {\n        return $0915ccbaea3d6573$var$getThumbBounds(this.currIndex, this.currSlide ? this.currSlide.data : this._initialItemData, this);\n    }\n    /**\r\n   * If the PhotoSwipe can have continuous loop\r\n   * @returns Boolean\r\n   */ canLoop() {\n        return this.options.loop && this.getNumItems() > 2;\n    }\n    /**\r\n   * @private\r\n   * @param {PhotoSwipeOptions} options\r\n   * @returns {PreparedPhotoSwipeOptions}\r\n   */ _prepareOptions(options) {\n        if (window.matchMedia(\"(prefers-reduced-motion), (update: slow)\").matches) {\n            options.showHideAnimationType = \"none\";\n            options.zoomAnimationDuration = 0;\n        }\n        /** @type {PreparedPhotoSwipeOptions} */ return {\n            ...$0915ccbaea3d6573$var$defaultOptions,\n            ...options\n        };\n    }\n}\n\n});\n\n})();\n//# sourceMappingURL=photoswipe.esm.bee3cbe3.js.map\n","/*!\n  * PhotoSwipe 5.3.7 - https://photoswipe.com\n  * (c) 2023 Dmytro Semenov\n  */\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/**\r\n * @template {keyof HTMLElementTagNameMap} T\r\n * @param {string} className\r\n * @param {T} tagName\r\n * @param {Node} [appendToEl]\r\n * @returns {HTMLElementTagNameMap[T]}\r\n */\r\nfunction createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName);\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  return el;\r\n}\r\n\r\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\r\nfunction equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n/**\r\n * @param {Point} p\r\n */\r\nfunction roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {number}\r\n */\r\nfunction getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are equal\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {boolean}\r\n */\r\nfunction pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n * @returns {number}\r\n */\r\nfunction clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n * @returns {string}\r\n */\r\nfunction toTransformString(x, y, scale) {\r\n  let propValue = `translate3d(${x}px,${y || 0}px,0)`;\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ` scale3d(${scale},${scale},1)`;\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n */\r\nfunction setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string} [prop] CSS property to animate\r\n * @param {number} [duration] in ms\r\n * @param {string} [ease] CSS easing function\r\n */\r\nfunction setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? `${prop} ${duration}ms ${ease || defaultCSSEasing}`\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nfunction setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? `${w}px` : w;\r\n  el.style.height = (typeof h === 'number') ? `${h}px` : h;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nfunction removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\r\nfunction decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode().catch(() => {});\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nconst LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n * @returns {boolean}\r\n */\r\nfunction specialKeyUsed(e) {\r\n  return ('button' in e && e.button === 1) || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey;\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} [option]\r\n * @param {string} [legacySelector]\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nfunction getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\r\nfunction isSafari() {\r\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\r\n}\n\n// Detect passive event listener support\r\nlet supportsPassive = false;\r\n/* eslint-disable */\r\ntry {\r\n  /* @ts-ignore */\r\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\r\n    get: () => {\r\n      supportsPassive = true;\r\n    }\r\n  }));\r\n} catch (e) {}\r\n/* eslint-enable */\r\n\r\n/**\r\n * @typedef {Object} PoolItem\r\n * @prop {HTMLElement | Window | Document | undefined | null} target\r\n * @prop {string} type\r\n * @prop {EventListenerOrEventListenerObject} listener\r\n * @prop {boolean} [passive]\r\n */\r\n\r\nclass DOMEvents {\r\n  constructor() {\r\n    /**\r\n     * @type {PoolItem[]}\r\n     * @private\r\n     */\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type Can be multiple, separated by space.\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   */\r\n  add(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive);\r\n  }\r\n\r\n  /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   */\r\n  remove(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive, true);\r\n  }\r\n\r\n  /**\r\n   * Removes all bound events\r\n   */\r\n  removeAll() {\r\n    this._pool.forEach((poolItem) => {\r\n      this._toggleListener(\r\n        poolItem.target,\r\n        poolItem.type,\r\n        poolItem.listener,\r\n        poolItem.passive,\r\n        true,\r\n        true\r\n      );\r\n    });\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds or removes event\r\n   *\r\n   * @private\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   * @param {boolean} [unbind] Whether the event should be added or removed\r\n   * @param {boolean} [skipPool] Whether events pool should be skipped\r\n   */\r\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    const methodName = unbind ? 'removeEventListener' : 'addEventListener';\r\n    const types = type.split(' ');\r\n    types.forEach((eType) => {\r\n      if (eType) {\r\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\r\n        // so developer doesn't need to do this manually\r\n        if (!skipPool) {\r\n          if (unbind) {\r\n            // Remove from the events pool\r\n            this._pool = this._pool.filter((poolItem) => {\r\n              return poolItem.type !== eType\r\n                || poolItem.listener !== listener\r\n                || poolItem.target !== target;\r\n            });\r\n          } else {\r\n            // Add to the events pool\r\n            this._pool.push({\r\n              target,\r\n              type: eType,\r\n              listener,\r\n              passive\r\n            });\r\n          }\r\n        }\r\n\r\n        // most PhotoSwipe events call preventDefault,\r\n        // and we do not need browser to scroll the page\r\n        const eventOptions = supportsPassive ? { passive: (passive || false) } : false;\r\n\r\n        target[methodName](\r\n          eType,\r\n          listener,\r\n          eventOptions\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipeBase} pswp\r\n * @returns {Point}\r\n */\r\nfunction getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {Point} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nfunction parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  let paddingValue = 0;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return Number(paddingValue) || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {Point} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n * @returns {Point}\r\n */\r\nfunction getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\n\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {Record<Axis, number>} Point */\r\n/** @typedef {'x' | 'y'} Axis */\r\n\r\n/**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */\r\nclass PanBounds {\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  constructor(slide) {\r\n    this.slide = slide;\r\n    this.currZoomLevel = 1;\r\n    this.center = /** @type {Point} */ { x: 0, y: 0 };\r\n    this.max = /** @type {Point} */ { x: 0, y: 0 };\r\n    this.min = /** @type {Point} */ { x: 0, y: 0 };\r\n  }\r\n\r\n  /**\r\n   * _getItemBounds\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  update(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n\r\n    if (!this.slide.width) {\r\n      this.reset();\r\n    } else {\r\n      this._updateAxis('x');\r\n      this._updateAxis('y');\r\n      this.slide.pswp.dispatch('calcBounds', { slide: this.slide });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * _calculateItemBoundsForAxis\r\n   *\r\n   * @param {Axis} axis\r\n   */\r\n  _updateAxis(axis) {\r\n    const { pswp } = this.slide;\r\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\r\n    const paddingProp = axis === 'x' ? 'left' : 'top';\r\n    const padding = parsePaddingOption(\r\n      paddingProp,\r\n      pswp.options,\r\n      pswp.viewportSize,\r\n      this.slide.data,\r\n      this.slide.index\r\n    );\r\n\r\n    const panAreaSize = this.slide.panAreaSize[axis];\r\n\r\n    // Default position of element.\r\n    // By default, it is center of viewport:\r\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding;\r\n\r\n    // maximum pan position\r\n    this.max[axis] = (elSize > panAreaSize)\r\n      ? Math.round(panAreaSize - elSize) + padding\r\n      : this.center[axis];\r\n\r\n    // minimum pan position\r\n    this.min[axis] = (elSize > panAreaSize)\r\n      ? padding\r\n      : this.center[axis];\r\n  }\r\n\r\n  // _getZeroBounds\r\n  reset() {\r\n    this.center.x = 0;\r\n    this.center.y = 0;\r\n    this.max.x = 0;\r\n    this.max.y = 0;\r\n    this.min.x = 0;\r\n    this.min.y = 0;\r\n  }\r\n\r\n  /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {Axis} axis x or y\r\n   * @param {number} panOffset\r\n   * @returns {number}\r\n   */\r\n  correctPan(axis, panOffset) { // checkPanBounds\r\n    return clamp(panOffset, this.max[axis], this.min[axis]);\r\n  }\r\n}\n\nconst MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe} [pswp] PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n    /** @type { Point | null } */\r\n    this.panAreaSize = null;\r\n    /** @type { Point | null } */\r\n    this.elementSize = null;\r\n    this.fit = 1;\r\n    this.fill = 1;\r\n    this.vFill = 1;\r\n    this.initial = 1;\r\n    this.secondary = 1;\r\n    this.max = 1;\r\n    this.min = 1;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {Point} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    /** @type {Point} */\r\n    const elementSize = { x: maxWidth, y: maxHeight };\r\n    this.elementSize = elementSize;\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = panAreaSize.x / elementSize.x;\r\n    const vRatio = panAreaSize.y / elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   * @returns { number | undefined }\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (\r\n      optionPrefix + 'ZoomLevel'\r\n    );\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (this.elementSize && currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return this._parseZoomLevelOption('max') || Math.max(1, this.fit * 4);\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * Renders and allows to control a single slide\r\n */\r\nclass Slide {\r\n  /**\r\n   * @param {SlideData} data\r\n   * @param {number} index\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(data, index, pswp) {\r\n    this.data = data;\r\n    this.index = index;\r\n    this.pswp = pswp;\r\n    this.isActive = (index === pswp.currIndex);\r\n    this.currentResolution = 0;\r\n    /** @type {Point} */\r\n    this.panAreaSize = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.pan = { x: 0, y: 0 };\r\n\r\n    this.isFirstSlide = (this.isActive && !pswp.opener.isOpen);\r\n\r\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\r\n\r\n    this.pswp.dispatch('gettingData', {\r\n      slide: this,\r\n      data: this.data,\r\n      index\r\n    });\r\n\r\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\r\n    this.container = createElement('pswp__zoom-wrap', 'div');\r\n    /** @type {HTMLElement | null} */\r\n    this.holderElement = null;\r\n\r\n    this.currZoomLevel = 1;\r\n    /** @type {number} */\r\n    this.width = this.content.width;\r\n    /** @type {number} */\r\n    this.height = this.content.height;\r\n    this.heavyAppended = false;\r\n    this.bounds = new PanBounds(this);\r\n\r\n    this.prevDisplayedWidth = -1;\r\n    this.prevDisplayedHeight = -1;\r\n\r\n    this.pswp.dispatch('slideInit', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {boolean} isActive\r\n   */\r\n  setIsActive(isActive) {\r\n    if (isActive && !this.isActive) {\r\n      // slide just became active\r\n      this.activate();\r\n    } else if (!isActive && this.isActive) {\r\n      // slide just became non-active\r\n      this.deactivate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Appends slide content to DOM\r\n   *\r\n   * @param {HTMLElement} holderElement\r\n   */\r\n  append(holderElement) {\r\n    this.holderElement = holderElement;\r\n\r\n    this.container.style.transformOrigin = '0 0';\r\n\r\n    // Slide appended to DOM\r\n    if (!this.data) {\r\n      return;\r\n    }\r\n\r\n    this.calculateSize();\r\n\r\n    this.load();\r\n    this.updateContentSize();\r\n    this.appendHeavy();\r\n\r\n    this.holderElement.appendChild(this.container);\r\n\r\n    this.zoomAndPanToInitial();\r\n\r\n    this.pswp.dispatch('firstZoomPan', { slide: this });\r\n\r\n    this.applyCurrentZoomPan();\r\n\r\n    this.pswp.dispatch('afterSetContent', { slide: this });\r\n\r\n    if (this.isActive) {\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  load() {\r\n    this.content.load(false);\r\n    this.pswp.dispatch('slideLoad', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */\r\n  appendHeavy() {\r\n    const { pswp } = this;\r\n    const appendHeavyNearby = true; // todo\r\n\r\n    // Avoid appending heavy elements during animations\r\n    if (this.heavyAppended\r\n        || !pswp.opener.isOpen\r\n        || pswp.mainScroll.isShifted()\r\n        || (!this.isActive && !appendHeavyNearby)) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('appendHeavy', { slide: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.heavyAppended = true;\r\n\r\n    this.content.append();\r\n\r\n    this.pswp.dispatch('appendHeavyContent', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */\r\n  activate() {\r\n    this.isActive = true;\r\n    this.appendHeavy();\r\n    this.content.activate();\r\n    this.pswp.dispatch('slideActivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */\r\n  deactivate() {\r\n    this.isActive = false;\r\n    this.content.deactivate();\r\n\r\n    if (this.currZoomLevel !== this.zoomLevels.initial) {\r\n      // allow filtering\r\n      this.calculateSize();\r\n    }\r\n\r\n    // reset zoom level\r\n    this.currentResolution = 0;\r\n    this.zoomAndPanToInitial();\r\n    this.applyCurrentZoomPan();\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('slideDeactivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */\r\n  destroy() {\r\n    this.content.hasSlide = false;\r\n    this.content.remove();\r\n    this.container.remove();\r\n    this.pswp.dispatch('slideDestroy', { slide: this });\r\n  }\r\n\r\n  resize() {\r\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\r\n      // Keep initial zoom level if it was before the resize,\r\n      // as well as when this slide is not active\r\n\r\n      // Reset position and scale to original state\r\n      this.calculateSize();\r\n      this.currentResolution = 0;\r\n      this.zoomAndPanToInitial();\r\n      this.applyCurrentZoomPan();\r\n      this.updateContentSize();\r\n    } else {\r\n      // readjust pan position if it's beyond the bounds\r\n      this.calculateSize();\r\n      this.bounds.update(this.currZoomLevel);\r\n      this.panTo(this.pan.x, this.pan.y);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {boolean} [force] if size should be updated even if dimensions weren't changed\r\n   */\r\n  updateContentSize(force) {\r\n    // Use initial zoom level\r\n    // if resolution is not defined (user didn't zoom yet)\r\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\r\n\r\n    if (!scaleMultiplier) {\r\n      return;\r\n    }\r\n\r\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\r\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\r\n\r\n    if (!this.sizeChanged(width, height) && !force) {\r\n      return;\r\n    }\r\n    this.content.setDisplayedSize(width, height);\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  sizeChanged(width, height) {\r\n    if (width !== this.prevDisplayedWidth\r\n        || height !== this.prevDisplayedHeight) {\r\n      this.prevDisplayedWidth = width;\r\n      this.prevDisplayedHeight = height;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /** @returns {HTMLImageElement | HTMLDivElement | null | undefined} */\r\n  getPlaceholderElement() {\r\n    return this.content.placeholder?.element;\r\n  }\r\n\r\n  /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param {number} destZoomLevel Destination zoom level.\r\n   * @param {Point} [centerPoint]\r\n   * Transform origin center point, or false if viewport center should be used.\r\n   * @param {number | false} [transitionDuration] Transition duration, may be set to 0.\r\n   * @param {boolean} [ignoreBounds] Minimum and maximum zoom levels will be ignored.\r\n   */\r\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\r\n    const { pswp } = this;\r\n    if (!this.isZoomable()\r\n        || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    pswp.dispatch('beforeZoomTo', {\r\n      destZoomLevel, centerPoint, transitionDuration\r\n    });\r\n\r\n    // stop all pan and zoom transitions\r\n    pswp.animations.stopAllPan();\r\n\r\n    // if (!centerPoint) {\r\n    //   centerPoint = pswp.getViewportCenterPoint();\r\n    // }\r\n\r\n    const prevZoomLevel = this.currZoomLevel;\r\n\r\n    if (!ignoreBounds) {\r\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\r\n    }\r\n\r\n    // if (transitionDuration === undefined) {\r\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\r\n    // }\r\n\r\n    this.setZoomLevel(destZoomLevel);\r\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\r\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\r\n    roundPoint(this.pan);\r\n\r\n    const finishTransition = () => {\r\n      this._setResolution(destZoomLevel);\r\n      this.applyCurrentZoomPan();\r\n    };\r\n\r\n    if (!transitionDuration) {\r\n      finishTransition();\r\n    } else {\r\n      pswp.animations.startTransition({\r\n        isPan: true,\r\n        name: 'zoomTo',\r\n        target: this.container,\r\n        transform: this.getCurrentTransform(),\r\n        onComplete: finishTransition,\r\n        duration: transitionDuration,\r\n        easing: pswp.options.easing\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} [centerPoint]\r\n   */\r\n  toggleZoom(centerPoint) {\r\n    this.zoomTo(\r\n      this.currZoomLevel === this.zoomLevels.initial\r\n        ? this.zoomLevels.secondary : this.zoomLevels.initial,\r\n      centerPoint,\r\n      this.pswp.options.zoomAnimationDuration\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  setZoomLevel(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n    this.bounds.update(this.currZoomLevel);\r\n  }\r\n\r\n  /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {'x' | 'y'} axis\r\n   * @param {Point} [point]\r\n   * point based on which zoom is performed, usually refers to the current mouse position,\r\n   * if false - viewport center will be used.\r\n   * @param {number} [prevZoomLevel] Zoom level before new zoom was applied.\r\n   * @returns {number}\r\n   */\r\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\r\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\r\n    if (totalPanDistance === 0) {\r\n      return this.bounds.center[axis];\r\n    }\r\n\r\n    if (!point) {\r\n      point = this.pswp.getViewportCenterPoint();\r\n    }\r\n\r\n    if (!prevZoomLevel) {\r\n      prevZoomLevel = this.zoomLevels.initial;\r\n    }\r\n\r\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\r\n    return this.bounds.correctPan(\r\n      axis,\r\n      (this.pan[axis] - point[axis]) * zoomFactor + point[axis]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {number} panX\r\n   * @param {number} panY\r\n   */\r\n  panTo(panX, panY) {\r\n    this.pan.x = this.bounds.correctPan('x', panX);\r\n    this.pan.y = this.bounds.correctPan('y', panY);\r\n    this.applyCurrentZoomPan();\r\n  }\r\n\r\n  /**\r\n   * If the slide in the current state can be panned by the user\r\n   * @returns {boolean}\r\n   */\r\n  isPannable() {\r\n    return Boolean(this.width) && (this.currZoomLevel > this.zoomLevels.fit);\r\n  }\r\n\r\n  /**\r\n   * If the slide can be zoomed\r\n   * @returns {boolean}\r\n   */\r\n  isZoomable() {\r\n    return Boolean(this.width) && this.content.isZoomable();\r\n  }\r\n\r\n  /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */\r\n  applyCurrentZoomPan() {\r\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\r\n    if (this === this.pswp.currSlide) {\r\n      this.pswp.dispatch('zoomPanUpdate', { slide: this });\r\n    }\r\n  }\r\n\r\n  zoomAndPanToInitial() {\r\n    this.currZoomLevel = this.zoomLevels.initial;\r\n\r\n    // pan according to the zoom level\r\n    this.bounds.update(this.currZoomLevel);\r\n    equalizePoints(this.pan, this.bounds.center);\r\n    this.pswp.dispatch('initialZoomPan', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} zoom\r\n   * @private\r\n   */\r\n  _applyZoomTransform(x, y, zoom) {\r\n    zoom /= this.currentResolution || this.zoomLevels.initial;\r\n    setTransform(this.container, x, y, zoom);\r\n  }\r\n\r\n  calculateSize() {\r\n    const { pswp } = this;\r\n\r\n    equalizePoints(\r\n      this.panAreaSize,\r\n      getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index)\r\n    );\r\n\r\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\r\n\r\n    pswp.dispatch('calcSlideSize', {\r\n      slide: this\r\n    });\r\n  }\r\n\r\n  /** @returns {string} */\r\n  getCurrentTransform() {\r\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\r\n    return toTransformString(this.pan.x, this.pan.y, scale);\r\n  }\r\n\r\n  /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in the highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {number} newResolution\r\n   */\r\n  _setResolution(newResolution) {\r\n    if (newResolution === this.currentResolution) {\r\n      return;\r\n    }\r\n\r\n    this.currentResolution = newResolution;\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('resolutionChanged');\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst PAN_END_FRICTION = 0.35;\r\nconst VERTICAL_DRAG_FRICTION = 0.6;\r\n\r\n// 1 corresponds to the third of viewport height\r\nconst MIN_RATIO_TO_CLOSE = 0.4;\r\n\r\n// Minimum speed required to navigate\r\n// to next or previous slide\r\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\r\n\r\n/**\r\n * @param {number} initialVelocity\r\n * @param {number} decelerationRate\r\n * @returns {number}\r\n */\r\nfunction project(initialVelocity, decelerationRate) {\r\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\r\n}\r\n\r\n/**\r\n * Handles single pointer dragging\r\n */\r\nclass DragHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = gestures.pswp;\r\n    /** @type {Point} */\r\n    this.startPan = { x: 0, y: 0 };\r\n  }\r\n\r\n  start() {\r\n    if (this.pswp.currSlide) {\r\n      equalizePoints(this.startPan, this.pswp.currSlide.pan);\r\n    }\r\n    this.pswp.animations.stopAll();\r\n  }\r\n\r\n  change() {\r\n    const { p1, prevP1, dragAxis } = this.gestures;\r\n    const { currSlide } = this.pswp;\r\n\r\n    if (dragAxis === 'y'\r\n        && this.pswp.options.closeOnVerticalDrag\r\n        && (currSlide && currSlide.currZoomLevel <= currSlide.zoomLevels.fit)\r\n        && !this.gestures.isMultitouch) {\r\n      // Handle vertical drag to close\r\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\r\n      if (!this.pswp.dispatch('verticalDrag', { panY }).defaultPrevented) {\r\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\r\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\r\n        this.pswp.applyBgOpacity(bgOpacity);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\r\n      if (!mainScrollChanged) {\r\n        this._panOrMoveMainScroll('y');\r\n\r\n        if (currSlide) {\r\n          roundPoint(currSlide.pan);\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  end() {\r\n    const { velocity } = this.gestures;\r\n    const { mainScroll, currSlide } = this.pswp;\r\n    let indexDiff = 0;\r\n\r\n    this.pswp.animations.stopAll();\r\n\r\n    // Handle main scroll if it's shifted\r\n    if (mainScroll.isShifted()) {\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX();\r\n\r\n      // Ratio between 0 and 1:\r\n      // 0 - slide is not visible at all,\r\n      // 0.5 - half of the slide is visible\r\n      // 1 - slide is fully visible\r\n      const currentSlideVisibilityRatio = (mainScrollShiftDiff / this.pswp.viewportSize.x);\r\n\r\n      // Go next slide.\r\n      //\r\n      // - if velocity and its direction is matched,\r\n      //   and we see at least tiny part of the next slide\r\n      //\r\n      // - or if we see less than 50% of the current slide\r\n      //   and velocity is close to 0\r\n      //\r\n      if ((velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0)\r\n          || (velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5)) {\r\n        // Go to next slide\r\n        indexDiff = 1;\r\n        velocity.x = Math.min(velocity.x, 0);\r\n      } else if ((velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0)\r\n          || (velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5)) {\r\n        // Go to prev slide\r\n        indexDiff = -1;\r\n        velocity.x = Math.max(velocity.x, 0);\r\n      }\r\n\r\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\r\n    }\r\n\r\n    // Restore zoom level\r\n    if ((currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.max)\r\n        || this.gestures.isMultitouch) {\r\n      this.gestures.zoomLevels.correctZoomPan(true);\r\n    } else {\r\n      // we run two animations instead of one,\r\n      // as each axis has own pan boundaries and thus different spring function\r\n      // (correctZoomPan does not have this functionality,\r\n      //  it animates all properties with single timing function)\r\n      this._finishPanGestureForAxis('x');\r\n      this._finishPanGestureForAxis('y');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _finishPanGestureForAxis(axis) {\r\n    const { velocity } = this.gestures;\r\n    const { currSlide } = this.pswp;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    const { pan, bounds } = currSlide;\r\n    const panPos = pan[axis];\r\n    const restoreBgOpacity = (this.pswp.bgOpacity < 1 && axis === 'y');\r\n\r\n    // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\r\n    // Increasing this number will reduce travel distance\r\n    const decelerationRate = 0.995; // 0.99\r\n\r\n    // Pan position if there is no bounds\r\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\r\n\r\n    if (restoreBgOpacity) {\r\n      const vDragRatio = this._getVerticalDragRatio(panPos);\r\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition);\r\n\r\n      // If we are above and moving upwards,\r\n      // or if we are below and moving downwards\r\n      if ((vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE)\r\n          || (vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE)) {\r\n        this.pswp.close();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Pan position with corrected bounds\r\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition);\r\n\r\n    // Exit if pan position should not be changed\r\n    // or if speed it too low\r\n    if (panPos === correctedPanPosition) {\r\n      return;\r\n    }\r\n\r\n    // Overshoot if the final position is out of pan bounds\r\n    const dampingRatio = (correctedPanPosition === projectedPosition) ? 1 : 0.82;\r\n\r\n    const initialBgOpacity = this.pswp.bgOpacity;\r\n    const totalPanDist = correctedPanPosition - panPos;\r\n\r\n    this.pswp.animations.startSpring({\r\n      name: 'panGesture' + axis,\r\n      isPan: true,\r\n      start: panPos,\r\n      end: correctedPanPosition,\r\n      velocity: velocity[axis],\r\n      dampingRatio,\r\n      onUpdate: (pos) => {\r\n        // Animate opacity of background relative to Y pan position of an image\r\n        if (restoreBgOpacity && this.pswp.bgOpacity < 1) {\r\n          // 0 - start of animation, 1 - end of animation\r\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist;\r\n\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          this.pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio,\r\n            0,\r\n            1\r\n          ));\r\n        }\r\n\r\n        pan[axis] = Math.floor(pos);\r\n        currSlide.applyCurrentZoomPan();\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @returns {boolean}\r\n   */\r\n  _panOrMoveMainScroll(axis) {\r\n    const { p1, dragAxis, prevP1, isMultitouch } = this.gestures;\r\n    const { currSlide, mainScroll } = this.pswp;\r\n    const delta = (p1[axis] - prevP1[axis]);\r\n    const newMainScrollX = mainScroll.x + delta;\r\n\r\n    if (!delta || !currSlide) {\r\n      return false;\r\n    }\r\n\r\n    // Always move main scroll if image can not be panned\r\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\r\n      mainScroll.moveTo(newMainScrollX, true);\r\n      return true; // changed main scroll\r\n    }\r\n\r\n    const { bounds } = currSlide;\r\n    const newPan = currSlide.pan[axis] + delta;\r\n\r\n    if (this.pswp.options.allowPanToNext\r\n        && dragAxis === 'x'\r\n        && axis === 'x'\r\n        && !isMultitouch) {\r\n      const currSlideMainScrollX = mainScroll.getCurrSlideX();\r\n\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\r\n\r\n      const isLeftToRight = delta > 0;\r\n      const isRightToLeft = !isLeftToRight;\r\n\r\n      if (newPan > bounds.min[axis] && isLeftToRight) {\r\n        // Panning from left to right, beyond the left edge\r\n\r\n        // Wether the image was at minimum pan position (or less)\r\n        // when this drag gesture started.\r\n        // Minimum pan position refers to the left edge of the image.\r\n        const wasAtMinPanPosition = (bounds.min[axis] <= this.startPan[axis]);\r\n\r\n        if (wasAtMinPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\r\n        // Paning from right to left, beyond the right edge\r\n\r\n        // Maximum pan position refers to the right edge of the image.\r\n        const wasAtMaxPanPosition = (this.startPan[axis] <= bounds.max[axis]);\r\n\r\n        if (wasAtMaxPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else {\r\n        // If main scroll is shifted\r\n        if (mainScrollShiftDiff !== 0) {\r\n          // If main scroll is shifted right\r\n          if (mainScrollShiftDiff > 0 /*&& isRightToLeft*/) {\r\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          } else if (mainScrollShiftDiff < 0 /*&& isLeftToRight*/) {\r\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\r\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          }\r\n        } else {\r\n          // We are within pan bounds, so just pan\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      }\r\n    } else {\r\n      if (axis === 'y') {\r\n        // Do not pan vertically if main scroll is shifted o\r\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      } else {\r\n        this._setPanWithFriction(axis, newPan);\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  // If we move above - the ratio is negative\r\n  // If we move below the ratio is positive\r\n\r\n  /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @private\r\n   * @param {number} panY The current pan Y position.\r\n   * @returns {number}\r\n   */\r\n  _getVerticalDragRatio(panY) {\r\n    return (panY - (this.pswp.currSlide?.bounds.center.y ?? 0)) / (this.pswp.viewportSize.y / 3);\r\n  }\r\n\r\n  /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} potentialPan\r\n   * @param {number} [customFriction] (0.1 - 1)\r\n   */\r\n  _setPanWithFriction(axis, potentialPan, customFriction) {\r\n    const { currSlide } = this.pswp;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    const { pan, bounds } = currSlide;\r\n    const correctedPan = bounds.correctPan(axis, potentialPan);\r\n    // If we are out of pan bounds\r\n    if (correctedPan !== potentialPan || customFriction) {\r\n      const delta = Math.round(potentialPan - pan[axis]);\r\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\r\n    } else {\r\n      pan[axis] = potentialPan;\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst UPPER_ZOOM_FRICTION = 0.05;\r\nconst LOWER_ZOOM_FRICTION = 0.15;\r\n\r\n\r\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\r\nfunction getZoomPointsCenter(p, p1, p2) {\r\n  p.x = (p1.x + p2.x) / 2;\r\n  p.y = (p1.y + p2.y) / 2;\r\n  return p;\r\n}\r\n\r\nclass ZoomHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\r\n    this._startPan = { x: 0, y: 0 };\r\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\r\n    this._startZoomPoint = { x: 0, y: 0 };\r\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\r\n    this._zoomPoint = { x: 0, y: 0 };\r\n    /** @private */\r\n    this._wasOverFitZoomLevel = false;\r\n    /** @private */\r\n    this._startZoomLevel = 1;\r\n  }\r\n\r\n  start() {\r\n    const { currSlide } = this.gestures.pswp;\r\n    if (currSlide) {\r\n      this._startZoomLevel = currSlide.currZoomLevel;\r\n      equalizePoints(this._startPan, currSlide.pan);\r\n    }\r\n\r\n    this.gestures.pswp.animations.stopAllPan();\r\n    this._wasOverFitZoomLevel = false;\r\n  }\r\n\r\n  change() {\r\n    const { p1, startP1, p2, startP2, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    const minZoomLevel = currSlide.zoomLevels.min;\r\n    const maxZoomLevel = currSlide.zoomLevels.max;\r\n\r\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\r\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\r\n\r\n    let currZoomLevel = (1 / getDistanceBetween(startP1, startP2))\r\n                      * getDistanceBetween(p1, p2)\r\n                      * this._startZoomLevel;\r\n\r\n    // slightly over the zoom.fit\r\n    if (currZoomLevel > currSlide.zoomLevels.initial + (currSlide.zoomLevels.initial / 15)) {\r\n      this._wasOverFitZoomLevel = true;\r\n    }\r\n\r\n    if (currZoomLevel < minZoomLevel) {\r\n      if (pswp.options.pinchToClose\r\n          && !this._wasOverFitZoomLevel\r\n          && this._startZoomLevel <= currSlide.zoomLevels.initial) {\r\n        // fade out background if zooming out\r\n        const bgOpacity = 1 - ((minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2));\r\n        if (!pswp.dispatch('pinchClose', { bgOpacity }).defaultPrevented) {\r\n          pswp.applyBgOpacity(bgOpacity);\r\n        }\r\n      } else {\r\n        // Apply the friction if zoom level is below the min\r\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\r\n      }\r\n    } else if (currZoomLevel > maxZoomLevel) {\r\n      // Apply the friction if zoom level is above the max\r\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\r\n    }\r\n\r\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\r\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\r\n\r\n    currSlide.setZoomLevel(currZoomLevel);\r\n    currSlide.applyCurrentZoomPan();\r\n  }\r\n\r\n  end() {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    if ((!currSlide || currSlide.currZoomLevel < currSlide.zoomLevels.initial)\r\n        && !this._wasOverFitZoomLevel\r\n        && pswp.options.pinchToClose) {\r\n      pswp.close();\r\n    } else {\r\n      this.correctZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} currZoomLevel\r\n   * @returns {number}\r\n   */\r\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\r\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\r\n    return this._zoomPoint[axis]\r\n            - ((this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor);\r\n  }\r\n\r\n  /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {boolean} [ignoreGesture]\r\n   * Wether gesture coordinates should be ignored when calculating destination pan position.\r\n   */\r\n  correctZoomPan(ignoreGesture) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide?.isZoomable()) {\r\n      return;\r\n    }\r\n\r\n    if (this._zoomPoint.x === 0) {\r\n      ignoreGesture = true;\r\n    }\r\n\r\n    const prevZoomLevel = currSlide.currZoomLevel;\r\n\r\n    /** @type {number} */\r\n    let destinationZoomLevel;\r\n    let currZoomLevelNeedsChange = true;\r\n\r\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\r\n      destinationZoomLevel = currSlide.zoomLevels.initial;\r\n      // zoom to min\r\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\r\n      destinationZoomLevel = currSlide.zoomLevels.max;\r\n      // zoom to max\r\n    } else {\r\n      currZoomLevelNeedsChange = false;\r\n      destinationZoomLevel = prevZoomLevel;\r\n    }\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const restoreBgOpacity = pswp.bgOpacity < 1;\r\n\r\n    const initialPan = equalizePoints({ x: 0, y: 0 }, currSlide.pan);\r\n    let destinationPan = equalizePoints({ x: 0, y: 0 }, initialPan);\r\n\r\n    if (ignoreGesture) {\r\n      this._zoomPoint.x = 0;\r\n      this._zoomPoint.y = 0;\r\n      this._startZoomPoint.x = 0;\r\n      this._startZoomPoint.y = 0;\r\n      this._startZoomLevel = prevZoomLevel;\r\n      equalizePoints(this._startPan, initialPan);\r\n    }\r\n\r\n    if (currZoomLevelNeedsChange) {\r\n      destinationPan = {\r\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\r\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\r\n      };\r\n    }\r\n\r\n    // set zoom level, so pan bounds are updated according to it\r\n    currSlide.setZoomLevel(destinationZoomLevel);\r\n\r\n    destinationPan = {\r\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\r\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\r\n    };\r\n\r\n    // return zoom level and its bounds to initial\r\n    currSlide.setZoomLevel(prevZoomLevel);\r\n\r\n    const panNeedsChange = !pointsEqual(destinationPan, initialPan);\r\n\r\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\r\n      // update resolution after gesture\r\n      currSlide._setResolution(destinationZoomLevel);\r\n      currSlide.applyCurrentZoomPan();\r\n\r\n      // nothing to animate\r\n      return;\r\n    }\r\n\r\n    pswp.animations.stopAllPan();\r\n\r\n    pswp.animations.startSpring({\r\n      isPan: true,\r\n      start: 0,\r\n      end: 1000,\r\n      velocity: 0,\r\n      dampingRatio: 1,\r\n      naturalFrequency: 40,\r\n      onUpdate: (now) => {\r\n        now /= 1000; // 0 - start, 1 - end\r\n\r\n        if (panNeedsChange || currZoomLevelNeedsChange) {\r\n          if (panNeedsChange) {\r\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\r\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\r\n          }\r\n\r\n          if (currZoomLevelNeedsChange) {\r\n            const newZoomLevel = prevZoomLevel\r\n                        + (destinationZoomLevel - prevZoomLevel) * now;\r\n            currSlide.setZoomLevel(newZoomLevel);\r\n          }\r\n\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n\r\n        // Restore background opacity\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1\r\n          ));\r\n        }\r\n      },\r\n      onComplete: () => {\r\n        // update resolution after transition ends\r\n        currSlide._setResolution(destinationZoomLevel);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    });\r\n  }\r\n}\n\n/**\r\n * @template {string} T\r\n * @template {string} P\r\n * @typedef {import('../types.js').AddPostfix<T, P>} AddPostfix<T, P>\r\n */\r\n\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/** @typedef {'imageClick' | 'bgClick' | 'tap' | 'doubleTap'} Actions */\r\n\r\n/**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {PointerEvent} event\r\n * @returns {boolean}\r\n */\r\nfunction didTapOnMainContent(event) {\r\n  return !!(/** @type {HTMLElement} */ (event.target).closest('.pswp__container'));\r\n}\r\n\r\n/**\r\n * Tap, double-tap handler.\r\n */\r\nclass TapHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  click(point, originalEvent) {\r\n    const targetClassList = /** @type {HTMLElement} */ (originalEvent.target).classList;\r\n    const isImageClick = targetClassList.contains('pswp__img');\r\n    const isBackgroundClick = targetClassList.contains('pswp__item')\r\n                              || targetClassList.contains('pswp__zoom-wrap');\r\n\r\n    if (isImageClick) {\r\n      this._doClickOrTapAction('imageClick', point, originalEvent);\r\n    } else if (isBackgroundClick) {\r\n      this._doClickOrTapAction('bgClick', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  tap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('tap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  doubleTap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Actions} actionName\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  _doClickOrTapAction(actionName, point, originalEvent) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const actionFullName = /** @type {AddPostfix<Actions, 'Action'>} */ (actionName + 'Action');\r\n    const optionValue = pswp.options[actionFullName];\r\n\r\n    if (pswp.dispatch(actionFullName, { point, originalEvent }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      optionValue.call(pswp, point, originalEvent);\r\n      return;\r\n    }\r\n\r\n    switch (optionValue) {\r\n      case 'close':\r\n      case 'next':\r\n        pswp[optionValue]();\r\n        break;\r\n      case 'zoom':\r\n        currSlide?.toggleZoom(point);\r\n        break;\r\n      case 'zoom-or-close':\r\n        // by default click zooms current image,\r\n        // if it can not be zoomed - gallery will be closed\r\n        if (currSlide?.isZoomable()\r\n            && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\r\n          currSlide.toggleZoom(point);\r\n        } else if (pswp.options.clickToCloseNonZoomable) {\r\n          pswp.close();\r\n        }\r\n        break;\r\n      case 'toggle-controls':\r\n        this.gestures.pswp.element?.classList.toggle('pswp--ui-visible');\r\n        // if (_controlsVisible) {\r\n        //   _ui.hideControls();\r\n        // } else {\r\n        //   _ui.showControls();\r\n        // }\r\n        break;\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n// How far should user should drag\r\n// until we can determine that the gesture is swipe and its direction\r\nconst AXIS_SWIPE_HYSTERISIS = 10;\r\n//const PAN_END_FRICTION = 0.35;\r\n\r\nconst DOUBLE_TAP_DELAY = 300; // ms\r\nconst MIN_TAP_DISTANCE = 25; // px\r\n\r\n/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */\r\nclass Gestures {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {'x' | 'y' | null} */\r\n    this.dragAxis = null;\r\n\r\n    // point objects are defined once and reused\r\n    // PhotoSwipe keeps track only of two pointers, others are ignored\r\n    /** @type {Point} */\r\n    this.p1 = { x: 0, y: 0 }; // the first pressed pointer\r\n    /** @type {Point} */\r\n    this.p2 = { x: 0, y: 0 }; // the second pressed pointer\r\n    /** @type {Point} */\r\n    this.prevP1 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.prevP2 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.startP1 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.startP2 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.velocity = { x: 0, y: 0 };\r\n\r\n    /** @type {Point}\r\n     * @private\r\n     */\r\n    this._lastStartP1 = { x: 0, y: 0 };\r\n    /** @type {Point}\r\n     * @private\r\n     */\r\n    this._intervalP1 = { x: 0, y: 0 };\r\n    /** @private */\r\n    this._numActivePoints = 0;\r\n    /** @type {Point[]}\r\n     * @private\r\n     */\r\n    this._ongoingPointers = [];\r\n    /** @private */\r\n    this._touchEventEnabled = 'ontouchstart' in window;\r\n    /** @private */\r\n    this._pointerEventEnabled = !!(window.PointerEvent);\r\n    this.supportsTouch = this._touchEventEnabled\r\n                          || (this._pointerEventEnabled && navigator.maxTouchPoints > 1);\r\n    /** @private */\r\n    this._numActivePoints = 0;\r\n    /** @private */\r\n    this._intervalTime = 0;\r\n    /** @private */\r\n    this._velocityCalculated = false;\r\n    this.isMultitouch = false;\r\n    this.isDragging = false;\r\n    this.isZooming = false;\r\n    /** @type {number | null} */\r\n    this.raf = null;\r\n    /** @type {NodeJS.Timeout | null}\r\n     * @private\r\n     */\r\n    this._tapTimer = null;\r\n\r\n    if (!this.supportsTouch) {\r\n      // disable pan to next slide for non-touch devices\r\n      pswp.options.allowPanToNext = false;\r\n    }\r\n\r\n    this.drag = new DragHandler(this);\r\n    this.zoomLevels = new ZoomHandler(this);\r\n    this.tapHandler = new TapHandler(this);\r\n\r\n    pswp.on('bindEvents', () => {\r\n      pswp.events.add(\r\n        pswp.scrollWrap,\r\n        'click',\r\n        /** @type EventListener */(this._onClick.bind(this))\r\n      );\r\n\r\n      if (this._pointerEventEnabled) {\r\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\r\n      } else if (this._touchEventEnabled) {\r\n        this._bindEvents('touch', 'start', 'end', 'cancel');\r\n\r\n        // In previous versions we also bound mouse event here,\r\n        // in case device supports both touch and mouse events,\r\n        // but newer versions of browsers now support PointerEvent.\r\n\r\n        // on iOS10 if you bind touchmove/end after touchstart,\r\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\r\n        // preventDefault will have no effect on touchmove and touchend.\r\n        // Unless you bind it previously.\r\n        if (pswp.scrollWrap) {\r\n          pswp.scrollWrap.ontouchmove = () => {};\r\n          pswp.scrollWrap.ontouchend = () => {};\r\n        }\r\n      } else {\r\n        this._bindEvents('mouse', 'down', 'up');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'mouse' | 'touch' | 'pointer'} pref\r\n   * @param {'down' | 'start'} down\r\n   * @param {'up' | 'end'} up\r\n   * @param {'cancel'} [cancel]\r\n   */\r\n  _bindEvents(pref, down, up, cancel) {\r\n    const { pswp } = this;\r\n    const { events } = pswp;\r\n\r\n    const cancelEvent = cancel ? pref + cancel : '';\r\n\r\n    events.add(\r\n      pswp.scrollWrap,\r\n      pref + down,\r\n      /** @type EventListener */(this.onPointerDown.bind(this))\r\n    );\r\n    events.add(window, pref + 'move', /** @type EventListener */(this.onPointerMove.bind(this)));\r\n    events.add(window, pref + up, /** @type EventListener */(this.onPointerUp.bind(this)));\r\n    if (cancelEvent) {\r\n      events.add(\r\n        pswp.scrollWrap,\r\n        cancelEvent,\r\n        /** @type EventListener */(this.onPointerUp.bind(this))\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerDown(e) {\r\n    // We do not call preventDefault for touch events\r\n    // to allow browser to show native dialog on longpress\r\n    // (the one that allows to save image or open it in new tab).\r\n    //\r\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\r\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\r\n    const isMousePointer = e.type === 'mousedown' || e.pointerType === 'mouse';\r\n\r\n    // Allow dragging only via left mouse button.\r\n    // http://www.quirksmode.org/js/events_properties.html\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\r\n    if (isMousePointer && e.button > 0) {\r\n      return;\r\n    }\r\n\r\n    const { pswp } = this;\r\n\r\n    // if PhotoSwipe is opening or closing\r\n    if (!pswp.opener.isOpen) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n\r\n    if (pswp.dispatch('pointerDown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (isMousePointer) {\r\n      pswp.mouseDetected();\r\n\r\n      // preventDefault mouse event to prevent\r\n      // browser image drag feature\r\n      this._preventPointerEventBehaviour(e);\r\n    }\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    this._updatePoints(e, 'down');\r\n\r\n    if (this._numActivePoints === 1) {\r\n      this.dragAxis = null;\r\n      // we need to store initial point to determine the main axis,\r\n      // drag is activated only after the axis is determined\r\n      equalizePoints(this.startP1, this.p1);\r\n    }\r\n\r\n    if (this._numActivePoints > 1) {\r\n      // Tap or double tap should not trigger if more than one pointer\r\n      this._clearTapTimer();\r\n      this.isMultitouch = true;\r\n    } else {\r\n      this.isMultitouch = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerMove(e) {\r\n    e.preventDefault(); // always preventDefault move event\r\n\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'move');\r\n\r\n    if (this.pswp.dispatch('pointerMove', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 1 && !this.isDragging) {\r\n      if (!this.dragAxis) {\r\n        this._calculateDragDirection();\r\n      }\r\n\r\n      // Drag axis was detected, emit drag.start\r\n      if (this.dragAxis && !this.isDragging) {\r\n        if (this.isZooming) {\r\n          this.isZooming = false;\r\n          this.zoomLevels.end();\r\n        }\r\n\r\n        this.isDragging = true;\r\n        this._clearTapTimer(); // Tap can not trigger after drag\r\n\r\n        // Adjust starting point\r\n        this._updateStartPoints();\r\n        this._intervalTime = Date.now();\r\n        //this._startTime = this._intervalTime;\r\n        this._velocityCalculated = false;\r\n        equalizePoints(this._intervalP1, this.p1);\r\n        this.velocity.x = 0;\r\n        this.velocity.y = 0;\r\n        this.drag.start();\r\n\r\n        this._rafStopLoop();\r\n        this._rafRenderLoop();\r\n      }\r\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\r\n      this._finishDrag();\r\n\r\n      this.isZooming = true;\r\n\r\n      // Adjust starting points\r\n      this._updateStartPoints();\r\n\r\n      this.zoomLevels.start();\r\n\r\n      this._rafStopLoop();\r\n      this._rafRenderLoop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finishDrag() {\r\n    if (this.isDragging) {\r\n      this.isDragging = false;\r\n\r\n      // Try to calculate velocity,\r\n      // if it wasn't calculated yet in drag.change\r\n      if (!this._velocityCalculated) {\r\n        this._updateVelocity(true);\r\n      }\r\n\r\n      this.drag.end();\r\n      this.dragAxis = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerUp(e) {\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'up');\r\n\r\n    if (this.pswp.dispatch('pointerUp', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 0) {\r\n      this._rafStopLoop();\r\n\r\n      if (this.isDragging) {\r\n        this._finishDrag();\r\n      } else if (!this.isZooming && !this.isMultitouch) {\r\n        //this.zoomLevels.correctZoomPan();\r\n        this._finishTap(e);\r\n      }\r\n    }\r\n\r\n    if (this._numActivePoints < 2 && this.isZooming) {\r\n      this.isZooming = false;\r\n      this.zoomLevels.end();\r\n\r\n      if (this._numActivePoints === 1) {\r\n        // Since we have 1 point left, we need to reinitiate drag\r\n        this.dragAxis = null;\r\n        this._updateStartPoints();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafRenderLoop() {\r\n    if (this.isDragging || this.isZooming) {\r\n      this._updateVelocity();\r\n\r\n      if (this.isDragging) {\r\n        // make sure that pointer moved since the last update\r\n        if (!pointsEqual(this.p1, this.prevP1)) {\r\n          this.drag.change();\r\n        }\r\n      } else /* if (this.isZooming) */ {\r\n        if (!pointsEqual(this.p1, this.prevP1)\r\n            || !pointsEqual(this.p2, this.prevP2)) {\r\n          this.zoomLevels.change();\r\n        }\r\n      }\r\n\r\n      this._updatePrevPoints();\r\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update velocity at 50ms interval\r\n   *\r\n   * @private\r\n   * @param {boolean} [force]\r\n   */\r\n  _updateVelocity(force) {\r\n    const time = Date.now();\r\n    const duration = time - this._intervalTime;\r\n\r\n    if (duration < 50 && !force) {\r\n      return;\r\n    }\r\n\r\n\r\n    this.velocity.x = this._getVelocity('x', duration);\r\n    this.velocity.y = this._getVelocity('y', duration);\r\n\r\n    this._intervalTime = time;\r\n    equalizePoints(this._intervalP1, this.p1);\r\n    this._velocityCalculated = true;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _finishTap(e) {\r\n    const { mainScroll } = this.pswp;\r\n\r\n    // Do not trigger tap events if main scroll is shifted\r\n    if (mainScroll.isShifted()) {\r\n      // restore main scroll position\r\n      // (usually happens if stopped in the middle of animation)\r\n      mainScroll.moveIndexBy(0, true);\r\n      return;\r\n    }\r\n\r\n    // Do not trigger tap for touchcancel or pointercancel\r\n    if (e.type.indexOf('cancel') > 0) {\r\n      return;\r\n    }\r\n\r\n    // Trigger click instead of tap for mouse events\r\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\r\n      this.tapHandler.click(this.startP1, e);\r\n      return;\r\n    }\r\n\r\n    // Disable delay if there is no doubleTapAction\r\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0;\r\n\r\n    // If tapTimer is defined - we tapped recently,\r\n    // check if the current tap is close to the previous one,\r\n    // if yes - trigger double tap\r\n    if (this._tapTimer) {\r\n      this._clearTapTimer();\r\n      // Check if two taps were more or less on the same place\r\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\r\n        this.tapHandler.doubleTap(this.startP1, e);\r\n      }\r\n    } else {\r\n      equalizePoints(this._lastStartP1, this.startP1);\r\n      this._tapTimer = setTimeout(() => {\r\n        this.tapHandler.tap(this.startP1, e);\r\n        this._clearTapTimer();\r\n      }, tapDelay);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _clearTapTimer() {\r\n    if (this._tapTimer) {\r\n      clearTimeout(this._tapTimer);\r\n      this._tapTimer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get velocity for axis\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} duration\r\n   * @returns {number}\r\n   */\r\n  _getVelocity(axis, duration) {\r\n    // displacement is like distance, but can be negative.\r\n    const displacement = this.p1[axis] - this._intervalP1[axis];\r\n\r\n    if (Math.abs(displacement) > 1 && duration > 5) {\r\n      return displacement / duration;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafStopLoop() {\r\n    if (this.raf) {\r\n      cancelAnimationFrame(this.raf);\r\n      this.raf = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _preventPointerEventBehaviour(e) {\r\n    // TODO find a way to disable e.preventDefault on some elements\r\n    //      via event or some class or something\r\n    e.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @private\r\n   * @param {PointerEvent | TouchEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\r\n  _updatePoints(e, pointerType) {\r\n    if (this._pointerEventEnabled) {\r\n      const pointerEvent = /** @type {PointerEvent} */ (e);\r\n      // Try to find the current pointer in ongoing pointers by its ID\r\n      const pointerIndex = this._ongoingPointers.findIndex((ongoingPointer) => {\r\n        return ongoingPointer.id === pointerEvent.pointerId;\r\n      });\r\n\r\n      if (pointerType === 'up' && pointerIndex > -1) {\r\n        // release the pointer - remove it from ongoing\r\n        this._ongoingPointers.splice(pointerIndex, 1);\r\n      } else if (pointerType === 'down' && pointerIndex === -1) {\r\n        // add new pointer\r\n        this._ongoingPointers.push(this._convertEventPosToPoint(pointerEvent, { x: 0, y: 0 }));\r\n      } else if (pointerIndex > -1) {\r\n        // update existing pointer\r\n        this._convertEventPosToPoint(pointerEvent, this._ongoingPointers[pointerIndex]);\r\n      }\r\n\r\n      this._numActivePoints = this._ongoingPointers.length;\r\n\r\n      // update points that PhotoSwipe uses\r\n      // to calculate position and scale\r\n      if (this._numActivePoints > 0) {\r\n        equalizePoints(this.p1, this._ongoingPointers[0]);\r\n      }\r\n\r\n      if (this._numActivePoints > 1) {\r\n        equalizePoints(this.p2, this._ongoingPointers[1]);\r\n      }\r\n    } else {\r\n      const touchEvent = /** @type {TouchEvent} */ (e);\r\n\r\n      this._numActivePoints = 0;\r\n      if (touchEvent.type.indexOf('touch') > -1) {\r\n        // Touch Event\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\r\n        if (touchEvent.touches && touchEvent.touches.length > 0) {\r\n          this._convertEventPosToPoint(touchEvent.touches[0], this.p1);\r\n          this._numActivePoints++;\r\n          if (touchEvent.touches.length > 1) {\r\n            this._convertEventPosToPoint(touchEvent.touches[1], this.p2);\r\n            this._numActivePoints++;\r\n          }\r\n        }\r\n      } else {\r\n        // Mouse Event\r\n        this._convertEventPosToPoint(/** @type {PointerEvent} */ (e), this.p1);\r\n        if (pointerType === 'up') {\r\n          // clear all points on mouseup\r\n          this._numActivePoints = 0;\r\n        } else {\r\n          this._numActivePoints++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** update points that were used during previous rAF tick\r\n   * @private\r\n   */\r\n  _updatePrevPoints() {\r\n    equalizePoints(this.prevP1, this.p1);\r\n    equalizePoints(this.prevP2, this.p2);\r\n  }\r\n\r\n  /** update points at the start of gesture\r\n   * @private\r\n   */\r\n  _updateStartPoints() {\r\n    equalizePoints(this.startP1, this.p1);\r\n    equalizePoints(this.startP2, this.p2);\r\n    this._updatePrevPoints();\r\n  }\r\n\r\n  /** @private */\r\n  _calculateDragDirection() {\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      // if main scroll position is shifted – direction is always horizontal\r\n      this.dragAxis = 'x';\r\n    } else {\r\n      // calculate delta of the last touchmove tick\r\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\r\n\r\n      if (diff !== 0) {\r\n        // check if pointer was shifted horizontally or vertically\r\n        const axisToCheck = diff > 0 ? 'x' : 'y';\r\n\r\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\r\n          this.dragAxis = axisToCheck;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @private\r\n   * @param {Touch | PointerEvent} e\r\n   * @param {Point} p\r\n   * @returns {Point}\r\n   */\r\n  _convertEventPosToPoint(e, p) {\r\n    p.x = e.pageX - this.pswp.offset.x;\r\n    p.y = e.pageY - this.pswp.offset.y;\r\n\r\n    if ('pointerId' in e) {\r\n      p.id = e.pointerId;\r\n    } else if (e.identifier !== undefined) {\r\n      p.id = e.identifier;\r\n    }\r\n\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _onClick(e) {\r\n    // Do not allow click event to pass through after drag\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/slide.js').default} Slide */\r\n\r\n/** @typedef {{ el: HTMLDivElement; slide?: Slide }} ItemHolder */\r\n\r\nconst MAIN_SCROLL_END_FRICTION = 0.35;\r\n\r\n\r\n// const MIN_SWIPE_TRANSITION_DURATION = 250;\r\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\r\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\r\n\r\n/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */\r\nclass MainScroll {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.x = 0;\r\n    this.slideWidth = 0;\r\n    /** @private */\r\n    this._currPositionIndex = 0;\r\n    /** @private */\r\n    this._prevPositionIndex = 0;\r\n    /** @private */\r\n    this._containerShiftIndex = -1;\r\n\r\n    /** @type {ItemHolder[]} */\r\n    this.itemHolders = [];\r\n  }\r\n\r\n  /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {boolean} [resizeSlides] Whether slides content should resized\r\n   */\r\n  resize(resizeSlides) {\r\n    const { pswp } = this;\r\n    const newSlideWidth = Math.round(\r\n      pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing\r\n    );\r\n    // Mobile browsers might trigger a resize event during a gesture.\r\n    // (due to toolbar appearing or hiding).\r\n    // Avoid re-adjusting main scroll position if width wasn't changed\r\n    const slideWidthChanged = (newSlideWidth !== this.slideWidth);\r\n\r\n    if (slideWidthChanged) {\r\n      this.slideWidth = newSlideWidth;\r\n      this.moveTo(this.getCurrSlideX());\r\n    }\r\n\r\n    this.itemHolders.forEach((itemHolder, index) => {\r\n      if (slideWidthChanged) {\r\n        setTransform(itemHolder.el, (index + this._containerShiftIndex)\r\n                                    * this.slideWidth);\r\n      }\r\n\r\n      if (resizeSlides && itemHolder.slide) {\r\n        itemHolder.slide.resize();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reset X position of the main scroller to zero\r\n   */\r\n  resetPosition() {\r\n    // Position on the main scroller (offset)\r\n    // it is independent from slide index\r\n    this._currPositionIndex = 0;\r\n    this._prevPositionIndex = 0;\r\n\r\n    // This will force recalculation of size on next resize()\r\n    this.slideWidth = 0;\r\n\r\n    // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\r\n    this._containerShiftIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */\r\n  appendHolders() {\r\n    this.itemHolders = [];\r\n\r\n    // append our three slide holders -\r\n    // previous, current, and next\r\n    for (let i = 0; i < 3; i++) {\r\n      const el = createElement('pswp__item', 'div', this.pswp.container);\r\n      el.setAttribute('role', 'group');\r\n      el.setAttribute('aria-roledescription', 'slide');\r\n      el.setAttribute('aria-hidden', 'true');\r\n\r\n      // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\r\n      el.style.display = (i === 1) ? 'block' : 'none';\r\n\r\n      this.itemHolders.push({\r\n        el,\r\n        //index: -1\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   * @returns {boolean}\r\n   */\r\n  canBeSwiped() {\r\n    return this.pswp.getNumItems() > 1;\r\n  }\r\n\r\n  /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {number} diff\r\n   * @param {boolean} [animate]\r\n   * @param {number} [velocityX]\r\n   * @returns {boolean} whether index was changed or not\r\n   */\r\n  moveIndexBy(diff, animate, velocityX) {\r\n    const { pswp } = this;\r\n    let newIndex = pswp.potentialIndex + diff;\r\n    const numSlides = pswp.getNumItems();\r\n\r\n    if (pswp.canLoop()) {\r\n      newIndex = pswp.getLoopedIndex(newIndex);\r\n      const distance = (diff + numSlides) % numSlides;\r\n      if (distance <= numSlides / 2) {\r\n        // go forward\r\n        diff = distance;\r\n      } else {\r\n        // go backwards\r\n        diff = distance - numSlides;\r\n      }\r\n    } else {\r\n      if (newIndex < 0) {\r\n        newIndex = 0;\r\n      } else if (newIndex >= numSlides) {\r\n        newIndex = numSlides - 1;\r\n      }\r\n      diff = newIndex - pswp.potentialIndex;\r\n    }\r\n\r\n    pswp.potentialIndex = newIndex;\r\n    this._currPositionIndex -= diff;\r\n\r\n    pswp.animations.stopMainScroll();\r\n\r\n    const destinationX = this.getCurrSlideX();\r\n    if (!animate) {\r\n      this.moveTo(destinationX);\r\n      this.updateCurrItem();\r\n    } else {\r\n      pswp.animations.startSpring({\r\n        isMainScroll: true,\r\n        start: this.x,\r\n        end: destinationX,\r\n        velocity: velocityX || 0,\r\n        naturalFrequency: 30,\r\n        dampingRatio: 1, //0.7,\r\n        onUpdate: (x) => {\r\n          this.moveTo(x);\r\n        },\r\n        onComplete: () => {\r\n          this.updateCurrItem();\r\n          pswp.appendHeavy();\r\n        }\r\n      });\r\n\r\n      let currDiff = pswp.potentialIndex - pswp.currIndex;\r\n      if (pswp.canLoop()) {\r\n        const currDistance = (currDiff + numSlides) % numSlides;\r\n        if (currDistance <= numSlides / 2) {\r\n          // go forward\r\n          currDiff = currDistance;\r\n        } else {\r\n          // go backwards\r\n          currDiff = currDistance - numSlides;\r\n        }\r\n      }\r\n\r\n      // Force-append new slides during transition\r\n      // if difference between slides is more than 1\r\n      if (Math.abs(currDiff) > 1) {\r\n        this.updateCurrItem();\r\n      }\r\n    }\r\n\r\n    return Boolean(diff);\r\n  }\r\n\r\n  /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   * @returns {number}\r\n   */\r\n  getCurrSlideX() {\r\n    return this.slideWidth * this._currPositionIndex;\r\n  }\r\n\r\n  /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   * @returns {boolean}\r\n   */\r\n  isShifted() {\r\n    return this.x !== this.getCurrSlideX();\r\n  }\r\n\r\n  /**\r\n   * Update slides X positions and set their content\r\n   */\r\n  updateCurrItem() {\r\n    const { pswp } = this;\r\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\r\n\r\n    if (!positionDifference) {\r\n      return;\r\n    }\r\n\r\n    this._prevPositionIndex = this._currPositionIndex;\r\n\r\n    pswp.currIndex = pswp.potentialIndex;\r\n\r\n    let diffAbs = Math.abs(positionDifference);\r\n    /** @type {ItemHolder | undefined} */\r\n    let tempHolder;\r\n\r\n    if (diffAbs >= 3) {\r\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\r\n      diffAbs = 3;\r\n    }\r\n\r\n    for (let i = 0; i < diffAbs; i++) {\r\n      if (positionDifference > 0) {\r\n        tempHolder = this.itemHolders.shift();\r\n        if (tempHolder) {\r\n          this.itemHolders[2] = tempHolder; // move first to last\r\n\r\n          this._containerShiftIndex++;\r\n\r\n          setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\r\n\r\n          pswp.setContent(tempHolder, (pswp.currIndex - diffAbs) + i + 2);\r\n        }\r\n      } else {\r\n        tempHolder = this.itemHolders.pop();\r\n        if (tempHolder) {\r\n          this.itemHolders.unshift(tempHolder); // move last to first\r\n\r\n          this._containerShiftIndex--;\r\n\r\n          setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\r\n\r\n          pswp.setContent(tempHolder, (pswp.currIndex + diffAbs) - i - 2);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Reset transfrom every 50ish navigations in one direction.\r\n    //\r\n    // Otherwise transform will keep growing indefinitely,\r\n    // which might cause issues as browsers have a maximum transform limit.\r\n    // I wasn't able to reach it, but just to be safe.\r\n    // This should not cause noticable lag.\r\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\r\n      this.resetPosition();\r\n      this.resize();\r\n    }\r\n\r\n    // Pan transition might be running (and consntantly updating pan position)\r\n    pswp.animations.stopAllPan();\r\n\r\n    this.itemHolders.forEach((itemHolder, i) => {\r\n      if (itemHolder.slide) {\r\n        // Slide in the 2nd holder is always active\r\n        itemHolder.slide.setIsActive(i === 1);\r\n      }\r\n    });\r\n\r\n    pswp.currSlide = this.itemHolders[1]?.slide;\r\n    pswp.contentLoader.updateLazy(positionDifference);\r\n\r\n    if (pswp.currSlide) {\r\n      pswp.currSlide.applyCurrentZoomPan();\r\n    }\r\n\r\n    pswp.dispatch('change');\r\n  }\r\n\r\n  /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {number} x\r\n   * @param {boolean} [dragging]\r\n   */\r\n  moveTo(x, dragging) {\r\n    if (!this.pswp.canLoop() && dragging) {\r\n      // Apply friction\r\n      let newSlideIndexOffset = ((this.slideWidth * this._currPositionIndex) - x) / this.slideWidth;\r\n      newSlideIndexOffset += this.pswp.currIndex;\r\n      const delta = Math.round(x - this.x);\r\n\r\n      if ((newSlideIndexOffset < 0 && delta > 0)\r\n          || (newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0)) {\r\n        x = this.x + (delta * MAIN_SCROLL_END_FRICTION);\r\n      }\r\n    }\r\n\r\n    this.x = x;\r\n\r\n    if (this.pswp.container) {\r\n      setTransform(this.pswp.container, x);\r\n    }\r\n\r\n    this.pswp.dispatch('moveMainScroll', { x, dragging: dragging ?? false });\r\n  }\r\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Methods<T>} Methods<T>\r\n */\r\n\r\nconst KeyboardKeyCodesMap = {\r\n  Escape: 27,\r\n  z: 90,\r\n  ArrowLeft: 37,\r\n  ArrowUp: 38,\r\n  ArrowRight: 39,\r\n  ArrowDown: 40,\r\n  Tab: 9,\r\n};\r\n\r\n/**\r\n * @template {keyof KeyboardKeyCodesMap} T\r\n * @param {T} key\r\n * @param {boolean} isKeySupported\r\n * @returns {T | number | undefined}\r\n */\r\nconst getKeyboardEventKey = (key, isKeySupported) => {\r\n  return isKeySupported ? key : KeyboardKeyCodesMap[key];\r\n};\r\n\r\n/**\r\n * - Manages keyboard shortcuts.\r\n * - Helps trap focus within photoswipe.\r\n */\r\nclass Keyboard {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    /** @private */\r\n    this._wasFocused = false;\r\n\r\n    pswp.on('bindEvents', () => {\r\n      // Dialog was likely opened by keyboard if initial point is not defined\r\n      if (!pswp.options.initialPointerPos) {\r\n        // focus causes layout,\r\n        // which causes lag during the animation,\r\n        // that's why we delay it until the opener transition ends\r\n        this._focusRoot();\r\n      }\r\n\r\n      pswp.events.add(document, 'focusin', /** @type EventListener */(this._onFocusIn.bind(this)));\r\n      pswp.events.add(document, 'keydown', /** @type EventListener */(this._onKeyDown.bind(this)));\r\n    });\r\n\r\n    const lastActiveElement = /** @type {HTMLElement} */ (document.activeElement);\r\n    pswp.on('destroy', () => {\r\n      if (pswp.options.returnFocus\r\n          && lastActiveElement\r\n          && this._wasFocused) {\r\n        lastActiveElement.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  /** @private */\r\n  _focusRoot() {\r\n    if (!this._wasFocused && this.pswp.element) {\r\n      this.pswp.element.focus();\r\n      this._wasFocused = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {KeyboardEvent} e\r\n   */\r\n  _onKeyDown(e) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('keydown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (specialKeyUsed(e)) {\r\n      // don't do anything if special key pressed\r\n      // to prevent from overriding default browser actions\r\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\r\n      return;\r\n    }\r\n\r\n    /** @type {Methods<PhotoSwipe> | undefined} */\r\n    let keydownAction;\r\n    /** @type {'x' | 'y' | undefined} */\r\n    let axis;\r\n    let isForward = false;\r\n    const isKeySupported = 'key' in e;\r\n\r\n    switch (isKeySupported ? e.key : e.keyCode) {\r\n      case getKeyboardEventKey('Escape', isKeySupported):\r\n        if (pswp.options.escKey) {\r\n          keydownAction = 'close';\r\n        }\r\n        break;\r\n      case getKeyboardEventKey('z', isKeySupported):\r\n        keydownAction = 'toggleZoom';\r\n        break;\r\n      case getKeyboardEventKey('ArrowLeft', isKeySupported):\r\n        axis = 'x';\r\n        break;\r\n      case getKeyboardEventKey('ArrowUp', isKeySupported):\r\n        axis = 'y';\r\n        break;\r\n      case getKeyboardEventKey('ArrowRight', isKeySupported):\r\n        axis = 'x';\r\n        isForward = true;\r\n        break;\r\n      case getKeyboardEventKey('ArrowDown', isKeySupported):\r\n        isForward = true;\r\n        axis = 'y';\r\n        break;\r\n      case getKeyboardEventKey('Tab', isKeySupported):\r\n        this._focusRoot();\r\n        break;\r\n    }\r\n\r\n    // if left/right/top/bottom key\r\n    if (axis) {\r\n      // prevent page scroll\r\n      e.preventDefault();\r\n\r\n      const { currSlide } = pswp;\r\n\r\n      if (pswp.options.arrowKeys\r\n          && axis === 'x'\r\n          && pswp.getNumItems() > 1) {\r\n        keydownAction = isForward ? 'next' : 'prev';\r\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\r\n        // up/down arrow keys pan the image vertically\r\n        // left/right arrow keys pan horizontally.\r\n        // Unless there is only one image,\r\n        // or arrowKeys option is disabled\r\n        currSlide.pan[axis] += isForward ? -80 : 80;\r\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\r\n      }\r\n    }\r\n\r\n    if (keydownAction) {\r\n      e.preventDefault();\r\n      // @ts-ignore\r\n      pswp[keydownAction]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @private\r\n   * @param {FocusEvent} e\r\n   */\r\n  _onFocusIn(e) {\r\n    const { template } = this.pswp;\r\n    if (template\r\n        && document !== e.target\r\n        && template !== e.target\r\n        && !template.contains(/** @type {Node} */ (e.target))) {\r\n      // focus root element\r\n      template.focus();\r\n    }\r\n  }\r\n}\n\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/** @typedef {import('./animations.js').SharedAnimationProps} SharedAnimationProps */\r\n\r\n/** @typedef {Object} DefaultCssAnimationProps\r\n *\r\n * @prop {HTMLElement} target\r\n * @prop {number} [duration]\r\n * @prop {string} [easing]\r\n * @prop {string} [transform]\r\n * @prop {string} [opacity]\r\n * */\r\n\r\n/** @typedef {SharedAnimationProps & DefaultCssAnimationProps} CssAnimationProps */\r\n\r\n/**\r\n * Runs CSS transition.\r\n */\r\nclass CSSAnimation {\r\n  /**\r\n   * onComplete can be unpredictable, be careful about current state\r\n   *\r\n   * @param {CssAnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    const {\r\n      target,\r\n      onComplete,\r\n      transform,\r\n      onFinish = () => {},\r\n      duration = 333,\r\n      easing = DEFAULT_EASING,\r\n    } = props;\r\n\r\n    this.onFinish = onFinish;\r\n\r\n    // support only transform and opacity\r\n    const prop = transform ? 'transform' : 'opacity';\r\n    const propValue = props[prop] ?? '';\r\n\r\n    /** @private */\r\n    this._target = target;\r\n    /** @private */\r\n    this._onComplete = onComplete;\r\n    /** @private */\r\n    this._finished = false;\r\n\r\n    /** @private */\r\n    this._onTransitionEnd = this._onTransitionEnd.bind(this);\r\n\r\n    // Using timeout hack to make sure that animation\r\n    // starts even if the animated property was changed recently,\r\n    // otherwise transitionend might not fire or transition won't start.\r\n    // https://drafts.csswg.org/css-transitions/#starting\r\n    //\r\n    // ¯\\_(ツ)_/¯\r\n    /** @private */\r\n    this._helperTimeout = setTimeout(() => {\r\n      setTransitionStyle(target, prop, duration, easing);\r\n      this._helperTimeout = setTimeout(() => {\r\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\r\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false);\r\n\r\n        // Safari occasionally does not emit transitionend event\r\n        // if element property was modified during the transition,\r\n        // which may be caused by resize or third party component,\r\n        // using timeout as a safety fallback\r\n        this._helperTimeout = setTimeout(() => {\r\n          this._finalizeAnimation();\r\n        }, duration + 500);\r\n        target.style[prop] = propValue;\r\n      }, 30); // Do not reduce this number\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {TransitionEvent} e\r\n   */\r\n  _onTransitionEnd(e) {\r\n    if (e.target === this._target) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finalizeAnimation() {\r\n    if (!this._finished) {\r\n      this._finished = true;\r\n      this.onFinish();\r\n      if (this._onComplete) {\r\n        this._onComplete();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._helperTimeout) {\r\n      clearTimeout(this._helperTimeout);\r\n    }\r\n    removeTransitionStyle(this._target);\r\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\r\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\r\n    if (!this._finished) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n}\n\nconst DEFAULT_NATURAL_FREQUENCY = 12;\r\nconst DEFAULT_DAMPING_RATIO = 0.75;\r\n\r\n/**\r\n * Spring easing helper\r\n */\r\nclass SpringEaser {\r\n  /**\r\n   * @param {number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {number} [dampingRatio]\r\n   * Determines how bouncy animation will be.\r\n   * From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   * \"overshoot\" refers to part of animation that\r\n   * goes beyond the final value.\r\n   *\r\n   * @param {number} [naturalFrequency]\r\n   * Determines how fast animation will slow down.\r\n   * The higher value - the stiffer the transition will be,\r\n   * and the faster it will slow down.\r\n   * Recommended value from 10 to 50\r\n   */\r\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\r\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\r\n\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO;\r\n\r\n    // https://en.wikipedia.org/wiki/Natural_frequency\r\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\r\n\r\n    this._dampedFrequency = this._naturalFrequency;\r\n\r\n    if (this._dampingRatio < 1) {\r\n      this._dampedFrequency *= Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} deltaPosition Difference between current and end position of the animation\r\n   * @param {number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {number} Displacement, relative to the end position.\r\n   */\r\n  easeFrame(deltaPosition, deltaTime) {\r\n    // Inspired by Apple Webkit and Android spring function implementation\r\n    // https://en.wikipedia.org/wiki/Oscillation\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    // we ignore mass (assume that it's 1kg)\r\n\r\n    let displacement = 0;\r\n    let coeff;\r\n\r\n    deltaTime /= 1000;\r\n\r\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\r\n\r\n    if (this._dampingRatio === 1) {\r\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\r\n\r\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency) + coeff\r\n                        * naturalDumpingPow;\r\n    } else if (this._dampingRatio < 1) {\r\n      coeff = (1 / this._dampedFrequency)\r\n                * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\r\n\r\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\r\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\r\n\r\n      displacement = naturalDumpingPow\r\n                       * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency)\r\n                        * this._dampingRatio\r\n                        + naturalDumpingPow\r\n                        * (-this._dampedFrequency * deltaPosition * dumpedFSin\r\n                        + this._dampedFrequency * coeff * dumpedFCos);\r\n    }\r\n\r\n    // Overdamped (>1) damping ratio is not supported\r\n\r\n    return displacement;\r\n  }\r\n}\n\n/** @typedef {import('./animations.js').SharedAnimationProps} SharedAnimationProps */\r\n\r\n/**\r\n * @typedef {Object} DefaultSpringAnimationProps\r\n *\r\n * @prop {number} start\r\n * @prop {number} end\r\n * @prop {number} velocity\r\n * @prop {number} [dampingRatio]\r\n * @prop {number} [naturalFrequency]\r\n * @prop {(end: number) => void} onUpdate\r\n */\r\n\r\n/** @typedef {SharedAnimationProps & DefaultSpringAnimationProps} SpringAnimationProps */\r\n\r\nclass SpringAnimation {\r\n  /**\r\n   * @param {SpringAnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    this._raf = 0;\r\n\r\n    const {\r\n      start,\r\n      end,\r\n      velocity,\r\n      onUpdate,\r\n      onComplete,\r\n      onFinish = () => {},\r\n      dampingRatio,\r\n      naturalFrequency\r\n    } = props;\r\n\r\n    this.onFinish = onFinish;\r\n\r\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\r\n    let prevTime = Date.now();\r\n    let deltaPosition = start - end;\r\n\r\n    const animationLoop = () => {\r\n      if (this._raf) {\r\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime);\r\n\r\n        // Stop the animation if velocity is low and position is close to end\r\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\r\n          // Finalize the animation\r\n          onUpdate(end);\r\n          if (onComplete) {\r\n            onComplete();\r\n          }\r\n          this.onFinish();\r\n        } else {\r\n          prevTime = Date.now();\r\n          onUpdate(deltaPosition + end);\r\n          this._raf = requestAnimationFrame(animationLoop);\r\n        }\r\n      }\r\n    };\r\n\r\n    this._raf = requestAnimationFrame(animationLoop);\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._raf >= 0) {\r\n      cancelAnimationFrame(this._raf);\r\n    }\r\n    this._raf = 0;\r\n  }\r\n}\n\n/** @typedef {import('./css-animation.js').CssAnimationProps} CssAnimationProps */\r\n/** @typedef {import('./spring-animation.js').SpringAnimationProps} SpringAnimationProps */\r\n\r\n/** @typedef {Object} SharedAnimationProps\r\n * @prop {string} [name]\r\n * @prop {boolean} [isPan]\r\n * @prop {boolean} [isMainScroll]\r\n * @prop {VoidFunction} [onComplete]\r\n * @prop {VoidFunction} [onFinish]\r\n */\r\n\r\n/** @typedef {SpringAnimation | CSSAnimation} Animation */\r\n/** @typedef {SpringAnimationProps | CssAnimationProps} AnimationProps */\r\n\r\n/**\r\n * Manages animations\r\n */\r\nclass Animations {\r\n  constructor() {\r\n    /** @type {Animation[]} */\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * @param {SpringAnimationProps} props\r\n   */\r\n  startSpring(props) {\r\n    this._start(props, true);\r\n  }\r\n\r\n  /**\r\n   * @param {CssAnimationProps} props\r\n   */\r\n  startTransition(props) {\r\n    this._start(props);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {AnimationProps} props\r\n   * @param {boolean} [isSpring]\r\n   * @returns {Animation}\r\n   */\r\n  _start(props, isSpring) {\r\n    const animation = isSpring\r\n      ? new SpringAnimation(/** @type SpringAnimationProps */ (props))\r\n      : new CSSAnimation(/** @type CssAnimationProps */ (props));\r\n\r\n    this.activeAnimations.push(animation);\r\n    animation.onFinish = () => this.stop(animation);\r\n\r\n    return animation;\r\n  }\r\n\r\n  /**\r\n   * @param {Animation} animation\r\n   */\r\n  stop(animation) {\r\n    animation.destroy();\r\n    const index = this.activeAnimations.indexOf(animation);\r\n    if (index > -1) {\r\n      this.activeAnimations.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  stopAll() { // _stopAllAnimations\r\n    this.activeAnimations.forEach((animation) => {\r\n      animation.destroy();\r\n    });\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * Stop all pan or zoom transitions\r\n   */\r\n  stopAllPan() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isPan) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  stopMainScroll() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isMainScroll) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns true if main scroll transition is running\r\n   */\r\n  // isMainScrollRunning() {\r\n  //   return this.activeAnimations.some((animation) => {\r\n  //     return animation.props.isMainScroll;\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */\r\n  isPanRunning() {\r\n    return this.activeAnimations.some((animation) => {\r\n      return animation.props.isPan;\r\n    });\r\n  }\r\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */\r\nclass ScrollWheel {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    pswp.events.add(pswp.element, 'wheel', /** @type EventListener */(this._onWheel.bind(this)));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {WheelEvent} e\r\n   */\r\n  _onWheel(e) {\r\n    e.preventDefault();\r\n    const { currSlide } = this.pswp;\r\n    let { deltaX, deltaY } = e;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('wheel', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\r\n      // zoom\r\n      if (currSlide.isZoomable()) {\r\n        let zoomFactor = -deltaY;\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          zoomFactor *= 0.05;\r\n        } else {\r\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\r\n        }\r\n        zoomFactor = 2 ** zoomFactor;\r\n\r\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\r\n        currSlide.zoomTo(destZoomLevel, {\r\n          x: e.clientX,\r\n          y: e.clientY\r\n        });\r\n      }\r\n    } else {\r\n      // pan\r\n      if (currSlide.isPannable()) {\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          // 18 - average line height\r\n          deltaX *= 18;\r\n          deltaY *= 18;\r\n        }\r\n\r\n        currSlide.panTo(\r\n          currSlide.pan.x - deltaX,\r\n          currSlide.pan.y - deltaY\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementMarkupProps\r\n * @prop {boolean} [isCustomSVG]\r\n * @prop {string} inner\r\n * @prop {string} [outlineID]\r\n * @prop {number | string} [size]\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementData\r\n * @prop {DefaultUIElements | string} [name]\r\n * @prop {string} [className]\r\n * @prop {UIElementMarkup} [html]\r\n * @prop {boolean} [isButton]\r\n * @prop {keyof HTMLElementTagNameMap} [tagName]\r\n * @prop {string} [title]\r\n * @prop {string} [ariaLabel]\r\n * @prop {(element: HTMLElement, pswp: PhotoSwipe) => void} [onInit]\r\n * @prop {Methods<PhotoSwipe> | ((e: MouseEvent, element: HTMLElement, pswp: PhotoSwipe) => void)} [onClick]\r\n * @prop {'bar' | 'wrapper' | 'root'} [appendTo]\r\n * @prop {number} [order]\r\n */\r\n\r\n/** @typedef {'arrowPrev' | 'arrowNext' | 'close' | 'zoom' | 'counter'} DefaultUIElements */\r\n\r\n/** @typedef {string | UIElementMarkupProps} UIElementMarkup */\r\n\r\n/**\r\n * @param {UIElementMarkup} [htmlData]\r\n * @returns {string}\r\n */\r\nfunction addElementHTML(htmlData) {\r\n  if (typeof htmlData === 'string') {\r\n    // Allow developers to provide full svg,\r\n    // For example:\r\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\r\n    //   <path d=\"...\" />\r\n    //   <circle ... />\r\n    // </svg>\r\n    // Can also be any HTML string.\r\n    return htmlData;\r\n  }\r\n\r\n  if (!htmlData || !htmlData.isCustomSVG) {\r\n    return '';\r\n  }\r\n\r\n  const svgData = htmlData;\r\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">';\r\n  // replace all %d with size\r\n  out = out.split('%d').join(/** @type {string} */ (svgData.size || 32));\r\n\r\n  // Icons may contain outline/shadow,\r\n  // to make it we \"clone\" base icon shape and add border to it.\r\n  // Icon itself and border are styled via CSS.\r\n  //\r\n  // Property shadowID defines ID of element that should be cloned.\r\n  if (svgData.outlineID) {\r\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\r\n  }\r\n\r\n  out += svgData.inner;\r\n\r\n  out += '</svg>';\r\n\r\n  return out;\r\n}\r\n\r\nclass UIElement {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   * @param {UIElementData} data\r\n   */\r\n  constructor(pswp, data) {\r\n    const name = data.name || data.className;\r\n    let elementHTML = data.html;\r\n\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (pswp.options[name] === false) {\r\n      // exit if element is disabled from options\r\n      return;\r\n    }\r\n\r\n    // Allow to override SVG icons from options\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\r\n      // arrowPrevSVG\r\n      // arrowNextSVG\r\n      // closeSVG\r\n      // zoomSVG\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      elementHTML = pswp.options[name + 'SVG'];\r\n    }\r\n\r\n    pswp.dispatch('uiElementCreate', { data });\r\n\r\n    let className = '';\r\n    if (data.isButton) {\r\n      className += 'pswp__button ';\r\n      className += (data.className || `pswp__button--${data.name}`);\r\n    } else {\r\n      className += (data.className || `pswp__${data.name}`);\r\n    }\r\n\r\n    let tagName = data.isButton ? (data.tagName || 'button') : (data.tagName || 'div');\r\n    tagName = /** @type {keyof HTMLElementTagNameMap} */ (tagName.toLowerCase());\r\n    /** @type {HTMLElement} */\r\n    const element = createElement(className, tagName);\r\n\r\n    if (data.isButton) {\r\n      if (tagName === 'button') {\r\n        /** @type {HTMLButtonElement} */ (element).type = 'button';\r\n      }\r\n\r\n      let { title } = data;\r\n      const { ariaLabel } = data;\r\n\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      if (typeof pswp.options[name + 'Title'] === 'string') {\r\n        // @ts-expect-error lookup only by `data.name` maybe?\r\n        title = pswp.options[name + 'Title'];\r\n      }\r\n\r\n      if (title) {\r\n        element.title = title;\r\n      }\r\n\r\n      const ariaText = ariaLabel || title;\r\n      if (ariaText) {\r\n        element.setAttribute('aria-label', ariaText);\r\n      }\r\n    }\r\n\r\n    element.innerHTML = addElementHTML(elementHTML);\r\n\r\n    if (data.onInit) {\r\n      data.onInit(element, pswp);\r\n    }\r\n\r\n    if (data.onClick) {\r\n      element.onclick = (e) => {\r\n        if (typeof data.onClick === 'string') {\r\n          // @ts-ignore\r\n          pswp[data.onClick]();\r\n        } else if (typeof data.onClick === 'function') {\r\n          data.onClick(e, element, pswp);\r\n        }\r\n      };\r\n    }\r\n\r\n    // Top bar is default position\r\n    const appendTo = data.appendTo || 'bar';\r\n    /** @type {HTMLElement | undefined} root element by default */\r\n    let container = pswp.element;\r\n    if (appendTo === 'bar') {\r\n      if (!pswp.topBar) {\r\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', 'div', pswp.scrollWrap);\r\n      }\r\n      container = pswp.topBar;\r\n    } else {\r\n      // element outside of top bar gets a secondary class\r\n      // that makes element fade out on close\r\n      element.classList.add('pswp__hide-on-close');\r\n\r\n      if (appendTo === 'wrapper') {\r\n        container = pswp.scrollWrap;\r\n      }\r\n    }\r\n\r\n    container?.appendChild(pswp.applyFilters('uiElement', element, data));\r\n  }\r\n}\n\n/*\r\n  Backward and forward arrow buttons\r\n */\r\n\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n *\r\n * @param {HTMLElement} element\r\n * @param {PhotoSwipe} pswp\r\n * @param {boolean} [isNextButton]\r\n */\r\nfunction initArrowButton(element, pswp, isNextButton) {\r\n  element.classList.add('pswp__button--arrow');\r\n  // TODO: this should point to a unique id for this instance\r\n  element.setAttribute('aria-controls', 'pswp__items');\r\n  pswp.on('change', () => {\r\n    if (!pswp.options.loop) {\r\n      if (isNextButton) {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\r\n      } else {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex > 0);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/** @type {UIElementData} */\r\nconst arrowPrev = {\r\n  name: 'arrowPrev',\r\n  className: 'pswp__button--arrow--prev',\r\n  title: 'Previous',\r\n  order: 10,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'prev',\r\n  onInit: initArrowButton\r\n};\r\n\r\n/** @type {UIElementData} */\r\nconst arrowNext = {\r\n  name: 'arrowNext',\r\n  className: 'pswp__button--arrow--next',\r\n  title: 'Next',\r\n  order: 11,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'next',\r\n  onInit: (el, pswp) => {\r\n    initArrowButton(el, pswp, true);\r\n  }\r\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst closeButton = {\r\n  name: 'close',\r\n  title: 'Close',\r\n  order: 20,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\r\n    outlineID: 'pswp__icn-close'\r\n  },\r\n  onClick: 'close'\r\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst zoomButton = {\r\n  name: 'zoom',\r\n  title: 'Zoom',\r\n  order: 10,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\r\n    outlineID: 'pswp__icn-zoom'\r\n  },\r\n  onClick: 'toggleZoom'\r\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst loadingIndicator = {\r\n  name: 'preloader',\r\n  appendTo: 'bar',\r\n  order: 7,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\r\n    outlineID: 'pswp__icn-loading'\r\n  },\r\n  onInit: (indicatorElement, pswp) => {\r\n    /** @type {boolean | undefined} */\r\n    let isVisible;\r\n    /** @type {NodeJS.Timeout | null} */\r\n    let delayTimeout = null;\r\n\r\n    /**\r\n     * @param {string} className\r\n     * @param {boolean} add\r\n     */\r\n    const toggleIndicatorClass = (className, add) => {\r\n      indicatorElement.classList.toggle('pswp__preloader--' + className, add);\r\n    };\r\n\r\n    /**\r\n     * @param {boolean} visible\r\n     */\r\n    const setIndicatorVisibility = (visible) => {\r\n      if (isVisible !== visible) {\r\n        isVisible = visible;\r\n        toggleIndicatorClass('active', visible);\r\n      }\r\n    };\r\n\r\n    const updatePreloaderVisibility = () => {\r\n      if (!pswp.currSlide?.content.isLoading()) {\r\n        setIndicatorVisibility(false);\r\n        if (delayTimeout) {\r\n          clearTimeout(delayTimeout);\r\n          delayTimeout = null;\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (!delayTimeout) {\r\n        // display loading indicator with delay\r\n        delayTimeout = setTimeout(() => {\r\n          setIndicatorVisibility(Boolean(pswp.currSlide?.content.isLoading()));\r\n          delayTimeout = null;\r\n        }, pswp.options.preloaderDelay);\r\n      }\r\n    };\r\n\r\n    pswp.on('change', updatePreloaderVisibility);\r\n\r\n    pswp.on('loadComplete', (e) => {\r\n      if (pswp.currSlide === e.slide) {\r\n        updatePreloaderVisibility();\r\n      }\r\n    });\r\n\r\n    // expose the method\r\n    if (pswp.ui) {\r\n      pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\r\n    }\r\n  }\r\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst counterIndicator = {\r\n  name: 'counter',\r\n  order: 5,\r\n  onInit: (counterElement, pswp) => {\r\n    pswp.on('change', () => {\r\n      counterElement.innerText = (pswp.currIndex + 1)\r\n                                  + pswp.options.indexIndicatorSep\r\n                                  + pswp.getNumItems();\r\n    });\r\n  }\r\n};\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n\r\n/**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default, it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {HTMLElement} el\r\n * @param {boolean} isZoomedIn\r\n */\r\nfunction setZoomedIn(el, isZoomedIn) {\r\n  el.classList.toggle('pswp--zoomed-in', isZoomedIn);\r\n}\r\n\r\nclass UI {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isRegistered = false;\r\n    /** @type {UIElementData[]} */\r\n    this.uiElementsData = [];\r\n    /** @type {(UIElement | UIElementData)[]} */\r\n    this.items = [];\r\n    /** @type {() => void} */\r\n    this.updatePreloaderVisibility = () => {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {number | undefined}\r\n     */\r\n    this._lastUpdatedZoomLevel = undefined;\r\n  }\r\n\r\n  init() {\r\n    const { pswp } = this;\r\n    this.isRegistered = false;\r\n    this.uiElementsData = [\r\n      closeButton,\r\n      arrowPrev,\r\n      arrowNext,\r\n      zoomButton,\r\n      loadingIndicator,\r\n      counterIndicator\r\n    ];\r\n\r\n    pswp.dispatch('uiRegister');\r\n\r\n    // sort by order\r\n    this.uiElementsData.sort((a, b) => {\r\n      // default order is 0\r\n      return (a.order || 0) - (b.order || 0);\r\n    });\r\n\r\n    this.items = [];\r\n\r\n    this.isRegistered = true;\r\n    this.uiElementsData.forEach((uiElementData) => {\r\n      this.registerElement(uiElementData);\r\n    });\r\n\r\n    pswp.on('change', () => {\r\n      pswp.element?.classList.toggle('pswp--one-slide', pswp.getNumItems() === 1);\r\n    });\r\n\r\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\r\n  }\r\n\r\n  /**\r\n   * @param {UIElementData} elementData\r\n   */\r\n  registerElement(elementData) {\r\n    if (this.isRegistered) {\r\n      this.items.push(\r\n        new UIElement(this.pswp, elementData)\r\n      );\r\n    } else {\r\n      this.uiElementsData.push(elementData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   *\r\n   * @private\r\n   */\r\n  _onZoomPanUpdate() {\r\n    const { template, currSlide, options } = this.pswp;\r\n\r\n    if (this.pswp.opener.isClosing || !template || !currSlide) {\r\n      return;\r\n    }\r\n\r\n    let { currZoomLevel } = currSlide;\r\n\r\n    // if not open yet - check against initial zoom level\r\n    if (!this.pswp.opener.isOpen) {\r\n      currZoomLevel = currSlide.zoomLevels.initial;\r\n    }\r\n\r\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\r\n      return;\r\n    }\r\n    this._lastUpdatedZoomLevel = currZoomLevel;\r\n\r\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary;\r\n\r\n    // Initial and secondary zoom levels are almost equal\r\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\r\n      // disable zoom\r\n      setZoomedIn(template, false);\r\n      template.classList.remove('pswp--zoom-allowed');\r\n      return;\r\n    }\r\n\r\n    template.classList.add('pswp--zoom-allowed');\r\n\r\n    const potentialZoomLevel = currZoomLevel === currSlide.zoomLevels.initial\r\n      ? currSlide.zoomLevels.secondary : currSlide.zoomLevels.initial;\r\n\r\n    setZoomedIn(template, potentialZoomLevel <= currZoomLevel);\r\n\r\n    if (options.imageClickAction === 'zoom'\r\n        || options.imageClickAction === 'zoom-or-close') {\r\n      template.classList.add('pswp--click-to-zoom');\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/** @typedef {{ x: number; y: number; w: number; innerRect?: { w: number; h: number; x: number; y: number } }} Bounds */\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @returns Bounds\r\n */\r\nfunction getBoundsByElement(el) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n  return {\r\n    x: thumbAreaRect.left,\r\n    y: thumbAreaRect.top,\r\n    w: thumbAreaRect.width\r\n  };\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @param {number} imageWidth\r\n * @param {number} imageHeight\r\n * @returns Bounds\r\n */\r\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n\r\n  // fill image into the area\r\n  // (do they same as object-fit:cover does to retrieve coordinates)\r\n  const hRatio = thumbAreaRect.width / imageWidth;\r\n  const vRatio = thumbAreaRect.height / imageHeight;\r\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\r\n\r\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\r\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\r\n\r\n  /**\r\n   * Coordinates of the image,\r\n   * as if it was not cropped,\r\n   * height is calculated automatically\r\n   *\r\n   * @type {Bounds}\r\n   */\r\n  const bounds = {\r\n    x: thumbAreaRect.left + offsetX,\r\n    y: thumbAreaRect.top + offsetY,\r\n    w: imageWidth * fillZoomLevel\r\n  };\r\n\r\n  // Coordinates of inner crop area\r\n  // relative to the image\r\n  bounds.innerRect = {\r\n    w: thumbAreaRect.width,\r\n    h: thumbAreaRect.height,\r\n    x: offsetX,\r\n    y: offsetY\r\n  };\r\n\r\n  return bounds;\r\n}\r\n\r\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {number} index\r\n * @param {SlideData} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns {Bounds | undefined}\r\n */\r\nfunction getThumbBounds(index, itemData, instance) {\r\n  // legacy event, before filters were introduced\r\n  const event = instance.dispatch('thumbBounds', {\r\n    index,\r\n    itemData,\r\n    instance\r\n  });\r\n  // @ts-expect-error\r\n  if (event.thumbBounds) {\r\n    // @ts-expect-error\r\n    return event.thumbBounds;\r\n  }\r\n\r\n  const { element } = itemData;\r\n  /** @type {Bounds | undefined} */\r\n  let thumbBounds;\r\n  /** @type {HTMLElement | null | undefined} */\r\n  let thumbnail;\r\n\r\n  if (element && instance.options.thumbSelector !== false) {\r\n    const thumbSelector = instance.options.thumbSelector || 'img';\r\n    thumbnail = element.matches(thumbSelector)\r\n      ? element : /** @type {HTMLElement | null} */ (element.querySelector(thumbSelector));\r\n  }\r\n\r\n  thumbnail = instance.applyFilters('thumbEl', thumbnail, itemData, index);\r\n\r\n  if (thumbnail) {\r\n    if (!itemData.thumbCropped) {\r\n      thumbBounds = getBoundsByElement(thumbnail);\r\n    } else {\r\n      thumbBounds = getCroppedBoundsByElement(\r\n        thumbnail,\r\n        itemData.width || itemData.w || 0,\r\n        itemData.height || itemData.h || 0\r\n      );\r\n    }\r\n  }\r\n\r\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\r\n}\n\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide | undefined, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point | undefined, transitionDuration: number | false | undefined }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource | undefined, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource | undefined) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement | null | undefined, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thubmnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds | undefined, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thubmnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    this.defaultPrevented = false;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe | undefined} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions | undefined} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name]?.push({ fn, priority });\r\n    this._filters[name]?.sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    this.pswp?.addFilter(name, fn, priority);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    this._filters[name]?.forEach((filter) => {\r\n      // @ts-expect-error\r\n      args[0] = filter.fn.apply(this, args);\r\n    });\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name]?.push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    this.pswp?.on(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    this.pswp?.off(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    this._listeners[name]?.forEach((listener) => {\r\n      listener.call(this, event);\r\n    });\r\n\r\n    return event;\r\n  }\r\n}\n\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    /** @type {HTMLImageElement | HTMLDivElement | null} */\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : 'div',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      const imgEl = /** @type {HTMLImageElement} */ (this.element);\r\n      imgEl.decoding = 'async';\r\n      imgEl.alt = '';\r\n      imgEl.src = imageSrc;\r\n      imgEl.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hidden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element?.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\n\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement | undefined} */\r\n    this.element = undefined;\r\n    /** @type {Placeholder | undefined} */\r\n    this.placeholder = undefined;\r\n    /** @type {Slide | undefined} */\r\n    this.slide = undefined;\r\n\r\n    this.displayedImageWidth = 0;\r\n    this.displayedImageHeight = 0;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    this.isDecoding = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = undefined;\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean} isLazy\r\n   * @param {boolean} [reload]\r\n   */\r\n  load(isLazy, reload) {\r\n    if (this.slide && this.usePlaceholder()) {\r\n      if (!this.placeholder) {\r\n        const placeholderSrc = this.instance.applyFilters(\r\n          'placeholderSrc',\r\n          // use  image-based placeholder only for the first slide,\r\n          // as rendering (even small stretched thumbnail) is an expensive operation\r\n          (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n          this\r\n        );\r\n        this.placeholder = new Placeholder(\r\n          placeholderSrc,\r\n          this.slide.container\r\n        );\r\n      } else {\r\n        const placeholderEl = this.placeholder.element;\r\n        // Add placeholder to DOM if it was already created\r\n        if (placeholderEl && !placeholderEl.parentElement) {\r\n          this.slide.container.prepend(placeholderEl);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.element = createElement('pswp__img', 'img');\r\n      // Start loading only after width is defined, as sizes might depend on it.\r\n      // Due to Safari feature, we must define sizes before srcset.\r\n      if (this.displayedImageWidth) {\r\n        this.loadImage(isLazy);\r\n      }\r\n    } else {\r\n      this.element = createElement('pswp__content', 'div');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    if (!this.isImageContent()\r\n      || !this.element\r\n      || this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const imageElement = /** @type HTMLImageElement */ (this.element);\r\n\r\n    this.updateSrcsetSizes();\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src ?? '';\r\n    imageElement.alt = this.data.alt ?? '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide && this.element) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n\r\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is in error state\r\n   */\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    if (this.instance.dispatch(\r\n      'contentResize',\r\n      { content: this, width, height }).defaultPrevented\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const isInitialSizeUpdate = (!this.displayedImageWidth && width);\r\n\r\n      this.displayedImageWidth = width;\r\n      this.displayedImageHeight = height;\r\n\r\n      if (isInitialSizeUpdate) {\r\n        this.loadImage(false);\r\n      } else {\r\n        this.updateSrcsetSizes();\r\n      }\r\n\r\n      if (this.slide) {\r\n        this.instance.dispatch(\r\n          'imageSizeChange',\r\n          { slide: this.slide, width, height, content: this }\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\r\n  updateSrcsetSizes() {\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    if (!this.isImageContent() || !this.element || !this.data.srcset) {\r\n      return;\r\n    }\r\n\r\n    const image = /** @type HTMLImageElement */ (this.element);\r\n    const sizesWidth = this.instance.applyFilters(\r\n      'srcsetSizesWidth',\r\n      this.displayedImageWidth,\r\n      this\r\n    );\r\n\r\n    if (\r\n      !image.dataset.largestUsedSize\r\n      || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)\r\n    ) {\r\n      image.sizes = sizesWidth + 'px';\r\n      image.dataset.largestUsedSize = String(sizesWidth);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = undefined;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.destroy();\r\n      this.placeholder = undefined;\r\n    }\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      let errorMsgEl = createElement('pswp__error-msg', 'div');\r\n      errorMsgEl.innerText = this.instance.options?.errorMsg ?? '';\r\n      errorMsgEl = /** @type {HTMLDivElement} */ (this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      ));\r\n      this.element = createElement('pswp__content pswp__error-msg-container', 'div');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerText = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    if (this.isAttached || !this.element) {\r\n      return;\r\n    }\r\n\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const supportsDecode = ('decode' in this.element);\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      // We do not do this in Safari due to partial loading bug.\r\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\r\n        this.isDecoding = true;\r\n        // purposefully using finally instead of then,\r\n        // as if srcset sizes changes dynamically - it may cause decode error\r\n        /** @type {HTMLImageElement} */\r\n        (this.element).decode().catch(() => {}).finally(() => {\r\n          this.isDecoding = false;\r\n          this.appendImage();\r\n        });\r\n      } else {\r\n        this.appendImage();\r\n      }\r\n    } else if (this.slide && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented\r\n      || !this.slide) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent() && this.isDecoding && !isSafari()) {\r\n      // add image to slide when it becomes active,\r\n      // even if it's not finished decoding\r\n      this.appendImage();\r\n    } else if (this.isError()) {\r\n      this.load(false, true); // try to reload\r\n    }\r\n\r\n    if (this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'false');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n    if (this.slide && this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'true');\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n\r\n    if (this.placeholder && this.placeholder.element) {\r\n      this.placeholder.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n\r\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('./content.js').default} Content */\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n * @param {number} index\r\n * @returns {Content} Image that is being decoded or false.\r\n */\r\nfunction lazyLoadData(itemData, instance, index) {\r\n  const content = instance.createContentFromData(itemData, index);\r\n  /** @type {ZoomLevel | undefined} */\r\n  let zoomLevel;\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset, and we need to define sizes\r\n  if (options) {\r\n    zoomLevel = new ZoomLevel(options, itemData, -1);\r\n\r\n    let viewportSize;\r\n    if (instance.pswp) {\r\n      viewportSize = instance.pswp.viewportSize;\r\n    } else {\r\n      viewportSize = getViewportSize(options, instance);\r\n    }\r\n\r\n    const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n    zoomLevel.update(content.width, content.height, panAreaSize);\r\n  }\r\n\r\n  content.lazyLoad();\r\n\r\n  if (zoomLevel) {\r\n    content.setDisplayedSize(\r\n      Math.ceil(content.width * zoomLevel.initial),\r\n      Math.ceil(content.height * zoomLevel.initial)\r\n    );\r\n  }\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default, it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n * @returns {Content | undefined}\r\n */\r\nfunction lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\nclass ContentLoader {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    /** @type {Content[]} */\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number} [diff] Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} initialIndex\r\n   */\r\n  loadSlideByIndex(initialIndex) {\r\n    const index = this.pswp.getLoopedIndex(initialIndex);\r\n    // try to get cached content\r\n    let content = this.getContentByIndex(index);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Slide} slide\r\n   * @returns {Content}\r\n   */\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByIndex(slide.index);\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data, slide.index);\r\n      this.addToCache(content);\r\n    }\r\n\r\n    // assign slide to content\r\n    content.setSlide(slide);\r\n\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByIndex(content.index);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  removeByIndex(index) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   * @returns {Content | undefined}\r\n   */\r\n  getContentByIndex(index) {\r\n    return this._cachedItems.find(content => content.index === index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = [];\r\n  }\r\n}\n\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems = 0;\r\n    const dataSource = this.options?.dataSource;\r\n\r\n    if (dataSource && 'length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   * @returns {Content}\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   * @returns {SlideData}\r\n   */\r\n  getItemData(index) {\r\n    const dataSource = this.options?.dataSource;\r\n    /** @type {SlideData | HTMLElement} */\r\n    let dataSourceItem = {};\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   * @returns {HTMLElement[]}\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options?.children || this.options?.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   * @returns {SlideData}\r\n   */\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (\r\n      element.tagName === 'A'\r\n        ? element\r\n        : element.querySelector('a')\r\n    );\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = linkEl.dataset.pswpWidth ? parseInt(linkEl.dataset.pswpWidth, 10) : 0;\r\n      itemData.height = linkEl.dataset.pswpHeight ? parseInt(linkEl.dataset.pswpHeight, 10) : 0;\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt') ?? '';\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n\r\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns {Content} Image that is being decoded or false.\r\n   */\r\n  lazyLoadData(itemData, index) {\r\n    return lazyLoadData(itemData, this, index);\r\n  }\r\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/get-thumb-bounds.js').Bounds} Bounds */\r\n/** @typedef {import('./util/animations.js').AnimationProps} AnimationProps */\r\n\r\n// some browsers do not paint\r\n// elements which opacity is set to 0,\r\n// since we need to pre-render elements for the animation -\r\n// we set it to the minimum amount\r\nconst MIN_OPACITY = 0.003;\r\n\r\n/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */\r\nclass Opener {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isClosed = true;\r\n    this.isOpen = false;\r\n    this.isClosing = false;\r\n    this.isOpening = false;\r\n    /**\r\n     * @private\r\n     * @type {number | false | undefined}\r\n     */\r\n    this._duration = undefined;\r\n    /** @private */\r\n    this._useAnimation = false;\r\n    /** @private */\r\n    this._croppedZoom = false;\r\n    /** @private */\r\n    this._animateRootOpacity = false;\r\n    /** @private */\r\n    this._animateBgOpacity = false;\r\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | HTMLImageElement | null | undefined }\r\n     */\r\n    this._placeholder = undefined;\r\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | undefined }\r\n     */\r\n    this._opacityElement = undefined;\r\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | undefined }\r\n     */\r\n    this._cropContainer1 = undefined;\r\n    /**\r\n     * @private\r\n     * @type { HTMLElement | null | undefined }\r\n     */\r\n    this._cropContainer2 = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Bounds | undefined}\r\n     */\r\n    this._thumbBounds = undefined;\r\n\r\n\r\n    this._prepareOpen = this._prepareOpen.bind(this);\r\n\r\n    // Override initial zoom and pan position\r\n    pswp.on('firstZoomPan', this._prepareOpen);\r\n  }\r\n\r\n  open() {\r\n    this._prepareOpen();\r\n    this._start();\r\n  }\r\n\r\n  close() {\r\n    if (this.isClosed || this.isClosing || this.isOpening) {\r\n      // if we close during opening animation\r\n      // for now do nothing,\r\n      // browsers aren't good at changing the direction of the CSS transition\r\n      return;\r\n    }\r\n\r\n    const slide = this.pswp.currSlide;\r\n\r\n    this.isOpen = false;\r\n    this.isOpening = false;\r\n    this.isClosing = true;\r\n    this._duration = this.pswp.options.hideAnimationDuration;\r\n\r\n    if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n      this._duration = 0;\r\n    }\r\n\r\n    this._applyStartProps();\r\n    setTimeout(() => {\r\n      this._start();\r\n    }, this._croppedZoom ? 30 : 0);\r\n  }\r\n\r\n  /** @private */\r\n  _prepareOpen() {\r\n    this.pswp.off('firstZoomPan', this._prepareOpen);\r\n    if (!this.isOpening) {\r\n      const slide = this.pswp.currSlide;\r\n      this.isOpening = true;\r\n      this.isClosing = false;\r\n      this._duration = this.pswp.options.showAnimationDuration;\r\n      if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n        this._duration = 0;\r\n      }\r\n      this._applyStartProps();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _applyStartProps() {\r\n    const { pswp } = this;\r\n    const slide = this.pswp.currSlide;\r\n    const { options } = pswp;\r\n\r\n    if (options.showHideAnimationType === 'fade') {\r\n      options.showHideOpacity = true;\r\n      this._thumbBounds = undefined;\r\n    } else if (options.showHideAnimationType === 'none') {\r\n      options.showHideOpacity = false;\r\n      this._duration = 0;\r\n      this._thumbBounds = undefined;\r\n    } else if (this.isOpening && pswp._initialThumbBounds) {\r\n      // Use initial bounds if defined\r\n      this._thumbBounds = pswp._initialThumbBounds;\r\n    } else {\r\n      this._thumbBounds = this.pswp.getThumbBounds();\r\n    }\r\n\r\n    this._placeholder = slide?.getPlaceholderElement();\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Discard animations when duration is less than 50ms\r\n    this._useAnimation = Boolean(this._duration && this._duration > 50);\r\n    this._animateZoom = Boolean(this._thumbBounds)\r\n                        && slide?.content.usePlaceholder()\r\n                        && (!this.isClosing || !pswp.mainScroll.isShifted());\r\n    if (!this._animateZoom) {\r\n      this._animateRootOpacity = true;\r\n\r\n      if (this.isOpening && slide) {\r\n        slide.zoomAndPanToInitial();\r\n        slide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      this._animateRootOpacity = options.showHideOpacity ?? false;\r\n    }\r\n    this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;\r\n    this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\r\n\r\n    if (!this._useAnimation) {\r\n      this._duration = 0;\r\n      this._animateZoom = false;\r\n      this._animateBgOpacity = false;\r\n      this._animateRootOpacity = true;\r\n      if (this.isOpening) {\r\n        if (pswp.element) {\r\n          pswp.element.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.applyBgOpacity(1);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this._animateZoom && this._thumbBounds && this._thumbBounds.innerRect) {\r\n      // Properties are used when animation from cropped thumbnail\r\n      this._croppedZoom = true;\r\n      this._cropContainer1 = this.pswp.container;\r\n      this._cropContainer2 = this.pswp.currSlide?.holderElement;\r\n\r\n      if (pswp.container) {\r\n        pswp.container.style.overflow = 'hidden';\r\n        pswp.container.style.width = pswp.viewportSize.x + 'px';\r\n      }\r\n    } else {\r\n      this._croppedZoom = false;\r\n    }\r\n\r\n    if (this.isOpening) {\r\n      // Apply styles before opening transition\r\n      if (this._animateRootOpacity) {\r\n        if (pswp.element) {\r\n          pswp.element.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.applyBgOpacity(1);\r\n      } else {\r\n        if (this._animateBgOpacity && pswp.bg) {\r\n          pswp.bg.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        if (pswp.element) {\r\n          pswp.element.style.opacity = '1';\r\n        }\r\n      }\r\n\r\n      if (this._animateZoom) {\r\n        this._setClosedStateZoomPan();\r\n        if (this._placeholder) {\r\n          // tell browser that we plan to animate the placeholder\r\n          this._placeholder.style.willChange = 'transform';\r\n\r\n          // hide placeholder to allow hiding of\r\n          // elements that overlap it (such as icons over the thumbnail)\r\n          this._placeholder.style.opacity = String(MIN_OPACITY);\r\n        }\r\n      }\r\n    } else if (this.isClosing) {\r\n      // hide nearby slides to make sure that\r\n      // they are not painted during the transition\r\n      if (pswp.mainScroll.itemHolders[0]) {\r\n        pswp.mainScroll.itemHolders[0].el.style.display = 'none';\r\n      }\r\n      if (pswp.mainScroll.itemHolders[2]) {\r\n        pswp.mainScroll.itemHolders[2].el.style.display = 'none';\r\n      }\r\n\r\n      if (this._croppedZoom) {\r\n        if (pswp.mainScroll.x !== 0) {\r\n          // shift the main scroller to zero position\r\n          pswp.mainScroll.resetPosition();\r\n          pswp.mainScroll.resize();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _start() {\r\n    if (this.isOpening\r\n        && this._useAnimation\r\n        && this._placeholder\r\n        && this._placeholder.tagName === 'IMG') {\r\n      // To ensure smooth animation\r\n      // we wait till the current slide image placeholder is decoded,\r\n      // but no longer than 250ms,\r\n      // and no shorter than 50ms\r\n      // (just using requestanimationframe is not enough in Firefox,\r\n      // for some reason)\r\n      new Promise((resolve) => {\r\n        let decoded = false;\r\n        let isDelaying = true;\r\n        decodeImage(/** @type {HTMLImageElement} */ (this._placeholder)).finally(() => {\r\n          decoded = true;\r\n          if (!isDelaying) {\r\n            resolve(true);\r\n          }\r\n        });\r\n        setTimeout(() => {\r\n          isDelaying = false;\r\n          if (decoded) {\r\n            resolve(true);\r\n          }\r\n        }, 50);\r\n        setTimeout(resolve, 250);\r\n      }).finally(() => this._initiate());\r\n    } else {\r\n      this._initiate();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _initiate() {\r\n    this.pswp.element?.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\r\n\r\n    this.pswp.dispatch(\r\n      this.isOpening ? 'openingAnimationStart' : 'closingAnimationStart'\r\n    );\r\n\r\n    // legacy event\r\n    this.pswp.dispatch(\r\n      /** @type {'initialZoomIn' | 'initialZoomOut'} */\r\n      ('initialZoom' + (this.isOpening ? 'In' : 'Out'))\r\n    );\r\n\r\n    this.pswp.element?.classList.toggle('pswp--ui-visible', this.isOpening);\r\n\r\n    if (this.isOpening) {\r\n      if (this._placeholder) {\r\n        // unhide the placeholder\r\n        this._placeholder.style.opacity = '1';\r\n      }\r\n      this._animateToOpenState();\r\n    } else if (this.isClosing) {\r\n      this._animateToClosedState();\r\n    }\r\n\r\n    if (!this._useAnimation) {\r\n      this._onAnimationComplete();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _onAnimationComplete() {\r\n    const { pswp } = this;\r\n    this.isOpen = this.isOpening;\r\n    this.isClosed = this.isClosing;\r\n    this.isOpening = false;\r\n    this.isClosing = false;\r\n\r\n    pswp.dispatch(\r\n      this.isOpen ? 'openingAnimationEnd' : 'closingAnimationEnd'\r\n    );\r\n\r\n    // legacy event\r\n    pswp.dispatch(\r\n      /** @type {'initialZoomInEnd' | 'initialZoomOutEnd'} */\r\n      ('initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'))\r\n    );\r\n\r\n    if (this.isClosed) {\r\n      pswp.destroy();\r\n    } else if (this.isOpen) {\r\n      if (this._animateZoom && pswp.container) {\r\n        pswp.container.style.overflow = 'visible';\r\n        pswp.container.style.width = '100%';\r\n      }\r\n      pswp.currSlide?.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _animateToOpenState() {\r\n    const { pswp } = this;\r\n    if (this._animateZoom) {\r\n      if (this._croppedZoom && this._cropContainer1 && this._cropContainer2) {\r\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\r\n        this._animateTo(this._cropContainer2, 'transform', 'none');\r\n      }\r\n\r\n      if (pswp.currSlide) {\r\n        pswp.currSlide.zoomAndPanToInitial();\r\n        this._animateTo(\r\n          pswp.currSlide.container,\r\n          'transform',\r\n          pswp.currSlide.getCurrentTransform()\r\n        );\r\n      }\r\n    }\r\n\r\n    if (this._animateBgOpacity && pswp.bg) {\r\n      this._animateTo(pswp.bg, 'opacity', String(pswp.options.bgOpacity));\r\n    }\r\n\r\n    if (this._animateRootOpacity && pswp.element) {\r\n      this._animateTo(pswp.element, 'opacity', '1');\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _animateToClosedState() {\r\n    const { pswp } = this;\r\n\r\n    if (this._animateZoom) {\r\n      this._setClosedStateZoomPan(true);\r\n    }\r\n\r\n    // do not animate opacity if it's already at 0\r\n    if (this._animateBgOpacity && pswp.bgOpacity > 0.01 && pswp.bg) {\r\n      this._animateTo(pswp.bg, 'opacity', '0');\r\n    }\r\n\r\n    if (this._animateRootOpacity && pswp.element) {\r\n      this._animateTo(pswp.element, 'opacity', '0');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {boolean} [animate]\r\n   */\r\n  _setClosedStateZoomPan(animate) {\r\n    if (!this._thumbBounds) return;\r\n\r\n    const { pswp } = this;\r\n    const { innerRect } = this._thumbBounds;\r\n    const { currSlide, viewportSize } = pswp;\r\n\r\n    if (this._croppedZoom && innerRect && this._cropContainer1 && this._cropContainer2) {\r\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\r\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\r\n      const containerTwoPanX = viewportSize.x - innerRect.w;\r\n      const containerTwoPanY = viewportSize.y - innerRect.h;\r\n\r\n\r\n      if (animate) {\r\n        this._animateTo(\r\n          this._cropContainer1,\r\n          'transform',\r\n          toTransformString(containerOnePanX, containerOnePanY)\r\n        );\r\n\r\n        this._animateTo(\r\n          this._cropContainer2,\r\n          'transform',\r\n          toTransformString(containerTwoPanX, containerTwoPanY)\r\n        );\r\n      } else {\r\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\r\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\r\n      }\r\n    }\r\n\r\n    if (currSlide) {\r\n      equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\r\n      currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\r\n      if (animate) {\r\n        this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\r\n      } else {\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {HTMLElement} target\r\n   * @param {'transform' | 'opacity'} prop\r\n   * @param {string} propValue\r\n   */\r\n  _animateTo(target, prop, propValue) {\r\n    if (!this._duration) {\r\n      target.style[prop] = propValue;\r\n      return;\r\n    }\r\n\r\n    const { animations } = this.pswp;\r\n    /** @type {AnimationProps} */\r\n    const animProps = {\r\n      duration: this._duration,\r\n      easing: this.pswp.options.easing,\r\n      onComplete: () => {\r\n        if (!animations.activeAnimations.length) {\r\n          this._onAnimationComplete();\r\n        }\r\n      },\r\n      target,\r\n    };\r\n    animProps[prop] = propValue;\r\n    animations.startTransition(animProps);\r\n  }\r\n}\n\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('./slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('./slide/zoom-level.js').ZoomLevelOption} ZoomLevelOption */\r\n/** @typedef {import('./ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('./main-scroll.js').ItemHolder} ItemHolder */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n/** @typedef {import('./slide/get-thumb-bounds').Bounds} Bounds */\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('./core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('./core/eventable.js').AugmentedEvent<T>} AugmentedEvent<T>\r\n */\r\n\r\n/** @typedef {{ x: number; y: number; id?: string | number }} Point */\r\n/** @typedef {{ top: number; bottom: number; left: number; right: number }} Padding */\r\n/** @typedef {SlideData[]} DataSourceArray */\r\n/** @typedef {{ gallery: HTMLElement; items?: HTMLElement[] }} DataSourceObject */\r\n/** @typedef {DataSourceArray | DataSourceObject} DataSource */\r\n/** @typedef {(point: Point, originalEvent: PointerEvent) => void} ActionFn */\r\n/** @typedef {'close' | 'next' | 'zoom' | 'zoom-or-close' | 'toggle-controls'} ActionType */\r\n/** @typedef {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} PhotoSwipeModule */\r\n/** @typedef {PhotoSwipeModule | Promise<PhotoSwipeModule> | (() => Promise<PhotoSwipeModule>)} PhotoSwipeModuleOption */\r\n\r\n/**\r\n * @typedef {string | NodeListOf<HTMLElement> | HTMLElement[] | HTMLElement} ElementProvider\r\n */\r\n\r\n/** @typedef {Partial<PreparedPhotoSwipeOptions>} PhotoSwipeOptions https://photoswipe.com/options/ */\r\n/**\r\n * @typedef {Object} PreparedPhotoSwipeOptions\r\n *\r\n * @prop {DataSource} [dataSource]\r\n * Pass an array of any items via dataSource option. Its length will determine amount of slides\r\n * (which may be modified further from numItems event).\r\n *\r\n * Each item should contain data that you need to generate slide\r\n * (for image slide it would be src (image URL), width (image width), height, srcset, alt).\r\n *\r\n * If these properties are not present in your initial array, you may \"pre-parse\" each item from itemData filter.\r\n *\r\n * @prop {number} bgOpacity\r\n * Background backdrop opacity, always define it via this option and not via CSS rgba color.\r\n *\r\n * @prop {number} spacing\r\n * Spacing between slides. Defined as ratio relative to the viewport width (0.1 = 10% of viewport).\r\n *\r\n * @prop {boolean} allowPanToNext\r\n * Allow swipe navigation to the next slide when the current slide is zoomed. Does not apply to mouse events.\r\n *\r\n * @prop {boolean} loop\r\n * If set to true you'll be able to swipe from the last to the first image.\r\n * Option is always false when there are less than 3 slides.\r\n *\r\n * @prop {boolean} [wheelToZoom]\r\n * By default PhotoSwipe zooms image with ctrl-wheel, if you enable this option - image will zoom just via wheel.\r\n *\r\n * @prop {boolean} pinchToClose\r\n * Pinch touch gesture to close the gallery.\r\n *\r\n * @prop {boolean} closeOnVerticalDrag\r\n * Vertical drag gesture to close the PhotoSwipe.\r\n *\r\n * @prop {Padding} [padding]\r\n * Slide area padding (in pixels).\r\n *\r\n * @prop {(viewportSize: Point, itemData: SlideData, index: number) => Padding} [paddingFn]\r\n * The option is checked frequently, so make sure it's performant. Overrides padding option if defined. For example:\r\n *\r\n * @prop {number | false} hideAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} showAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} zoomAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {string} easing\r\n * String, 'cubic-bezier(.4,0,.22,1)'. CSS easing function for open/close/zoom transitions.\r\n *\r\n * @prop {boolean} escKey\r\n * Esc key to close.\r\n *\r\n * @prop {boolean} arrowKeys\r\n * Left/right arrow keys for navigation.\r\n *\r\n * @prop {boolean} returnFocus\r\n * Restore focus the last active element after PhotoSwipe is closed.\r\n *\r\n * @prop {boolean} clickToCloseNonZoomable\r\n * If image is not zoomable (for example, smaller than viewport) it can be closed by clicking on it.\r\n *\r\n * @prop {ActionType | ActionFn | false} imageClickAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} bgClickAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} tapAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} doubleTapAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {number} preloaderDelay\r\n * Delay before the loading indicator will be displayed,\r\n * if image is loaded during it - the indicator will not be displayed at all. Can be zero.\r\n *\r\n * @prop {string} indexIndicatorSep\r\n * Used for slide count indicator (\"1 of 10 \").\r\n *\r\n * @prop {(options: PhotoSwipeOptions, pswp: PhotoSwipeBase) => Point} [getViewportSizeFn]\r\n * A function that should return slide viewport width and height, in format {x: 100, y: 100}.\r\n *\r\n * @prop {string} errorMsg\r\n * Message to display when the image wasn't able to load. If you need to display HTML - use contentErrorElement filter.\r\n *\r\n * @prop {[number, number]} preload\r\n * Lazy loading of nearby slides based on direction of movement. Should be an array with two integers,\r\n * first one - number of items to preload before the current image, second one - after the current image.\r\n * Two nearby images are always loaded.\r\n *\r\n * @prop {string} [mainClass]\r\n * Class that will be added to the root element of PhotoSwipe, may contain multiple separated by space.\r\n * Example on Styling page.\r\n *\r\n * @prop {HTMLElement} [appendToEl]\r\n * Element to which PhotoSwipe dialog will be appended when it opens.\r\n *\r\n * @prop {number} maxWidthToAnimate\r\n * Maximum width of image to animate, if initial rendered image width\r\n * is larger than this value - the opening/closing transition will be automatically disabled.\r\n *\r\n * @prop {string} [closeTitle]\r\n * Translating\r\n *\r\n * @prop {string} [zoomTitle]\r\n * Translating\r\n *\r\n * @prop {string} [arrowPrevTitle]\r\n * Translating\r\n *\r\n * @prop {string} [arrowNextTitle]\r\n * Translating\r\n *\r\n * @prop {'zoom' | 'fade' | 'none'} [showHideAnimationType]\r\n * To adjust opening or closing transition type use lightbox option `showHideAnimationType` (`String`).\r\n * It supports three values - `zoom` (default), `fade` (default if there is no thumbnail) and `none`.\r\n *\r\n * Animations are automatically disabled if user `(prefers-reduced-motion: reduce)`.\r\n *\r\n * @prop {number} index\r\n * Defines start slide index.\r\n *\r\n * @prop {(e: MouseEvent) => number} [getClickedIndexFn]\r\n *\r\n * @prop {boolean} [arrowPrev]\r\n * @prop {boolean} [arrowNext]\r\n * @prop {boolean} [zoom]\r\n * @prop {boolean} [close]\r\n * @prop {boolean} [counter]\r\n *\r\n * @prop {string} [arrowPrevSVG]\r\n * @prop {string} [arrowNextSVG]\r\n * @prop {string} [zoomSVG]\r\n * @prop {string} [closeSVG]\r\n * @prop {string} [counterSVG]\r\n *\r\n * @prop {string} [arrowPrevTitle]\r\n * @prop {string} [arrowNextTitle]\r\n * @prop {string} [zoomTitle]\r\n * @prop {string} [closeTitle]\r\n * @prop {string} [counterTitle]\r\n *\r\n * @prop {ZoomLevelOption} [initialZoomLevel]\r\n * @prop {ZoomLevelOption} [secondaryZoomLevel]\r\n * @prop {ZoomLevelOption} [maxZoomLevel]\r\n *\r\n * @prop {boolean} [mouseMovePan]\r\n * @prop {Point | null} [initialPointerPos]\r\n * @prop {boolean} [showHideOpacity]\r\n *\r\n * @prop {PhotoSwipeModuleOption} [pswpModule]\r\n * @prop {() => Promise<any>} [openPromise]\r\n * @prop {boolean} [preloadFirstSlide]\r\n * @prop {ElementProvider} [gallery]\r\n * @prop {string} [gallerySelector]\r\n * @prop {ElementProvider} [children]\r\n * @prop {string} [childSelector]\r\n * @prop {string | false} [thumbSelector]\r\n */\r\n\r\n/** @type {PreparedPhotoSwipeOptions} */\r\nconst defaultOptions = {\r\n  allowPanToNext: true,\r\n  spacing: 0.1,\r\n  loop: true,\r\n  pinchToClose: true,\r\n  closeOnVerticalDrag: true,\r\n  hideAnimationDuration: 333,\r\n  showAnimationDuration: 333,\r\n  zoomAnimationDuration: 333,\r\n  escKey: true,\r\n  arrowKeys: true,\r\n  returnFocus: true,\r\n  maxWidthToAnimate: 4000,\r\n  clickToCloseNonZoomable: true,\r\n  imageClickAction: 'zoom-or-close',\r\n  bgClickAction: 'close',\r\n  tapAction: 'toggle-controls',\r\n  doubleTapAction: 'zoom',\r\n  indexIndicatorSep: ' / ',\r\n  preloaderDelay: 2000,\r\n  bgOpacity: 0.8,\r\n\r\n  index: 0,\r\n  errorMsg: 'The image cannot be loaded',\r\n  preload: [1, 2],\r\n  easing: 'cubic-bezier(.4,0,.22,1)'\r\n};\r\n\r\n/**\r\n * PhotoSwipe Core\r\n */\r\nclass PhotoSwipe extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} [options]\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    this.options = this._prepareOptions(options || {});\r\n\r\n    /**\r\n     * offset of viewport relative to document\r\n     *\r\n     * @type {Point}\r\n     */\r\n    this.offset = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * @type {Point}\r\n     * @private\r\n     */\r\n    this._prevViewportSize = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * Size of scrollable PhotoSwipe viewport\r\n     *\r\n     * @type {Point}\r\n     */\r\n    this.viewportSize = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * background (backdrop) opacity\r\n     */\r\n    this.bgOpacity = 1;\r\n    this.currIndex = 0;\r\n    this.potentialIndex = 0;\r\n    this.isOpen = false;\r\n    this.isDestroying = false;\r\n    this.hasMouse = false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {SlideData}\r\n     */\r\n    this._initialItemData = {};\r\n    /** @type {Bounds | undefined} */\r\n    this._initialThumbBounds = undefined;\r\n\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.topBar = undefined;\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.element = undefined;\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.template = undefined;\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.container = undefined;\r\n    /** @type {HTMLElement | undefined} */\r\n    this.scrollWrap = undefined;\r\n    /** @type {Slide | undefined} */\r\n    this.currSlide = undefined;\r\n\r\n    this.events = new DOMEvents();\r\n    this.animations = new Animations();\r\n    this.mainScroll = new MainScroll(this);\r\n    this.gestures = new Gestures(this);\r\n    this.opener = new Opener(this);\r\n    this.keyboard = new Keyboard(this);\r\n    this.contentLoader = new ContentLoader(this);\r\n  }\r\n\r\n  /** @returns {boolean} */\r\n  init() {\r\n    if (this.isOpen || this.isDestroying) {\r\n      return false;\r\n    }\r\n\r\n    this.isOpen = true;\r\n    this.dispatch('init'); // legacy\r\n    this.dispatch('beforeOpen');\r\n\r\n    this._createMainStructure();\r\n\r\n    // add classes to the root element of PhotoSwipe\r\n    let rootClasses = 'pswp--open';\r\n    if (this.gestures.supportsTouch) {\r\n      rootClasses += ' pswp--touch';\r\n    }\r\n    if (this.options.mainClass) {\r\n      rootClasses += ' ' + this.options.mainClass;\r\n    }\r\n    if (this.element) {\r\n      this.element.className += ' ' + rootClasses;\r\n    }\r\n\r\n    this.currIndex = this.options.index || 0;\r\n    this.potentialIndex = this.currIndex;\r\n    this.dispatch('firstUpdate'); // starting index can be modified here\r\n\r\n    // initialize scroll wheel handler to block the scroll\r\n    this.scrollWheel = new ScrollWheel(this);\r\n\r\n    // sanitize index\r\n    if (Number.isNaN(this.currIndex)\r\n        || this.currIndex < 0\r\n        || this.currIndex >= this.getNumItems()) {\r\n      this.currIndex = 0;\r\n    }\r\n\r\n    if (!this.gestures.supportsTouch) {\r\n      // enable mouse features if no touch support detected\r\n      this.mouseDetected();\r\n    }\r\n\r\n    // causes forced synchronous layout\r\n    this.updateSize();\r\n\r\n    this.offset.y = window.pageYOffset;\r\n\r\n    this._initialItemData = this.getItemData(this.currIndex);\r\n    this.dispatch('gettingData', {\r\n      index: this.currIndex,\r\n      data: this._initialItemData,\r\n      slide: undefined\r\n    });\r\n\r\n    // *Layout* - calculate size and position of elements here\r\n    this._initialThumbBounds = this.getThumbBounds();\r\n    this.dispatch('initialLayout');\r\n\r\n    this.on('openingAnimationEnd', () => {\r\n      const { itemHolders } = this.mainScroll;\r\n\r\n      // Add content to the previous and next slide\r\n      if (itemHolders[0]) {\r\n        itemHolders[0].el.style.display = 'block';\r\n        this.setContent(itemHolders[0], this.currIndex - 1);\r\n      }\r\n      if (itemHolders[2]) {\r\n        itemHolders[2].el.style.display = 'block';\r\n        this.setContent(itemHolders[2], this.currIndex + 1);\r\n      }\r\n\r\n      this.appendHeavy();\r\n\r\n      this.contentLoader.updateLazy();\r\n\r\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\r\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\r\n      this.dispatch('bindEvents');\r\n    });\r\n\r\n    // set content for center slide (first time)\r\n    if (this.mainScroll.itemHolders[1]) {\r\n      this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\r\n    }\r\n    this.dispatch('change');\r\n\r\n    this.opener.open();\r\n\r\n    this.dispatch('afterInit');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {number} index\r\n   * @returns {number}\r\n   */\r\n  getLoopedIndex(index) {\r\n    const numSlides = this.getNumItems();\r\n\r\n    if (this.options.loop) {\r\n      if (index > numSlides - 1) {\r\n        index -= numSlides;\r\n      }\r\n\r\n      if (index < 0) {\r\n        index += numSlides;\r\n      }\r\n    }\r\n\r\n    return clamp(index, 0, numSlides - 1);\r\n  }\r\n\r\n  appendHeavy() {\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      itemHolder.slide?.appendHeavy();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Change the slide\r\n   * @param {number} index New index\r\n   */\r\n  goTo(index) {\r\n    this.mainScroll.moveIndexBy(\r\n      this.getLoopedIndex(index) - this.potentialIndex\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Go to the next slide.\r\n   */\r\n  next() {\r\n    this.goTo(this.potentialIndex + 1);\r\n  }\r\n\r\n  /**\r\n   * Go to the previous slide.\r\n   */\r\n  prev() {\r\n    this.goTo(this.potentialIndex - 1);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js zoomTo\r\n   *\r\n   * @param {Parameters<Slide['zoomTo']>} args\r\n   */\r\n  zoomTo(...args) {\r\n    this.currSlide?.zoomTo(...args);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js toggleZoom\r\n   */\r\n  toggleZoom() {\r\n    this.currSlide?.toggleZoom();\r\n  }\r\n\r\n  /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */\r\n  close() {\r\n    if (!this.opener.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isDestroying = true;\r\n\r\n    this.dispatch('close');\r\n\r\n    this.events.removeAll();\r\n    this.opener.close();\r\n  }\r\n\r\n  /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */\r\n  destroy() {\r\n    if (!this.isDestroying) {\r\n      this.options.showHideAnimationType = 'none';\r\n      this.close();\r\n      return;\r\n    }\r\n\r\n    this.dispatch('destroy');\r\n\r\n    this._listeners = {};\r\n\r\n    if (this.scrollWrap) {\r\n      this.scrollWrap.ontouchmove = null;\r\n      this.scrollWrap.ontouchend = null;\r\n    }\r\n\r\n    this.element?.remove();\r\n\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      itemHolder.slide?.destroy();\r\n    });\r\n\r\n    this.contentLoader.destroy();\r\n    this.events.removeAll();\r\n  }\r\n\r\n  /**\r\n   * Refresh/reload content of a slide by its index\r\n   *\r\n   * @param {number} slideIndex\r\n   */\r\n  refreshSlideContent(slideIndex) {\r\n    this.contentLoader.removeByIndex(slideIndex);\r\n    this.mainScroll.itemHolders.forEach((itemHolder, i) => {\r\n      let potentialHolderIndex = (this.currSlide?.index ?? 0) - 1 + i;\r\n      if (this.canLoop()) {\r\n        potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);\r\n      }\r\n      if (potentialHolderIndex === slideIndex) {\r\n        // set the new slide content\r\n        this.setContent(itemHolder, slideIndex, true);\r\n\r\n        // activate the new slide if it's current\r\n        if (i === 1) {\r\n          this.currSlide = itemHolder.slide;\r\n          itemHolder.slide?.setIsActive(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.dispatch('change');\r\n  }\r\n\r\n\r\n  /**\r\n   * Set slide content\r\n   *\r\n   * @param {ItemHolder} holder mainScroll.itemHolders array item\r\n   * @param {number} index Slide index\r\n   * @param {boolean} [force] If content should be set even if index wasn't changed\r\n   */\r\n  setContent(holder, index, force) {\r\n    if (this.canLoop()) {\r\n      index = this.getLoopedIndex(index);\r\n    }\r\n\r\n    if (holder.slide) {\r\n      if (holder.slide.index === index && !force) {\r\n        // exit if holder already contains this slide\r\n        // this could be common when just three slides are used\r\n        return;\r\n      }\r\n\r\n      // destroy previous slide\r\n      holder.slide.destroy();\r\n      holder.slide = undefined;\r\n    }\r\n\r\n    // exit if no loop and index is out of bounds\r\n    if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {\r\n      return;\r\n    }\r\n\r\n    const itemData = this.getItemData(index);\r\n    holder.slide = new Slide(itemData, index, this);\r\n\r\n    // set current slide\r\n    if (index === this.currIndex) {\r\n      this.currSlide = holder.slide;\r\n    }\r\n\r\n    holder.slide.append(holder.el);\r\n  }\r\n\r\n  /** @returns {Point} */\r\n  getViewportCenterPoint() {\r\n    return {\r\n      x: this.viewportSize.x / 2,\r\n      y: this.viewportSize.y / 2\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param {boolean} [force] Update size even if size of viewport was not changed.\r\n   */\r\n  updateSize(force) {\r\n    // let item;\r\n    // let itemIndex;\r\n\r\n    if (this.isDestroying) {\r\n      // exit if PhotoSwipe is closed or closing\r\n      // (to avoid errors, as resize event might be delayed)\r\n      return;\r\n    }\r\n\r\n    //const newWidth = this.scrollWrap.clientWidth;\r\n    //const newHeight = this.scrollWrap.clientHeight;\r\n\r\n    const newViewportSize = getViewportSize(this.options, this);\r\n\r\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\r\n      // Exit if dimensions were not changed\r\n      return;\r\n    }\r\n\r\n    //this._prevViewportSize.x = newWidth;\r\n    //this._prevViewportSize.y = newHeight;\r\n    equalizePoints(this._prevViewportSize, newViewportSize);\r\n\r\n    this.dispatch('beforeResize');\r\n\r\n    equalizePoints(this.viewportSize, this._prevViewportSize);\r\n\r\n    this._updatePageScrollOffset();\r\n\r\n    this.dispatch('viewportSize');\r\n\r\n    // Resize slides only after opener animation is finished\r\n    // and don't re-calculate size on inital size update\r\n    this.mainScroll.resize(this.opener.isOpen);\r\n\r\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\r\n      this.mouseDetected();\r\n    }\r\n\r\n    this.dispatch('resize');\r\n  }\r\n\r\n  /**\r\n   * @param {number} opacity\r\n   */\r\n  applyBgOpacity(opacity) {\r\n    this.bgOpacity = Math.max(opacity, 0);\r\n    if (this.bg) {\r\n      this.bg.style.opacity = String(this.bgOpacity * this.options.bgOpacity);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether mouse is detected\r\n   */\r\n  mouseDetected() {\r\n    if (!this.hasMouse) {\r\n      this.hasMouse = true;\r\n      this.element?.classList.add('pswp--has_mouse');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page resize event handler\r\n   *\r\n   * @private\r\n   */\r\n  _handlePageResize() {\r\n    this.updateSize();\r\n\r\n    // In iOS webview, if element size depends on document size,\r\n    // it'll be measured incorrectly in resize event\r\n    //\r\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\r\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\r\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\r\n      setTimeout(() => {\r\n        this.updateSize();\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   *\r\n   * @private\r\n   */\r\n  _updatePageScrollOffset() {\r\n    this.setScrollOffset(0, window.pageYOffset);\r\n  }\r\n\r\n  /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\r\n  setScrollOffset(x, y) {\r\n    this.offset.x = x;\r\n    this.offset.y = y;\r\n    this.dispatch('updateScrollOffset');\r\n  }\r\n\r\n  /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   *\r\n   * @private\r\n   */\r\n  _createMainStructure() {\r\n    // root DOM element of PhotoSwipe (.pswp)\r\n    this.element = createElement('pswp', 'div');\r\n    this.element.setAttribute('tabindex', '-1');\r\n    this.element.setAttribute('role', 'dialog');\r\n\r\n    // template is legacy prop\r\n    this.template = this.element;\r\n\r\n    // Background is added as a separate element,\r\n    // as animating opacity is faster than animating rgba()\r\n    this.bg = createElement('pswp__bg', 'div', this.element);\r\n    this.scrollWrap = createElement('pswp__scroll-wrap', 'section', this.element);\r\n    this.container = createElement('pswp__container', 'div', this.scrollWrap);\r\n\r\n    // aria pattern: carousel\r\n    this.scrollWrap.setAttribute('aria-roledescription', 'carousel');\r\n    this.container.setAttribute('aria-live', 'off');\r\n    this.container.setAttribute('id', 'pswp__items');\r\n\r\n    this.mainScroll.appendHolders();\r\n\r\n    this.ui = new UI(this);\r\n    this.ui.init();\r\n\r\n    // append to DOM\r\n    (this.options.appendToEl || document.body).appendChild(this.element);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   *\r\n   * @returns {Bounds | undefined}\r\n   */\r\n  getThumbBounds() {\r\n    return getThumbBounds(\r\n      this.currIndex,\r\n      this.currSlide ? this.currSlide.data : this._initialItemData,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If the PhotoSwipe can have continuous loop\r\n   * @returns Boolean\r\n   */\r\n  canLoop() {\r\n    return (this.options.loop && this.getNumItems() > 2);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PhotoSwipeOptions} options\r\n   * @returns {PreparedPhotoSwipeOptions}\r\n   */\r\n  _prepareOptions(options) {\r\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\r\n      options.showHideAnimationType = 'none';\r\n      options.zoomAnimationDuration = 0;\r\n    }\r\n\r\n    /** @type {PreparedPhotoSwipeOptions} */\r\n    return {\r\n      ...defaultOptions,\r\n      ...options\r\n    };\r\n  }\r\n}\n\nexport { PhotoSwipe as default };\n//# sourceMappingURL=photoswipe.esm.js.map\n","/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/**\r\n * @template {keyof HTMLElementTagNameMap} T\r\n * @param {string} className\r\n * @param {T} tagName\r\n * @param {Node} [appendToEl]\r\n * @returns {HTMLElementTagNameMap[T]}\r\n */\r\nexport function createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName);\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  return el;\r\n}\r\n\r\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\r\nexport function equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n/**\r\n * @param {Point} p\r\n */\r\nexport function roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {number}\r\n */\r\nexport function getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are equal\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {boolean}\r\n */\r\nexport function pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n * @returns {number}\r\n */\r\nexport function clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n * @returns {string}\r\n */\r\nexport function toTransformString(x, y, scale) {\r\n  let propValue = `translate3d(${x}px,${y || 0}px,0)`;\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ` scale3d(${scale},${scale},1)`;\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n */\r\nexport function setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string} [prop] CSS property to animate\r\n * @param {number} [duration] in ms\r\n * @param {string} [ease] CSS easing function\r\n */\r\nexport function setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? `${prop} ${duration}ms ${ease || defaultCSSEasing}`\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nexport function setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? `${w}px` : w;\r\n  el.style.height = (typeof h === 'number') ? `${h}px` : h;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nexport function removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\r\nexport function decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode().catch(() => {});\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nexport const LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n * @returns {boolean}\r\n */\r\nexport function specialKeyUsed(e) {\r\n  return ('button' in e && e.button === 1) || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey;\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} [option]\r\n * @param {string} [legacySelector]\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nexport function getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if variable is PhotoSwipe class\r\n *\r\n * @param {any} fn\r\n * @returns {boolean}\r\n */\r\nexport function isPswpClass(fn) {\r\n  return typeof fn === 'function'\r\n    && fn.prototype\r\n    && fn.prototype.goTo;\r\n}\r\n\r\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\r\nexport function isSafari() {\r\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\r\n}\r\n\r\n","// Detect passive event listener support\r\nlet supportsPassive = false;\r\n/* eslint-disable */\r\ntry {\r\n  /* @ts-ignore */\r\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\r\n    get: () => {\r\n      supportsPassive = true;\r\n    }\r\n  }));\r\n} catch (e) {}\r\n/* eslint-enable */\r\n\r\n/**\r\n * @typedef {Object} PoolItem\r\n * @prop {HTMLElement | Window | Document | undefined | null} target\r\n * @prop {string} type\r\n * @prop {EventListenerOrEventListenerObject} listener\r\n * @prop {boolean} [passive]\r\n */\r\n\r\nclass DOMEvents {\r\n  constructor() {\r\n    /**\r\n     * @type {PoolItem[]}\r\n     * @private\r\n     */\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type Can be multiple, separated by space.\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   */\r\n  add(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive);\r\n  }\r\n\r\n  /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   */\r\n  remove(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive, true);\r\n  }\r\n\r\n  /**\r\n   * Removes all bound events\r\n   */\r\n  removeAll() {\r\n    this._pool.forEach((poolItem) => {\r\n      this._toggleListener(\r\n        poolItem.target,\r\n        poolItem.type,\r\n        poolItem.listener,\r\n        poolItem.passive,\r\n        true,\r\n        true\r\n      );\r\n    });\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds or removes event\r\n   *\r\n   * @private\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   * @param {boolean} [unbind] Whether the event should be added or removed\r\n   * @param {boolean} [skipPool] Whether events pool should be skipped\r\n   */\r\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    const methodName = unbind ? 'removeEventListener' : 'addEventListener';\r\n    const types = type.split(' ');\r\n    types.forEach((eType) => {\r\n      if (eType) {\r\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\r\n        // so developer doesn't need to do this manually\r\n        if (!skipPool) {\r\n          if (unbind) {\r\n            // Remove from the events pool\r\n            this._pool = this._pool.filter((poolItem) => {\r\n              return poolItem.type !== eType\r\n                || poolItem.listener !== listener\r\n                || poolItem.target !== target;\r\n            });\r\n          } else {\r\n            // Add to the events pool\r\n            this._pool.push({\r\n              target,\r\n              type: eType,\r\n              listener,\r\n              passive\r\n            });\r\n          }\r\n        }\r\n\r\n        // most PhotoSwipe events call preventDefault,\r\n        // and we do not need browser to scroll the page\r\n        const eventOptions = supportsPassive ? { passive: (passive || false) } : false;\r\n\r\n        target[methodName](\r\n          eType,\r\n          listener,\r\n          eventOptions\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default DOMEvents;\r\n","/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipeBase} pswp\r\n * @returns {Point}\r\n */\r\nexport function getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {Point} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nexport function parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  let paddingValue = 0;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return Number(paddingValue) || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {Point} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n * @returns {Point}\r\n */\r\nexport function getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\r\n","import { clamp } from '../util/util.js';\r\nimport { parsePaddingOption } from '../util/viewport-size.js';\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {Record<Axis, number>} Point */\r\n/** @typedef {'x' | 'y'} Axis */\r\n\r\n/**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */\r\nclass PanBounds {\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  constructor(slide) {\r\n    this.slide = slide;\r\n    this.currZoomLevel = 1;\r\n    this.center = /** @type {Point} */ { x: 0, y: 0 };\r\n    this.max = /** @type {Point} */ { x: 0, y: 0 };\r\n    this.min = /** @type {Point} */ { x: 0, y: 0 };\r\n  }\r\n\r\n  /**\r\n   * _getItemBounds\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  update(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n\r\n    if (!this.slide.width) {\r\n      this.reset();\r\n    } else {\r\n      this._updateAxis('x');\r\n      this._updateAxis('y');\r\n      this.slide.pswp.dispatch('calcBounds', { slide: this.slide });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * _calculateItemBoundsForAxis\r\n   *\r\n   * @param {Axis} axis\r\n   */\r\n  _updateAxis(axis) {\r\n    const { pswp } = this.slide;\r\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\r\n    const paddingProp = axis === 'x' ? 'left' : 'top';\r\n    const padding = parsePaddingOption(\r\n      paddingProp,\r\n      pswp.options,\r\n      pswp.viewportSize,\r\n      this.slide.data,\r\n      this.slide.index\r\n    );\r\n\r\n    const panAreaSize = this.slide.panAreaSize[axis];\r\n\r\n    // Default position of element.\r\n    // By default, it is center of viewport:\r\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding;\r\n\r\n    // maximum pan position\r\n    this.max[axis] = (elSize > panAreaSize)\r\n      ? Math.round(panAreaSize - elSize) + padding\r\n      : this.center[axis];\r\n\r\n    // minimum pan position\r\n    this.min[axis] = (elSize > panAreaSize)\r\n      ? padding\r\n      : this.center[axis];\r\n  }\r\n\r\n  // _getZeroBounds\r\n  reset() {\r\n    this.center.x = 0;\r\n    this.center.y = 0;\r\n    this.max.x = 0;\r\n    this.max.y = 0;\r\n    this.min.x = 0;\r\n    this.min.y = 0;\r\n  }\r\n\r\n  /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {Axis} axis x or y\r\n   * @param {number} panOffset\r\n   * @returns {number}\r\n   */\r\n  correctPan(axis, panOffset) { // checkPanBounds\r\n    return clamp(panOffset, this.max[axis], this.min[axis]);\r\n  }\r\n}\r\n\r\nexport default PanBounds;\r\n","const MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe} [pswp] PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n    /** @type { Point | null } */\r\n    this.panAreaSize = null;\r\n    /** @type { Point | null } */\r\n    this.elementSize = null;\r\n    this.fit = 1;\r\n    this.fill = 1;\r\n    this.vFill = 1;\r\n    this.initial = 1;\r\n    this.secondary = 1;\r\n    this.max = 1;\r\n    this.min = 1;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {Point} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    /** @type {Point} */\r\n    const elementSize = { x: maxWidth, y: maxHeight };\r\n    this.elementSize = elementSize;\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = panAreaSize.x / elementSize.x;\r\n    const vRatio = panAreaSize.y / elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   * @returns { number | undefined }\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (\r\n      optionPrefix + 'ZoomLevel'\r\n    );\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (this.elementSize && currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return this._parseZoomLevelOption('max') || Math.max(1, this.fit * 4);\r\n  }\r\n}\r\n\r\nexport default ZoomLevel;\r\n","/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/**\r\n * @typedef {_SlideData & Record<string, any>} SlideData\r\n * @typedef {Object} _SlideData\r\n * @prop {HTMLElement} [element] thumbnail element\r\n * @prop {string} [src] image URL\r\n * @prop {string} [srcset] image srcset\r\n * @prop {number} [w] image width (deprecated)\r\n * @prop {number} [h] image height (deprecated)\r\n * @prop {number} [width] image width\r\n * @prop {number} [height] image height\r\n * @prop {string} [msrc] placeholder image URL that's displayed before large image is loaded\r\n * @prop {string} [alt] image alt text\r\n * @prop {boolean} [thumbCropped] whether thumbnail is cropped client-side or not\r\n * @prop {string} [html] html content of a slide\r\n * @prop {'image' | 'html' | string} [type] slide type\r\n */\r\n\r\nimport {\r\n  createElement,\r\n  setTransform,\r\n  equalizePoints,\r\n  roundPoint,\r\n  toTransformString,\r\n  clamp,\r\n} from '../util/util.js';\r\n\r\nimport PanBounds from './pan-bounds.js';\r\nimport ZoomLevel from './zoom-level.js';\r\nimport { getPanAreaSize } from '../util/viewport-size.js';\r\n\r\n/**\r\n * Renders and allows to control a single slide\r\n */\r\nclass Slide {\r\n  /**\r\n   * @param {SlideData} data\r\n   * @param {number} index\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(data, index, pswp) {\r\n    this.data = data;\r\n    this.index = index;\r\n    this.pswp = pswp;\r\n    this.isActive = (index === pswp.currIndex);\r\n    this.currentResolution = 0;\r\n    /** @type {Point} */\r\n    this.panAreaSize = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.pan = { x: 0, y: 0 };\r\n\r\n    this.isFirstSlide = (this.isActive && !pswp.opener.isOpen);\r\n\r\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\r\n\r\n    this.pswp.dispatch('gettingData', {\r\n      slide: this,\r\n      data: this.data,\r\n      index\r\n    });\r\n\r\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\r\n    this.container = createElement('pswp__zoom-wrap', 'div');\r\n    /** @type {HTMLElement | null} */\r\n    this.holderElement = null;\r\n\r\n    this.currZoomLevel = 1;\r\n    /** @type {number} */\r\n    this.width = this.content.width;\r\n    /** @type {number} */\r\n    this.height = this.content.height;\r\n    this.heavyAppended = false;\r\n    this.bounds = new PanBounds(this);\r\n\r\n    this.prevDisplayedWidth = -1;\r\n    this.prevDisplayedHeight = -1;\r\n\r\n    this.pswp.dispatch('slideInit', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {boolean} isActive\r\n   */\r\n  setIsActive(isActive) {\r\n    if (isActive && !this.isActive) {\r\n      // slide just became active\r\n      this.activate();\r\n    } else if (!isActive && this.isActive) {\r\n      // slide just became non-active\r\n      this.deactivate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Appends slide content to DOM\r\n   *\r\n   * @param {HTMLElement} holderElement\r\n   */\r\n  append(holderElement) {\r\n    this.holderElement = holderElement;\r\n\r\n    this.container.style.transformOrigin = '0 0';\r\n\r\n    // Slide appended to DOM\r\n    if (!this.data) {\r\n      return;\r\n    }\r\n\r\n    this.calculateSize();\r\n\r\n    this.load();\r\n    this.updateContentSize();\r\n    this.appendHeavy();\r\n\r\n    this.holderElement.appendChild(this.container);\r\n\r\n    this.zoomAndPanToInitial();\r\n\r\n    this.pswp.dispatch('firstZoomPan', { slide: this });\r\n\r\n    this.applyCurrentZoomPan();\r\n\r\n    this.pswp.dispatch('afterSetContent', { slide: this });\r\n\r\n    if (this.isActive) {\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  load() {\r\n    this.content.load(false);\r\n    this.pswp.dispatch('slideLoad', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */\r\n  appendHeavy() {\r\n    const { pswp } = this;\r\n    const appendHeavyNearby = true; // todo\r\n\r\n    // Avoid appending heavy elements during animations\r\n    if (this.heavyAppended\r\n        || !pswp.opener.isOpen\r\n        || pswp.mainScroll.isShifted()\r\n        || (!this.isActive && !appendHeavyNearby)) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('appendHeavy', { slide: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.heavyAppended = true;\r\n\r\n    this.content.append();\r\n\r\n    this.pswp.dispatch('appendHeavyContent', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */\r\n  activate() {\r\n    this.isActive = true;\r\n    this.appendHeavy();\r\n    this.content.activate();\r\n    this.pswp.dispatch('slideActivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */\r\n  deactivate() {\r\n    this.isActive = false;\r\n    this.content.deactivate();\r\n\r\n    if (this.currZoomLevel !== this.zoomLevels.initial) {\r\n      // allow filtering\r\n      this.calculateSize();\r\n    }\r\n\r\n    // reset zoom level\r\n    this.currentResolution = 0;\r\n    this.zoomAndPanToInitial();\r\n    this.applyCurrentZoomPan();\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('slideDeactivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */\r\n  destroy() {\r\n    this.content.hasSlide = false;\r\n    this.content.remove();\r\n    this.container.remove();\r\n    this.pswp.dispatch('slideDestroy', { slide: this });\r\n  }\r\n\r\n  resize() {\r\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\r\n      // Keep initial zoom level if it was before the resize,\r\n      // as well as when this slide is not active\r\n\r\n      // Reset position and scale to original state\r\n      this.calculateSize();\r\n      this.currentResolution = 0;\r\n      this.zoomAndPanToInitial();\r\n      this.applyCurrentZoomPan();\r\n      this.updateContentSize();\r\n    } else {\r\n      // readjust pan position if it's beyond the bounds\r\n      this.calculateSize();\r\n      this.bounds.update(this.currZoomLevel);\r\n      this.panTo(this.pan.x, this.pan.y);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {boolean} [force] if size should be updated even if dimensions weren't changed\r\n   */\r\n  updateContentSize(force) {\r\n    // Use initial zoom level\r\n    // if resolution is not defined (user didn't zoom yet)\r\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\r\n\r\n    if (!scaleMultiplier) {\r\n      return;\r\n    }\r\n\r\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\r\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\r\n\r\n    if (!this.sizeChanged(width, height) && !force) {\r\n      return;\r\n    }\r\n    this.content.setDisplayedSize(width, height);\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  sizeChanged(width, height) {\r\n    if (width !== this.prevDisplayedWidth\r\n        || height !== this.prevDisplayedHeight) {\r\n      this.prevDisplayedWidth = width;\r\n      this.prevDisplayedHeight = height;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /** @returns {HTMLImageElement | HTMLDivElement | null | undefined} */\r\n  getPlaceholderElement() {\r\n    return this.content.placeholder?.element;\r\n  }\r\n\r\n  /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param {number} destZoomLevel Destination zoom level.\r\n   * @param {Point} [centerPoint]\r\n   * Transform origin center point, or false if viewport center should be used.\r\n   * @param {number | false} [transitionDuration] Transition duration, may be set to 0.\r\n   * @param {boolean} [ignoreBounds] Minimum and maximum zoom levels will be ignored.\r\n   */\r\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\r\n    const { pswp } = this;\r\n    if (!this.isZoomable()\r\n        || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    pswp.dispatch('beforeZoomTo', {\r\n      destZoomLevel, centerPoint, transitionDuration\r\n    });\r\n\r\n    // stop all pan and zoom transitions\r\n    pswp.animations.stopAllPan();\r\n\r\n    // if (!centerPoint) {\r\n    //   centerPoint = pswp.getViewportCenterPoint();\r\n    // }\r\n\r\n    const prevZoomLevel = this.currZoomLevel;\r\n\r\n    if (!ignoreBounds) {\r\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\r\n    }\r\n\r\n    // if (transitionDuration === undefined) {\r\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\r\n    // }\r\n\r\n    this.setZoomLevel(destZoomLevel);\r\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\r\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\r\n    roundPoint(this.pan);\r\n\r\n    const finishTransition = () => {\r\n      this._setResolution(destZoomLevel);\r\n      this.applyCurrentZoomPan();\r\n    };\r\n\r\n    if (!transitionDuration) {\r\n      finishTransition();\r\n    } else {\r\n      pswp.animations.startTransition({\r\n        isPan: true,\r\n        name: 'zoomTo',\r\n        target: this.container,\r\n        transform: this.getCurrentTransform(),\r\n        onComplete: finishTransition,\r\n        duration: transitionDuration,\r\n        easing: pswp.options.easing\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} [centerPoint]\r\n   */\r\n  toggleZoom(centerPoint) {\r\n    this.zoomTo(\r\n      this.currZoomLevel === this.zoomLevels.initial\r\n        ? this.zoomLevels.secondary : this.zoomLevels.initial,\r\n      centerPoint,\r\n      this.pswp.options.zoomAnimationDuration\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  setZoomLevel(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n    this.bounds.update(this.currZoomLevel);\r\n  }\r\n\r\n  /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {'x' | 'y'} axis\r\n   * @param {Point} [point]\r\n   * point based on which zoom is performed, usually refers to the current mouse position,\r\n   * if false - viewport center will be used.\r\n   * @param {number} [prevZoomLevel] Zoom level before new zoom was applied.\r\n   * @returns {number}\r\n   */\r\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\r\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\r\n    if (totalPanDistance === 0) {\r\n      return this.bounds.center[axis];\r\n    }\r\n\r\n    if (!point) {\r\n      point = this.pswp.getViewportCenterPoint();\r\n    }\r\n\r\n    if (!prevZoomLevel) {\r\n      prevZoomLevel = this.zoomLevels.initial;\r\n    }\r\n\r\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\r\n    return this.bounds.correctPan(\r\n      axis,\r\n      (this.pan[axis] - point[axis]) * zoomFactor + point[axis]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {number} panX\r\n   * @param {number} panY\r\n   */\r\n  panTo(panX, panY) {\r\n    this.pan.x = this.bounds.correctPan('x', panX);\r\n    this.pan.y = this.bounds.correctPan('y', panY);\r\n    this.applyCurrentZoomPan();\r\n  }\r\n\r\n  /**\r\n   * If the slide in the current state can be panned by the user\r\n   * @returns {boolean}\r\n   */\r\n  isPannable() {\r\n    return Boolean(this.width) && (this.currZoomLevel > this.zoomLevels.fit);\r\n  }\r\n\r\n  /**\r\n   * If the slide can be zoomed\r\n   * @returns {boolean}\r\n   */\r\n  isZoomable() {\r\n    return Boolean(this.width) && this.content.isZoomable();\r\n  }\r\n\r\n  /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */\r\n  applyCurrentZoomPan() {\r\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\r\n    if (this === this.pswp.currSlide) {\r\n      this.pswp.dispatch('zoomPanUpdate', { slide: this });\r\n    }\r\n  }\r\n\r\n  zoomAndPanToInitial() {\r\n    this.currZoomLevel = this.zoomLevels.initial;\r\n\r\n    // pan according to the zoom level\r\n    this.bounds.update(this.currZoomLevel);\r\n    equalizePoints(this.pan, this.bounds.center);\r\n    this.pswp.dispatch('initialZoomPan', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} zoom\r\n   * @private\r\n   */\r\n  _applyZoomTransform(x, y, zoom) {\r\n    zoom /= this.currentResolution || this.zoomLevels.initial;\r\n    setTransform(this.container, x, y, zoom);\r\n  }\r\n\r\n  calculateSize() {\r\n    const { pswp } = this;\r\n\r\n    equalizePoints(\r\n      this.panAreaSize,\r\n      getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index)\r\n    );\r\n\r\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\r\n\r\n    pswp.dispatch('calcSlideSize', {\r\n      slide: this\r\n    });\r\n  }\r\n\r\n  /** @returns {string} */\r\n  getCurrentTransform() {\r\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\r\n    return toTransformString(this.pan.x, this.pan.y, scale);\r\n  }\r\n\r\n  /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in the highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {number} newResolution\r\n   */\r\n  _setResolution(newResolution) {\r\n    if (newResolution === this.currentResolution) {\r\n      return;\r\n    }\r\n\r\n    this.currentResolution = newResolution;\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('resolutionChanged');\r\n  }\r\n}\r\n\r\nexport default Slide;\r\n","import {\r\n  equalizePoints, roundPoint, clamp\r\n} from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst PAN_END_FRICTION = 0.35;\r\nconst VERTICAL_DRAG_FRICTION = 0.6;\r\n\r\n// 1 corresponds to the third of viewport height\r\nconst MIN_RATIO_TO_CLOSE = 0.4;\r\n\r\n// Minimum speed required to navigate\r\n// to next or previous slide\r\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\r\n\r\n/**\r\n * @param {number} initialVelocity\r\n * @param {number} decelerationRate\r\n * @returns {number}\r\n */\r\nfunction project(initialVelocity, decelerationRate) {\r\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\r\n}\r\n\r\n/**\r\n * Handles single pointer dragging\r\n */\r\nclass DragHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = gestures.pswp;\r\n    /** @type {Point} */\r\n    this.startPan = { x: 0, y: 0 };\r\n  }\r\n\r\n  start() {\r\n    if (this.pswp.currSlide) {\r\n      equalizePoints(this.startPan, this.pswp.currSlide.pan);\r\n    }\r\n    this.pswp.animations.stopAll();\r\n  }\r\n\r\n  change() {\r\n    const { p1, prevP1, dragAxis } = this.gestures;\r\n    const { currSlide } = this.pswp;\r\n\r\n    if (dragAxis === 'y'\r\n        && this.pswp.options.closeOnVerticalDrag\r\n        && (currSlide && currSlide.currZoomLevel <= currSlide.zoomLevels.fit)\r\n        && !this.gestures.isMultitouch) {\r\n      // Handle vertical drag to close\r\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\r\n      if (!this.pswp.dispatch('verticalDrag', { panY }).defaultPrevented) {\r\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\r\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\r\n        this.pswp.applyBgOpacity(bgOpacity);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\r\n      if (!mainScrollChanged) {\r\n        this._panOrMoveMainScroll('y');\r\n\r\n        if (currSlide) {\r\n          roundPoint(currSlide.pan);\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  end() {\r\n    const { velocity } = this.gestures;\r\n    const { mainScroll, currSlide } = this.pswp;\r\n    let indexDiff = 0;\r\n\r\n    this.pswp.animations.stopAll();\r\n\r\n    // Handle main scroll if it's shifted\r\n    if (mainScroll.isShifted()) {\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX();\r\n\r\n      // Ratio between 0 and 1:\r\n      // 0 - slide is not visible at all,\r\n      // 0.5 - half of the slide is visible\r\n      // 1 - slide is fully visible\r\n      const currentSlideVisibilityRatio = (mainScrollShiftDiff / this.pswp.viewportSize.x);\r\n\r\n      // Go next slide.\r\n      //\r\n      // - if velocity and its direction is matched,\r\n      //   and we see at least tiny part of the next slide\r\n      //\r\n      // - or if we see less than 50% of the current slide\r\n      //   and velocity is close to 0\r\n      //\r\n      if ((velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0)\r\n          || (velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5)) {\r\n        // Go to next slide\r\n        indexDiff = 1;\r\n        velocity.x = Math.min(velocity.x, 0);\r\n      } else if ((velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0)\r\n          || (velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5)) {\r\n        // Go to prev slide\r\n        indexDiff = -1;\r\n        velocity.x = Math.max(velocity.x, 0);\r\n      }\r\n\r\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\r\n    }\r\n\r\n    // Restore zoom level\r\n    if ((currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.max)\r\n        || this.gestures.isMultitouch) {\r\n      this.gestures.zoomLevels.correctZoomPan(true);\r\n    } else {\r\n      // we run two animations instead of one,\r\n      // as each axis has own pan boundaries and thus different spring function\r\n      // (correctZoomPan does not have this functionality,\r\n      //  it animates all properties with single timing function)\r\n      this._finishPanGestureForAxis('x');\r\n      this._finishPanGestureForAxis('y');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _finishPanGestureForAxis(axis) {\r\n    const { velocity } = this.gestures;\r\n    const { currSlide } = this.pswp;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    const { pan, bounds } = currSlide;\r\n    const panPos = pan[axis];\r\n    const restoreBgOpacity = (this.pswp.bgOpacity < 1 && axis === 'y');\r\n\r\n    // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\r\n    // Increasing this number will reduce travel distance\r\n    const decelerationRate = 0.995; // 0.99\r\n\r\n    // Pan position if there is no bounds\r\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\r\n\r\n    if (restoreBgOpacity) {\r\n      const vDragRatio = this._getVerticalDragRatio(panPos);\r\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition);\r\n\r\n      // If we are above and moving upwards,\r\n      // or if we are below and moving downwards\r\n      if ((vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE)\r\n          || (vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE)) {\r\n        this.pswp.close();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Pan position with corrected bounds\r\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition);\r\n\r\n    // Exit if pan position should not be changed\r\n    // or if speed it too low\r\n    if (panPos === correctedPanPosition) {\r\n      return;\r\n    }\r\n\r\n    // Overshoot if the final position is out of pan bounds\r\n    const dampingRatio = (correctedPanPosition === projectedPosition) ? 1 : 0.82;\r\n\r\n    const initialBgOpacity = this.pswp.bgOpacity;\r\n    const totalPanDist = correctedPanPosition - panPos;\r\n\r\n    this.pswp.animations.startSpring({\r\n      name: 'panGesture' + axis,\r\n      isPan: true,\r\n      start: panPos,\r\n      end: correctedPanPosition,\r\n      velocity: velocity[axis],\r\n      dampingRatio,\r\n      onUpdate: (pos) => {\r\n        // Animate opacity of background relative to Y pan position of an image\r\n        if (restoreBgOpacity && this.pswp.bgOpacity < 1) {\r\n          // 0 - start of animation, 1 - end of animation\r\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist;\r\n\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          this.pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio,\r\n            0,\r\n            1\r\n          ));\r\n        }\r\n\r\n        pan[axis] = Math.floor(pos);\r\n        currSlide.applyCurrentZoomPan();\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @returns {boolean}\r\n   */\r\n  _panOrMoveMainScroll(axis) {\r\n    const { p1, dragAxis, prevP1, isMultitouch } = this.gestures;\r\n    const { currSlide, mainScroll } = this.pswp;\r\n    const delta = (p1[axis] - prevP1[axis]);\r\n    const newMainScrollX = mainScroll.x + delta;\r\n\r\n    if (!delta || !currSlide) {\r\n      return false;\r\n    }\r\n\r\n    // Always move main scroll if image can not be panned\r\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\r\n      mainScroll.moveTo(newMainScrollX, true);\r\n      return true; // changed main scroll\r\n    }\r\n\r\n    const { bounds } = currSlide;\r\n    const newPan = currSlide.pan[axis] + delta;\r\n\r\n    if (this.pswp.options.allowPanToNext\r\n        && dragAxis === 'x'\r\n        && axis === 'x'\r\n        && !isMultitouch) {\r\n      const currSlideMainScrollX = mainScroll.getCurrSlideX();\r\n\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\r\n\r\n      const isLeftToRight = delta > 0;\r\n      const isRightToLeft = !isLeftToRight;\r\n\r\n      if (newPan > bounds.min[axis] && isLeftToRight) {\r\n        // Panning from left to right, beyond the left edge\r\n\r\n        // Wether the image was at minimum pan position (or less)\r\n        // when this drag gesture started.\r\n        // Minimum pan position refers to the left edge of the image.\r\n        const wasAtMinPanPosition = (bounds.min[axis] <= this.startPan[axis]);\r\n\r\n        if (wasAtMinPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\r\n        // Paning from right to left, beyond the right edge\r\n\r\n        // Maximum pan position refers to the right edge of the image.\r\n        const wasAtMaxPanPosition = (this.startPan[axis] <= bounds.max[axis]);\r\n\r\n        if (wasAtMaxPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else {\r\n        // If main scroll is shifted\r\n        if (mainScrollShiftDiff !== 0) {\r\n          // If main scroll is shifted right\r\n          if (mainScrollShiftDiff > 0 /*&& isRightToLeft*/) {\r\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          } else if (mainScrollShiftDiff < 0 /*&& isLeftToRight*/) {\r\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\r\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          }\r\n        } else {\r\n          // We are within pan bounds, so just pan\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      }\r\n    } else {\r\n      if (axis === 'y') {\r\n        // Do not pan vertically if main scroll is shifted o\r\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      } else {\r\n        this._setPanWithFriction(axis, newPan);\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  // If we move above - the ratio is negative\r\n  // If we move below the ratio is positive\r\n\r\n  /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @private\r\n   * @param {number} panY The current pan Y position.\r\n   * @returns {number}\r\n   */\r\n  _getVerticalDragRatio(panY) {\r\n    return (panY - (this.pswp.currSlide?.bounds.center.y ?? 0)) / (this.pswp.viewportSize.y / 3);\r\n  }\r\n\r\n  /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} potentialPan\r\n   * @param {number} [customFriction] (0.1 - 1)\r\n   */\r\n  _setPanWithFriction(axis, potentialPan, customFriction) {\r\n    const { currSlide } = this.pswp;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    const { pan, bounds } = currSlide;\r\n    const correctedPan = bounds.correctPan(axis, potentialPan);\r\n    // If we are out of pan bounds\r\n    if (correctedPan !== potentialPan || customFriction) {\r\n      const delta = Math.round(potentialPan - pan[axis]);\r\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\r\n    } else {\r\n      pan[axis] = potentialPan;\r\n    }\r\n  }\r\n}\r\n\r\nexport default DragHandler;\r\n","import {\r\n  equalizePoints, getDistanceBetween, clamp, pointsEqual\r\n} from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst UPPER_ZOOM_FRICTION = 0.05;\r\nconst LOWER_ZOOM_FRICTION = 0.15;\r\n\r\n\r\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\r\nfunction getZoomPointsCenter(p, p1, p2) {\r\n  p.x = (p1.x + p2.x) / 2;\r\n  p.y = (p1.y + p2.y) / 2;\r\n  return p;\r\n}\r\n\r\nclass ZoomHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\r\n    this._startPan = { x: 0, y: 0 };\r\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\r\n    this._startZoomPoint = { x: 0, y: 0 };\r\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\r\n    this._zoomPoint = { x: 0, y: 0 };\r\n    /** @private */\r\n    this._wasOverFitZoomLevel = false;\r\n    /** @private */\r\n    this._startZoomLevel = 1;\r\n  }\r\n\r\n  start() {\r\n    const { currSlide } = this.gestures.pswp;\r\n    if (currSlide) {\r\n      this._startZoomLevel = currSlide.currZoomLevel;\r\n      equalizePoints(this._startPan, currSlide.pan);\r\n    }\r\n\r\n    this.gestures.pswp.animations.stopAllPan();\r\n    this._wasOverFitZoomLevel = false;\r\n  }\r\n\r\n  change() {\r\n    const { p1, startP1, p2, startP2, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    const minZoomLevel = currSlide.zoomLevels.min;\r\n    const maxZoomLevel = currSlide.zoomLevels.max;\r\n\r\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\r\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\r\n\r\n    let currZoomLevel = (1 / getDistanceBetween(startP1, startP2))\r\n                      * getDistanceBetween(p1, p2)\r\n                      * this._startZoomLevel;\r\n\r\n    // slightly over the zoom.fit\r\n    if (currZoomLevel > currSlide.zoomLevels.initial + (currSlide.zoomLevels.initial / 15)) {\r\n      this._wasOverFitZoomLevel = true;\r\n    }\r\n\r\n    if (currZoomLevel < minZoomLevel) {\r\n      if (pswp.options.pinchToClose\r\n          && !this._wasOverFitZoomLevel\r\n          && this._startZoomLevel <= currSlide.zoomLevels.initial) {\r\n        // fade out background if zooming out\r\n        const bgOpacity = 1 - ((minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2));\r\n        if (!pswp.dispatch('pinchClose', { bgOpacity }).defaultPrevented) {\r\n          pswp.applyBgOpacity(bgOpacity);\r\n        }\r\n      } else {\r\n        // Apply the friction if zoom level is below the min\r\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\r\n      }\r\n    } else if (currZoomLevel > maxZoomLevel) {\r\n      // Apply the friction if zoom level is above the max\r\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\r\n    }\r\n\r\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\r\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\r\n\r\n    currSlide.setZoomLevel(currZoomLevel);\r\n    currSlide.applyCurrentZoomPan();\r\n  }\r\n\r\n  end() {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    if ((!currSlide || currSlide.currZoomLevel < currSlide.zoomLevels.initial)\r\n        && !this._wasOverFitZoomLevel\r\n        && pswp.options.pinchToClose) {\r\n      pswp.close();\r\n    } else {\r\n      this.correctZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} currZoomLevel\r\n   * @returns {number}\r\n   */\r\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\r\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\r\n    return this._zoomPoint[axis]\r\n            - ((this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor);\r\n  }\r\n\r\n  /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {boolean} [ignoreGesture]\r\n   * Wether gesture coordinates should be ignored when calculating destination pan position.\r\n   */\r\n  correctZoomPan(ignoreGesture) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide?.isZoomable()) {\r\n      return;\r\n    }\r\n\r\n    if (this._zoomPoint.x === 0) {\r\n      ignoreGesture = true;\r\n    }\r\n\r\n    const prevZoomLevel = currSlide.currZoomLevel;\r\n\r\n    /** @type {number} */\r\n    let destinationZoomLevel;\r\n    let currZoomLevelNeedsChange = true;\r\n\r\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\r\n      destinationZoomLevel = currSlide.zoomLevels.initial;\r\n      // zoom to min\r\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\r\n      destinationZoomLevel = currSlide.zoomLevels.max;\r\n      // zoom to max\r\n    } else {\r\n      currZoomLevelNeedsChange = false;\r\n      destinationZoomLevel = prevZoomLevel;\r\n    }\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const restoreBgOpacity = pswp.bgOpacity < 1;\r\n\r\n    const initialPan = equalizePoints({ x: 0, y: 0 }, currSlide.pan);\r\n    let destinationPan = equalizePoints({ x: 0, y: 0 }, initialPan);\r\n\r\n    if (ignoreGesture) {\r\n      this._zoomPoint.x = 0;\r\n      this._zoomPoint.y = 0;\r\n      this._startZoomPoint.x = 0;\r\n      this._startZoomPoint.y = 0;\r\n      this._startZoomLevel = prevZoomLevel;\r\n      equalizePoints(this._startPan, initialPan);\r\n    }\r\n\r\n    if (currZoomLevelNeedsChange) {\r\n      destinationPan = {\r\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\r\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\r\n      };\r\n    }\r\n\r\n    // set zoom level, so pan bounds are updated according to it\r\n    currSlide.setZoomLevel(destinationZoomLevel);\r\n\r\n    destinationPan = {\r\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\r\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\r\n    };\r\n\r\n    // return zoom level and its bounds to initial\r\n    currSlide.setZoomLevel(prevZoomLevel);\r\n\r\n    const panNeedsChange = !pointsEqual(destinationPan, initialPan);\r\n\r\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\r\n      // update resolution after gesture\r\n      currSlide._setResolution(destinationZoomLevel);\r\n      currSlide.applyCurrentZoomPan();\r\n\r\n      // nothing to animate\r\n      return;\r\n    }\r\n\r\n    pswp.animations.stopAllPan();\r\n\r\n    pswp.animations.startSpring({\r\n      isPan: true,\r\n      start: 0,\r\n      end: 1000,\r\n      velocity: 0,\r\n      dampingRatio: 1,\r\n      naturalFrequency: 40,\r\n      onUpdate: (now) => {\r\n        now /= 1000; // 0 - start, 1 - end\r\n\r\n        if (panNeedsChange || currZoomLevelNeedsChange) {\r\n          if (panNeedsChange) {\r\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\r\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\r\n          }\r\n\r\n          if (currZoomLevelNeedsChange) {\r\n            const newZoomLevel = prevZoomLevel\r\n                        + (destinationZoomLevel - prevZoomLevel) * now;\r\n            currSlide.setZoomLevel(newZoomLevel);\r\n          }\r\n\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n\r\n        // Restore background opacity\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1\r\n          ));\r\n        }\r\n      },\r\n      onComplete: () => {\r\n        // update resolution after transition ends\r\n        currSlide._setResolution(destinationZoomLevel);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default ZoomHandler;\r\n","/**\r\n * @template {string} T\r\n * @template {string} P\r\n * @typedef {import('../types.js').AddPostfix<T, P>} AddPostfix<T, P>\r\n */\r\n\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/** @typedef {'imageClick' | 'bgClick' | 'tap' | 'doubleTap'} Actions */\r\n\r\n/**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {PointerEvent} event\r\n * @returns {boolean}\r\n */\r\nfunction didTapOnMainContent(event) {\r\n  return !!(/** @type {HTMLElement} */ (event.target).closest('.pswp__container'));\r\n}\r\n\r\n/**\r\n * Tap, double-tap handler.\r\n */\r\nclass TapHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  click(point, originalEvent) {\r\n    const targetClassList = /** @type {HTMLElement} */ (originalEvent.target).classList;\r\n    const isImageClick = targetClassList.contains('pswp__img');\r\n    const isBackgroundClick = targetClassList.contains('pswp__item')\r\n                              || targetClassList.contains('pswp__zoom-wrap');\r\n\r\n    if (isImageClick) {\r\n      this._doClickOrTapAction('imageClick', point, originalEvent);\r\n    } else if (isBackgroundClick) {\r\n      this._doClickOrTapAction('bgClick', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  tap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('tap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  doubleTap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Actions} actionName\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  _doClickOrTapAction(actionName, point, originalEvent) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const actionFullName = /** @type {AddPostfix<Actions, 'Action'>} */ (actionName + 'Action');\r\n    const optionValue = pswp.options[actionFullName];\r\n\r\n    if (pswp.dispatch(actionFullName, { point, originalEvent }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      optionValue.call(pswp, point, originalEvent);\r\n      return;\r\n    }\r\n\r\n    switch (optionValue) {\r\n      case 'close':\r\n      case 'next':\r\n        pswp[optionValue]();\r\n        break;\r\n      case 'zoom':\r\n        currSlide?.toggleZoom(point);\r\n        break;\r\n      case 'zoom-or-close':\r\n        // by default click zooms current image,\r\n        // if it can not be zoomed - gallery will be closed\r\n        if (currSlide?.isZoomable()\r\n            && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\r\n          currSlide.toggleZoom(point);\r\n        } else if (pswp.options.clickToCloseNonZoomable) {\r\n          pswp.close();\r\n        }\r\n        break;\r\n      case 'toggle-controls':\r\n        this.gestures.pswp.element?.classList.toggle('pswp--ui-visible');\r\n        // if (_controlsVisible) {\r\n        //   _ui.hideControls();\r\n        // } else {\r\n        //   _ui.showControls();\r\n        // }\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nexport default TapHandler;\r\n","import {\r\n  equalizePoints, pointsEqual, getDistanceBetween\r\n} from '../util/util.js';\r\n\r\nimport DragHandler from './drag-handler.js';\r\nimport ZoomHandler from './zoom-handler.js';\r\nimport TapHandler from './tap-handler.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n// How far should user should drag\r\n// until we can determine that the gesture is swipe and its direction\r\nconst AXIS_SWIPE_HYSTERISIS = 10;\r\n//const PAN_END_FRICTION = 0.35;\r\n\r\nconst DOUBLE_TAP_DELAY = 300; // ms\r\nconst MIN_TAP_DISTANCE = 25; // px\r\n\r\n/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */\r\nclass Gestures {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {'x' | 'y' | null} */\r\n    this.dragAxis = null;\r\n\r\n    // point objects are defined once and reused\r\n    // PhotoSwipe keeps track only of two pointers, others are ignored\r\n    /** @type {Point} */\r\n    this.p1 = { x: 0, y: 0 }; // the first pressed pointer\r\n    /** @type {Point} */\r\n    this.p2 = { x: 0, y: 0 }; // the second pressed pointer\r\n    /** @type {Point} */\r\n    this.prevP1 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.prevP2 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.startP1 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.startP2 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.velocity = { x: 0, y: 0 };\r\n\r\n    /** @type {Point}\r\n     * @private\r\n     */\r\n    this._lastStartP1 = { x: 0, y: 0 };\r\n    /** @type {Point}\r\n     * @private\r\n     */\r\n    this._intervalP1 = { x: 0, y: 0 };\r\n    /** @private */\r\n    this._numActivePoints = 0;\r\n    /** @type {Point[]}\r\n     * @private\r\n     */\r\n    this._ongoingPointers = [];\r\n    /** @private */\r\n    this._touchEventEnabled = 'ontouchstart' in window;\r\n    /** @private */\r\n    this._pointerEventEnabled = !!(window.PointerEvent);\r\n    this.supportsTouch = this._touchEventEnabled\r\n                          || (this._pointerEventEnabled && navigator.maxTouchPoints > 1);\r\n    /** @private */\r\n    this._numActivePoints = 0;\r\n    /** @private */\r\n    this._intervalTime = 0;\r\n    /** @private */\r\n    this._velocityCalculated = false;\r\n    this.isMultitouch = false;\r\n    this.isDragging = false;\r\n    this.isZooming = false;\r\n    /** @type {number | null} */\r\n    this.raf = null;\r\n    /** @type {NodeJS.Timeout | null}\r\n     * @private\r\n     */\r\n    this._tapTimer = null;\r\n\r\n    if (!this.supportsTouch) {\r\n      // disable pan to next slide for non-touch devices\r\n      pswp.options.allowPanToNext = false;\r\n    }\r\n\r\n    this.drag = new DragHandler(this);\r\n    this.zoomLevels = new ZoomHandler(this);\r\n    this.tapHandler = new TapHandler(this);\r\n\r\n    pswp.on('bindEvents', () => {\r\n      pswp.events.add(\r\n        pswp.scrollWrap,\r\n        'click',\r\n        /** @type EventListener */(this._onClick.bind(this))\r\n      );\r\n\r\n      if (this._pointerEventEnabled) {\r\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\r\n      } else if (this._touchEventEnabled) {\r\n        this._bindEvents('touch', 'start', 'end', 'cancel');\r\n\r\n        // In previous versions we also bound mouse event here,\r\n        // in case device supports both touch and mouse events,\r\n        // but newer versions of browsers now support PointerEvent.\r\n\r\n        // on iOS10 if you bind touchmove/end after touchstart,\r\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\r\n        // preventDefault will have no effect on touchmove and touchend.\r\n        // Unless you bind it previously.\r\n        if (pswp.scrollWrap) {\r\n          pswp.scrollWrap.ontouchmove = () => {};\r\n          pswp.scrollWrap.ontouchend = () => {};\r\n        }\r\n      } else {\r\n        this._bindEvents('mouse', 'down', 'up');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'mouse' | 'touch' | 'pointer'} pref\r\n   * @param {'down' | 'start'} down\r\n   * @param {'up' | 'end'} up\r\n   * @param {'cancel'} [cancel]\r\n   */\r\n  _bindEvents(pref, down, up, cancel) {\r\n    const { pswp } = this;\r\n    const { events } = pswp;\r\n\r\n    const cancelEvent = cancel ? pref + cancel : '';\r\n\r\n    events.add(\r\n      pswp.scrollWrap,\r\n      pref + down,\r\n      /** @type EventListener */(this.onPointerDown.bind(this))\r\n    );\r\n    events.add(window, pref + 'move', /** @type EventListener */(this.onPointerMove.bind(this)));\r\n    events.add(window, pref + up, /** @type EventListener */(this.onPointerUp.bind(this)));\r\n    if (cancelEvent) {\r\n      events.add(\r\n        pswp.scrollWrap,\r\n        cancelEvent,\r\n        /** @type EventListener */(this.onPointerUp.bind(this))\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerDown(e) {\r\n    // We do not call preventDefault for touch events\r\n    // to allow browser to show native dialog on longpress\r\n    // (the one that allows to save image or open it in new tab).\r\n    //\r\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\r\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\r\n    const isMousePointer = e.type === 'mousedown' || e.pointerType === 'mouse';\r\n\r\n    // Allow dragging only via left mouse button.\r\n    // http://www.quirksmode.org/js/events_properties.html\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\r\n    if (isMousePointer && e.button > 0) {\r\n      return;\r\n    }\r\n\r\n    const { pswp } = this;\r\n\r\n    // if PhotoSwipe is opening or closing\r\n    if (!pswp.opener.isOpen) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n\r\n    if (pswp.dispatch('pointerDown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (isMousePointer) {\r\n      pswp.mouseDetected();\r\n\r\n      // preventDefault mouse event to prevent\r\n      // browser image drag feature\r\n      this._preventPointerEventBehaviour(e);\r\n    }\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    this._updatePoints(e, 'down');\r\n\r\n    if (this._numActivePoints === 1) {\r\n      this.dragAxis = null;\r\n      // we need to store initial point to determine the main axis,\r\n      // drag is activated only after the axis is determined\r\n      equalizePoints(this.startP1, this.p1);\r\n    }\r\n\r\n    if (this._numActivePoints > 1) {\r\n      // Tap or double tap should not trigger if more than one pointer\r\n      this._clearTapTimer();\r\n      this.isMultitouch = true;\r\n    } else {\r\n      this.isMultitouch = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerMove(e) {\r\n    e.preventDefault(); // always preventDefault move event\r\n\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'move');\r\n\r\n    if (this.pswp.dispatch('pointerMove', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 1 && !this.isDragging) {\r\n      if (!this.dragAxis) {\r\n        this._calculateDragDirection();\r\n      }\r\n\r\n      // Drag axis was detected, emit drag.start\r\n      if (this.dragAxis && !this.isDragging) {\r\n        if (this.isZooming) {\r\n          this.isZooming = false;\r\n          this.zoomLevels.end();\r\n        }\r\n\r\n        this.isDragging = true;\r\n        this._clearTapTimer(); // Tap can not trigger after drag\r\n\r\n        // Adjust starting point\r\n        this._updateStartPoints();\r\n        this._intervalTime = Date.now();\r\n        //this._startTime = this._intervalTime;\r\n        this._velocityCalculated = false;\r\n        equalizePoints(this._intervalP1, this.p1);\r\n        this.velocity.x = 0;\r\n        this.velocity.y = 0;\r\n        this.drag.start();\r\n\r\n        this._rafStopLoop();\r\n        this._rafRenderLoop();\r\n      }\r\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\r\n      this._finishDrag();\r\n\r\n      this.isZooming = true;\r\n\r\n      // Adjust starting points\r\n      this._updateStartPoints();\r\n\r\n      this.zoomLevels.start();\r\n\r\n      this._rafStopLoop();\r\n      this._rafRenderLoop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finishDrag() {\r\n    if (this.isDragging) {\r\n      this.isDragging = false;\r\n\r\n      // Try to calculate velocity,\r\n      // if it wasn't calculated yet in drag.change\r\n      if (!this._velocityCalculated) {\r\n        this._updateVelocity(true);\r\n      }\r\n\r\n      this.drag.end();\r\n      this.dragAxis = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerUp(e) {\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'up');\r\n\r\n    if (this.pswp.dispatch('pointerUp', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 0) {\r\n      this._rafStopLoop();\r\n\r\n      if (this.isDragging) {\r\n        this._finishDrag();\r\n      } else if (!this.isZooming && !this.isMultitouch) {\r\n        //this.zoomLevels.correctZoomPan();\r\n        this._finishTap(e);\r\n      }\r\n    }\r\n\r\n    if (this._numActivePoints < 2 && this.isZooming) {\r\n      this.isZooming = false;\r\n      this.zoomLevels.end();\r\n\r\n      if (this._numActivePoints === 1) {\r\n        // Since we have 1 point left, we need to reinitiate drag\r\n        this.dragAxis = null;\r\n        this._updateStartPoints();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafRenderLoop() {\r\n    if (this.isDragging || this.isZooming) {\r\n      this._updateVelocity();\r\n\r\n      if (this.isDragging) {\r\n        // make sure that pointer moved since the last update\r\n        if (!pointsEqual(this.p1, this.prevP1)) {\r\n          this.drag.change();\r\n        }\r\n      } else /* if (this.isZooming) */ {\r\n        if (!pointsEqual(this.p1, this.prevP1)\r\n            || !pointsEqual(this.p2, this.prevP2)) {\r\n          this.zoomLevels.change();\r\n        }\r\n      }\r\n\r\n      this._updatePrevPoints();\r\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update velocity at 50ms interval\r\n   *\r\n   * @private\r\n   * @param {boolean} [force]\r\n   */\r\n  _updateVelocity(force) {\r\n    const time = Date.now();\r\n    const duration = time - this._intervalTime;\r\n\r\n    if (duration < 50 && !force) {\r\n      return;\r\n    }\r\n\r\n\r\n    this.velocity.x = this._getVelocity('x', duration);\r\n    this.velocity.y = this._getVelocity('y', duration);\r\n\r\n    this._intervalTime = time;\r\n    equalizePoints(this._intervalP1, this.p1);\r\n    this._velocityCalculated = true;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _finishTap(e) {\r\n    const { mainScroll } = this.pswp;\r\n\r\n    // Do not trigger tap events if main scroll is shifted\r\n    if (mainScroll.isShifted()) {\r\n      // restore main scroll position\r\n      // (usually happens if stopped in the middle of animation)\r\n      mainScroll.moveIndexBy(0, true);\r\n      return;\r\n    }\r\n\r\n    // Do not trigger tap for touchcancel or pointercancel\r\n    if (e.type.indexOf('cancel') > 0) {\r\n      return;\r\n    }\r\n\r\n    // Trigger click instead of tap for mouse events\r\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\r\n      this.tapHandler.click(this.startP1, e);\r\n      return;\r\n    }\r\n\r\n    // Disable delay if there is no doubleTapAction\r\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0;\r\n\r\n    // If tapTimer is defined - we tapped recently,\r\n    // check if the current tap is close to the previous one,\r\n    // if yes - trigger double tap\r\n    if (this._tapTimer) {\r\n      this._clearTapTimer();\r\n      // Check if two taps were more or less on the same place\r\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\r\n        this.tapHandler.doubleTap(this.startP1, e);\r\n      }\r\n    } else {\r\n      equalizePoints(this._lastStartP1, this.startP1);\r\n      this._tapTimer = setTimeout(() => {\r\n        this.tapHandler.tap(this.startP1, e);\r\n        this._clearTapTimer();\r\n      }, tapDelay);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _clearTapTimer() {\r\n    if (this._tapTimer) {\r\n      clearTimeout(this._tapTimer);\r\n      this._tapTimer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get velocity for axis\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} duration\r\n   * @returns {number}\r\n   */\r\n  _getVelocity(axis, duration) {\r\n    // displacement is like distance, but can be negative.\r\n    const displacement = this.p1[axis] - this._intervalP1[axis];\r\n\r\n    if (Math.abs(displacement) > 1 && duration > 5) {\r\n      return displacement / duration;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafStopLoop() {\r\n    if (this.raf) {\r\n      cancelAnimationFrame(this.raf);\r\n      this.raf = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _preventPointerEventBehaviour(e) {\r\n    // TODO find a way to disable e.preventDefault on some elements\r\n    //      via event or some class or something\r\n    e.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @private\r\n   * @param {PointerEvent | TouchEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\r\n  _updatePoints(e, pointerType) {\r\n    if (this._pointerEventEnabled) {\r\n      const pointerEvent = /** @type {PointerEvent} */ (e);\r\n      // Try to find the current pointer in ongoing pointers by its ID\r\n      const pointerIndex = this._ongoingPointers.findIndex((ongoingPointer) => {\r\n        return ongoingPointer.id === pointerEvent.pointerId;\r\n      });\r\n\r\n      if (pointerType === 'up' && pointerIndex > -1) {\r\n        // release the pointer - remove it from ongoing\r\n        this._ongoingPointers.splice(pointerIndex, 1);\r\n      } else if (pointerType === 'down' && pointerIndex === -1) {\r\n        // add new pointer\r\n        this._ongoingPointers.push(this._convertEventPosToPoint(pointerEvent, { x: 0, y: 0 }));\r\n      } else if (pointerIndex > -1) {\r\n        // update existing pointer\r\n        this._convertEventPosToPoint(pointerEvent, this._ongoingPointers[pointerIndex]);\r\n      }\r\n\r\n      this._numActivePoints = this._ongoingPointers.length;\r\n\r\n      // update points that PhotoSwipe uses\r\n      // to calculate position and scale\r\n      if (this._numActivePoints > 0) {\r\n        equalizePoints(this.p1, this._ongoingPointers[0]);\r\n      }\r\n\r\n      if (this._numActivePoints > 1) {\r\n        equalizePoints(this.p2, this._ongoingPointers[1]);\r\n      }\r\n    } else {\r\n      const touchEvent = /** @type {TouchEvent} */ (e);\r\n\r\n      this._numActivePoints = 0;\r\n      if (touchEvent.type.indexOf('touch') > -1) {\r\n        // Touch Event\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\r\n        if (touchEvent.touches && touchEvent.touches.length > 0) {\r\n          this._convertEventPosToPoint(touchEvent.touches[0], this.p1);\r\n          this._numActivePoints++;\r\n          if (touchEvent.touches.length > 1) {\r\n            this._convertEventPosToPoint(touchEvent.touches[1], this.p2);\r\n            this._numActivePoints++;\r\n          }\r\n        }\r\n      } else {\r\n        // Mouse Event\r\n        this._convertEventPosToPoint(/** @type {PointerEvent} */ (e), this.p1);\r\n        if (pointerType === 'up') {\r\n          // clear all points on mouseup\r\n          this._numActivePoints = 0;\r\n        } else {\r\n          this._numActivePoints++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** update points that were used during previous rAF tick\r\n   * @private\r\n   */\r\n  _updatePrevPoints() {\r\n    equalizePoints(this.prevP1, this.p1);\r\n    equalizePoints(this.prevP2, this.p2);\r\n  }\r\n\r\n  /** update points at the start of gesture\r\n   * @private\r\n   */\r\n  _updateStartPoints() {\r\n    equalizePoints(this.startP1, this.p1);\r\n    equalizePoints(this.startP2, this.p2);\r\n    this._updatePrevPoints();\r\n  }\r\n\r\n  /** @private */\r\n  _calculateDragDirection() {\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      // if main scroll position is shifted – direction is always horizontal\r\n      this.dragAxis = 'x';\r\n    } else {\r\n      // calculate delta of the last touchmove tick\r\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\r\n\r\n      if (diff !== 0) {\r\n        // check if pointer was shifted horizontally or vertically\r\n        const axisToCheck = diff > 0 ? 'x' : 'y';\r\n\r\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\r\n          this.dragAxis = axisToCheck;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @private\r\n   * @param {Touch | PointerEvent} e\r\n   * @param {Point} p\r\n   * @returns {Point}\r\n   */\r\n  _convertEventPosToPoint(e, p) {\r\n    p.x = e.pageX - this.pswp.offset.x;\r\n    p.y = e.pageY - this.pswp.offset.y;\r\n\r\n    if ('pointerId' in e) {\r\n      p.id = e.pointerId;\r\n    } else if (e.identifier !== undefined) {\r\n      p.id = e.identifier;\r\n    }\r\n\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _onClick(e) {\r\n    // Do not allow click event to pass through after drag\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Gestures;\r\n","import {\r\n  setTransform,\r\n  createElement,\r\n} from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/slide.js').default} Slide */\r\n\r\n/** @typedef {{ el: HTMLDivElement; slide?: Slide }} ItemHolder */\r\n\r\nconst MAIN_SCROLL_END_FRICTION = 0.35;\r\n\r\n\r\n// const MIN_SWIPE_TRANSITION_DURATION = 250;\r\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\r\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\r\n\r\n/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */\r\nclass MainScroll {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.x = 0;\r\n    this.slideWidth = 0;\r\n    /** @private */\r\n    this._currPositionIndex = 0;\r\n    /** @private */\r\n    this._prevPositionIndex = 0;\r\n    /** @private */\r\n    this._containerShiftIndex = -1;\r\n\r\n    /** @type {ItemHolder[]} */\r\n    this.itemHolders = [];\r\n  }\r\n\r\n  /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {boolean} [resizeSlides] Whether slides content should resized\r\n   */\r\n  resize(resizeSlides) {\r\n    const { pswp } = this;\r\n    const newSlideWidth = Math.round(\r\n      pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing\r\n    );\r\n    // Mobile browsers might trigger a resize event during a gesture.\r\n    // (due to toolbar appearing or hiding).\r\n    // Avoid re-adjusting main scroll position if width wasn't changed\r\n    const slideWidthChanged = (newSlideWidth !== this.slideWidth);\r\n\r\n    if (slideWidthChanged) {\r\n      this.slideWidth = newSlideWidth;\r\n      this.moveTo(this.getCurrSlideX());\r\n    }\r\n\r\n    this.itemHolders.forEach((itemHolder, index) => {\r\n      if (slideWidthChanged) {\r\n        setTransform(itemHolder.el, (index + this._containerShiftIndex)\r\n                                    * this.slideWidth);\r\n      }\r\n\r\n      if (resizeSlides && itemHolder.slide) {\r\n        itemHolder.slide.resize();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reset X position of the main scroller to zero\r\n   */\r\n  resetPosition() {\r\n    // Position on the main scroller (offset)\r\n    // it is independent from slide index\r\n    this._currPositionIndex = 0;\r\n    this._prevPositionIndex = 0;\r\n\r\n    // This will force recalculation of size on next resize()\r\n    this.slideWidth = 0;\r\n\r\n    // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\r\n    this._containerShiftIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */\r\n  appendHolders() {\r\n    this.itemHolders = [];\r\n\r\n    // append our three slide holders -\r\n    // previous, current, and next\r\n    for (let i = 0; i < 3; i++) {\r\n      const el = createElement('pswp__item', 'div', this.pswp.container);\r\n      el.setAttribute('role', 'group');\r\n      el.setAttribute('aria-roledescription', 'slide');\r\n      el.setAttribute('aria-hidden', 'true');\r\n\r\n      // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\r\n      el.style.display = (i === 1) ? 'block' : 'none';\r\n\r\n      this.itemHolders.push({\r\n        el,\r\n        //index: -1\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   * @returns {boolean}\r\n   */\r\n  canBeSwiped() {\r\n    return this.pswp.getNumItems() > 1;\r\n  }\r\n\r\n  /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {number} diff\r\n   * @param {boolean} [animate]\r\n   * @param {number} [velocityX]\r\n   * @returns {boolean} whether index was changed or not\r\n   */\r\n  moveIndexBy(diff, animate, velocityX) {\r\n    const { pswp } = this;\r\n    let newIndex = pswp.potentialIndex + diff;\r\n    const numSlides = pswp.getNumItems();\r\n\r\n    if (pswp.canLoop()) {\r\n      newIndex = pswp.getLoopedIndex(newIndex);\r\n      const distance = (diff + numSlides) % numSlides;\r\n      if (distance <= numSlides / 2) {\r\n        // go forward\r\n        diff = distance;\r\n      } else {\r\n        // go backwards\r\n        diff = distance - numSlides;\r\n      }\r\n    } else {\r\n      if (newIndex < 0) {\r\n        newIndex = 0;\r\n      } else if (newIndex >= numSlides) {\r\n        newIndex = numSlides - 1;\r\n      }\r\n      diff = newIndex - pswp.potentialIndex;\r\n    }\r\n\r\n    pswp.potentialIndex = newIndex;\r\n    this._currPositionIndex -= diff;\r\n\r\n    pswp.animations.stopMainScroll();\r\n\r\n    const destinationX = this.getCurrSlideX();\r\n    if (!animate) {\r\n      this.moveTo(destinationX);\r\n      this.updateCurrItem();\r\n    } else {\r\n      pswp.animations.startSpring({\r\n        isMainScroll: true,\r\n        start: this.x,\r\n        end: destinationX,\r\n        velocity: velocityX || 0,\r\n        naturalFrequency: 30,\r\n        dampingRatio: 1, //0.7,\r\n        onUpdate: (x) => {\r\n          this.moveTo(x);\r\n        },\r\n        onComplete: () => {\r\n          this.updateCurrItem();\r\n          pswp.appendHeavy();\r\n        }\r\n      });\r\n\r\n      let currDiff = pswp.potentialIndex - pswp.currIndex;\r\n      if (pswp.canLoop()) {\r\n        const currDistance = (currDiff + numSlides) % numSlides;\r\n        if (currDistance <= numSlides / 2) {\r\n          // go forward\r\n          currDiff = currDistance;\r\n        } else {\r\n          // go backwards\r\n          currDiff = currDistance - numSlides;\r\n        }\r\n      }\r\n\r\n      // Force-append new slides during transition\r\n      // if difference between slides is more than 1\r\n      if (Math.abs(currDiff) > 1) {\r\n        this.updateCurrItem();\r\n      }\r\n    }\r\n\r\n    return Boolean(diff);\r\n  }\r\n\r\n  /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   * @returns {number}\r\n   */\r\n  getCurrSlideX() {\r\n    return this.slideWidth * this._currPositionIndex;\r\n  }\r\n\r\n  /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   * @returns {boolean}\r\n   */\r\n  isShifted() {\r\n    return this.x !== this.getCurrSlideX();\r\n  }\r\n\r\n  /**\r\n   * Update slides X positions and set their content\r\n   */\r\n  updateCurrItem() {\r\n    const { pswp } = this;\r\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\r\n\r\n    if (!positionDifference) {\r\n      return;\r\n    }\r\n\r\n    this._prevPositionIndex = this._currPositionIndex;\r\n\r\n    pswp.currIndex = pswp.potentialIndex;\r\n\r\n    let diffAbs = Math.abs(positionDifference);\r\n    /** @type {ItemHolder | undefined} */\r\n    let tempHolder;\r\n\r\n    if (diffAbs >= 3) {\r\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\r\n      diffAbs = 3;\r\n    }\r\n\r\n    for (let i = 0; i < diffAbs; i++) {\r\n      if (positionDifference > 0) {\r\n        tempHolder = this.itemHolders.shift();\r\n        if (tempHolder) {\r\n          this.itemHolders[2] = tempHolder; // move first to last\r\n\r\n          this._containerShiftIndex++;\r\n\r\n          setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\r\n\r\n          pswp.setContent(tempHolder, (pswp.currIndex - diffAbs) + i + 2);\r\n        }\r\n      } else {\r\n        tempHolder = this.itemHolders.pop();\r\n        if (tempHolder) {\r\n          this.itemHolders.unshift(tempHolder); // move last to first\r\n\r\n          this._containerShiftIndex--;\r\n\r\n          setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\r\n\r\n          pswp.setContent(tempHolder, (pswp.currIndex + diffAbs) - i - 2);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Reset transfrom every 50ish navigations in one direction.\r\n    //\r\n    // Otherwise transform will keep growing indefinitely,\r\n    // which might cause issues as browsers have a maximum transform limit.\r\n    // I wasn't able to reach it, but just to be safe.\r\n    // This should not cause noticable lag.\r\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\r\n      this.resetPosition();\r\n      this.resize();\r\n    }\r\n\r\n    // Pan transition might be running (and consntantly updating pan position)\r\n    pswp.animations.stopAllPan();\r\n\r\n    this.itemHolders.forEach((itemHolder, i) => {\r\n      if (itemHolder.slide) {\r\n        // Slide in the 2nd holder is always active\r\n        itemHolder.slide.setIsActive(i === 1);\r\n      }\r\n    });\r\n\r\n    pswp.currSlide = this.itemHolders[1]?.slide;\r\n    pswp.contentLoader.updateLazy(positionDifference);\r\n\r\n    if (pswp.currSlide) {\r\n      pswp.currSlide.applyCurrentZoomPan();\r\n    }\r\n\r\n    pswp.dispatch('change');\r\n  }\r\n\r\n  /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {number} x\r\n   * @param {boolean} [dragging]\r\n   */\r\n  moveTo(x, dragging) {\r\n    if (!this.pswp.canLoop() && dragging) {\r\n      // Apply friction\r\n      let newSlideIndexOffset = ((this.slideWidth * this._currPositionIndex) - x) / this.slideWidth;\r\n      newSlideIndexOffset += this.pswp.currIndex;\r\n      const delta = Math.round(x - this.x);\r\n\r\n      if ((newSlideIndexOffset < 0 && delta > 0)\r\n          || (newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0)) {\r\n        x = this.x + (delta * MAIN_SCROLL_END_FRICTION);\r\n      }\r\n    }\r\n\r\n    this.x = x;\r\n\r\n    if (this.pswp.container) {\r\n      setTransform(this.pswp.container, x);\r\n    }\r\n\r\n    this.pswp.dispatch('moveMainScroll', { x, dragging: dragging ?? false });\r\n  }\r\n}\r\n\r\nexport default MainScroll;\r\n","import { specialKeyUsed } from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Methods<T>} Methods<T>\r\n */\r\n\r\nconst KeyboardKeyCodesMap = {\r\n  Escape: 27,\r\n  z: 90,\r\n  ArrowLeft: 37,\r\n  ArrowUp: 38,\r\n  ArrowRight: 39,\r\n  ArrowDown: 40,\r\n  Tab: 9,\r\n};\r\n\r\n/**\r\n * @template {keyof KeyboardKeyCodesMap} T\r\n * @param {T} key\r\n * @param {boolean} isKeySupported\r\n * @returns {T | number | undefined}\r\n */\r\nconst getKeyboardEventKey = (key, isKeySupported) => {\r\n  return isKeySupported ? key : KeyboardKeyCodesMap[key];\r\n};\r\n\r\n/**\r\n * - Manages keyboard shortcuts.\r\n * - Helps trap focus within photoswipe.\r\n */\r\nclass Keyboard {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    /** @private */\r\n    this._wasFocused = false;\r\n\r\n    pswp.on('bindEvents', () => {\r\n      // Dialog was likely opened by keyboard if initial point is not defined\r\n      if (!pswp.options.initialPointerPos) {\r\n        // focus causes layout,\r\n        // which causes lag during the animation,\r\n        // that's why we delay it until the opener transition ends\r\n        this._focusRoot();\r\n      }\r\n\r\n      pswp.events.add(document, 'focusin', /** @type EventListener */(this._onFocusIn.bind(this)));\r\n      pswp.events.add(document, 'keydown', /** @type EventListener */(this._onKeyDown.bind(this)));\r\n    });\r\n\r\n    const lastActiveElement = /** @type {HTMLElement} */ (document.activeElement);\r\n    pswp.on('destroy', () => {\r\n      if (pswp.options.returnFocus\r\n          && lastActiveElement\r\n          && this._wasFocused) {\r\n        lastActiveElement.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  /** @private */\r\n  _focusRoot() {\r\n    if (!this._wasFocused && this.pswp.element) {\r\n      this.pswp.element.focus();\r\n      this._wasFocused = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {KeyboardEvent} e\r\n   */\r\n  _onKeyDown(e) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('keydown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (specialKeyUsed(e)) {\r\n      // don't do anything if special key pressed\r\n      // to prevent from overriding default browser actions\r\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\r\n      return;\r\n    }\r\n\r\n    /** @type {Methods<PhotoSwipe> | undefined} */\r\n    let keydownAction;\r\n    /** @type {'x' | 'y' | undefined} */\r\n    let axis;\r\n    let isForward = false;\r\n    const isKeySupported = 'key' in e;\r\n\r\n    switch (isKeySupported ? e.key : e.keyCode) {\r\n      case getKeyboardEventKey('Escape', isKeySupported):\r\n        if (pswp.options.escKey) {\r\n          keydownAction = 'close';\r\n        }\r\n        break;\r\n      case getKeyboardEventKey('z', isKeySupported):\r\n        keydownAction = 'toggleZoom';\r\n        break;\r\n      case getKeyboardEventKey('ArrowLeft', isKeySupported):\r\n        axis = 'x';\r\n        break;\r\n      case getKeyboardEventKey('ArrowUp', isKeySupported):\r\n        axis = 'y';\r\n        break;\r\n      case getKeyboardEventKey('ArrowRight', isKeySupported):\r\n        axis = 'x';\r\n        isForward = true;\r\n        break;\r\n      case getKeyboardEventKey('ArrowDown', isKeySupported):\r\n        isForward = true;\r\n        axis = 'y';\r\n        break;\r\n      case getKeyboardEventKey('Tab', isKeySupported):\r\n        this._focusRoot();\r\n        break;\r\n      default:\r\n    }\r\n\r\n    // if left/right/top/bottom key\r\n    if (axis) {\r\n      // prevent page scroll\r\n      e.preventDefault();\r\n\r\n      const { currSlide } = pswp;\r\n\r\n      if (pswp.options.arrowKeys\r\n          && axis === 'x'\r\n          && pswp.getNumItems() > 1) {\r\n        keydownAction = isForward ? 'next' : 'prev';\r\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\r\n        // up/down arrow keys pan the image vertically\r\n        // left/right arrow keys pan horizontally.\r\n        // Unless there is only one image,\r\n        // or arrowKeys option is disabled\r\n        currSlide.pan[axis] += isForward ? -80 : 80;\r\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\r\n      }\r\n    }\r\n\r\n    if (keydownAction) {\r\n      e.preventDefault();\r\n      // @ts-ignore\r\n      pswp[keydownAction]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @private\r\n   * @param {FocusEvent} e\r\n   */\r\n  _onFocusIn(e) {\r\n    const { template } = this.pswp;\r\n    if (template\r\n        && document !== e.target\r\n        && template !== e.target\r\n        && !template.contains(/** @type {Node} */ (e.target))) {\r\n      // focus root element\r\n      template.focus();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Keyboard;\r\n","import { setTransitionStyle, removeTransitionStyle } from './util.js';\r\n\r\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/** @typedef {import('./animations.js').SharedAnimationProps} SharedAnimationProps */\r\n\r\n/** @typedef {Object} DefaultCssAnimationProps\r\n *\r\n * @prop {HTMLElement} target\r\n * @prop {number} [duration]\r\n * @prop {string} [easing]\r\n * @prop {string} [transform]\r\n * @prop {string} [opacity]\r\n * */\r\n\r\n/** @typedef {SharedAnimationProps & DefaultCssAnimationProps} CssAnimationProps */\r\n\r\n/**\r\n * Runs CSS transition.\r\n */\r\nclass CSSAnimation {\r\n  /**\r\n   * onComplete can be unpredictable, be careful about current state\r\n   *\r\n   * @param {CssAnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    const {\r\n      target,\r\n      onComplete,\r\n      transform,\r\n      onFinish = () => {},\r\n      duration = 333,\r\n      easing = DEFAULT_EASING,\r\n    } = props;\r\n\r\n    this.onFinish = onFinish;\r\n\r\n    // support only transform and opacity\r\n    const prop = transform ? 'transform' : 'opacity';\r\n    const propValue = props[prop] ?? '';\r\n\r\n    /** @private */\r\n    this._target = target;\r\n    /** @private */\r\n    this._onComplete = onComplete;\r\n    /** @private */\r\n    this._finished = false;\r\n\r\n    /** @private */\r\n    this._onTransitionEnd = this._onTransitionEnd.bind(this);\r\n\r\n    // Using timeout hack to make sure that animation\r\n    // starts even if the animated property was changed recently,\r\n    // otherwise transitionend might not fire or transition won't start.\r\n    // https://drafts.csswg.org/css-transitions/#starting\r\n    //\r\n    // ¯\\_(ツ)_/¯\r\n    /** @private */\r\n    this._helperTimeout = setTimeout(() => {\r\n      setTransitionStyle(target, prop, duration, easing);\r\n      this._helperTimeout = setTimeout(() => {\r\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\r\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false);\r\n\r\n        // Safari occasionally does not emit transitionend event\r\n        // if element property was modified during the transition,\r\n        // which may be caused by resize or third party component,\r\n        // using timeout as a safety fallback\r\n        this._helperTimeout = setTimeout(() => {\r\n          this._finalizeAnimation();\r\n        }, duration + 500);\r\n        target.style[prop] = propValue;\r\n      }, 30); // Do not reduce this number\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {TransitionEvent} e\r\n   */\r\n  _onTransitionEnd(e) {\r\n    if (e.target === this._target) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finalizeAnimation() {\r\n    if (!this._finished) {\r\n      this._finished = true;\r\n      this.onFinish();\r\n      if (this._onComplete) {\r\n        this._onComplete();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._helperTimeout) {\r\n      clearTimeout(this._helperTimeout);\r\n    }\r\n    removeTransitionStyle(this._target);\r\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\r\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\r\n    if (!this._finished) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default CSSAnimation;\r\n","const DEFAULT_NATURAL_FREQUENCY = 12;\r\nconst DEFAULT_DAMPING_RATIO = 0.75;\r\n\r\n/**\r\n * Spring easing helper\r\n */\r\nclass SpringEaser {\r\n  /**\r\n   * @param {number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {number} [dampingRatio]\r\n   * Determines how bouncy animation will be.\r\n   * From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   * \"overshoot\" refers to part of animation that\r\n   * goes beyond the final value.\r\n   *\r\n   * @param {number} [naturalFrequency]\r\n   * Determines how fast animation will slow down.\r\n   * The higher value - the stiffer the transition will be,\r\n   * and the faster it will slow down.\r\n   * Recommended value from 10 to 50\r\n   */\r\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\r\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\r\n\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO;\r\n\r\n    // https://en.wikipedia.org/wiki/Natural_frequency\r\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\r\n\r\n    this._dampedFrequency = this._naturalFrequency;\r\n\r\n    if (this._dampingRatio < 1) {\r\n      this._dampedFrequency *= Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} deltaPosition Difference between current and end position of the animation\r\n   * @param {number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {number} Displacement, relative to the end position.\r\n   */\r\n  easeFrame(deltaPosition, deltaTime) {\r\n    // Inspired by Apple Webkit and Android spring function implementation\r\n    // https://en.wikipedia.org/wiki/Oscillation\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    // we ignore mass (assume that it's 1kg)\r\n\r\n    let displacement = 0;\r\n    let coeff;\r\n\r\n    deltaTime /= 1000;\r\n\r\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\r\n\r\n    if (this._dampingRatio === 1) {\r\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\r\n\r\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency) + coeff\r\n                        * naturalDumpingPow;\r\n    } else if (this._dampingRatio < 1) {\r\n      coeff = (1 / this._dampedFrequency)\r\n                * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\r\n\r\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\r\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\r\n\r\n      displacement = naturalDumpingPow\r\n                       * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency)\r\n                        * this._dampingRatio\r\n                        + naturalDumpingPow\r\n                        * (-this._dampedFrequency * deltaPosition * dumpedFSin\r\n                        + this._dampedFrequency * coeff * dumpedFCos);\r\n    }\r\n\r\n    // Overdamped (>1) damping ratio is not supported\r\n\r\n    return displacement;\r\n  }\r\n}\r\n\r\nexport default SpringEaser;\r\n","import SpringEaser from './spring-easer.js';\r\n\r\n/** @typedef {import('./animations.js').SharedAnimationProps} SharedAnimationProps */\r\n\r\n/**\r\n * @typedef {Object} DefaultSpringAnimationProps\r\n *\r\n * @prop {number} start\r\n * @prop {number} end\r\n * @prop {number} velocity\r\n * @prop {number} [dampingRatio]\r\n * @prop {number} [naturalFrequency]\r\n * @prop {(end: number) => void} onUpdate\r\n */\r\n\r\n/** @typedef {SharedAnimationProps & DefaultSpringAnimationProps} SpringAnimationProps */\r\n\r\nclass SpringAnimation {\r\n  /**\r\n   * @param {SpringAnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    this._raf = 0;\r\n\r\n    const {\r\n      start,\r\n      end,\r\n      velocity,\r\n      onUpdate,\r\n      onComplete,\r\n      onFinish = () => {},\r\n      dampingRatio,\r\n      naturalFrequency\r\n    } = props;\r\n\r\n    this.onFinish = onFinish;\r\n\r\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\r\n    let prevTime = Date.now();\r\n    let deltaPosition = start - end;\r\n\r\n    const animationLoop = () => {\r\n      if (this._raf) {\r\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime);\r\n\r\n        // Stop the animation if velocity is low and position is close to end\r\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\r\n          // Finalize the animation\r\n          onUpdate(end);\r\n          if (onComplete) {\r\n            onComplete();\r\n          }\r\n          this.onFinish();\r\n        } else {\r\n          prevTime = Date.now();\r\n          onUpdate(deltaPosition + end);\r\n          this._raf = requestAnimationFrame(animationLoop);\r\n        }\r\n      }\r\n    };\r\n\r\n    this._raf = requestAnimationFrame(animationLoop);\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._raf >= 0) {\r\n      cancelAnimationFrame(this._raf);\r\n    }\r\n    this._raf = 0;\r\n  }\r\n}\r\n\r\nexport default SpringAnimation;\r\n","import CSSAnimation from './css-animation.js';\r\nimport SpringAnimation from './spring-animation.js';\r\n\r\n/** @typedef {import('./css-animation.js').CssAnimationProps} CssAnimationProps */\r\n/** @typedef {import('./spring-animation.js').SpringAnimationProps} SpringAnimationProps */\r\n\r\n/** @typedef {Object} SharedAnimationProps\r\n * @prop {string} [name]\r\n * @prop {boolean} [isPan]\r\n * @prop {boolean} [isMainScroll]\r\n * @prop {VoidFunction} [onComplete]\r\n * @prop {VoidFunction} [onFinish]\r\n */\r\n\r\n/** @typedef {SpringAnimation | CSSAnimation} Animation */\r\n/** @typedef {SpringAnimationProps | CssAnimationProps} AnimationProps */\r\n\r\n/**\r\n * Manages animations\r\n */\r\nclass Animations {\r\n  constructor() {\r\n    /** @type {Animation[]} */\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * @param {SpringAnimationProps} props\r\n   */\r\n  startSpring(props) {\r\n    this._start(props, true);\r\n  }\r\n\r\n  /**\r\n   * @param {CssAnimationProps} props\r\n   */\r\n  startTransition(props) {\r\n    this._start(props);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {AnimationProps} props\r\n   * @param {boolean} [isSpring]\r\n   * @returns {Animation}\r\n   */\r\n  _start(props, isSpring) {\r\n    const animation = isSpring\r\n      ? new SpringAnimation(/** @type SpringAnimationProps */ (props))\r\n      : new CSSAnimation(/** @type CssAnimationProps */ (props));\r\n\r\n    this.activeAnimations.push(animation);\r\n    animation.onFinish = () => this.stop(animation);\r\n\r\n    return animation;\r\n  }\r\n\r\n  /**\r\n   * @param {Animation} animation\r\n   */\r\n  stop(animation) {\r\n    animation.destroy();\r\n    const index = this.activeAnimations.indexOf(animation);\r\n    if (index > -1) {\r\n      this.activeAnimations.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  stopAll() { // _stopAllAnimations\r\n    this.activeAnimations.forEach((animation) => {\r\n      animation.destroy();\r\n    });\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * Stop all pan or zoom transitions\r\n   */\r\n  stopAllPan() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isPan) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  stopMainScroll() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isMainScroll) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns true if main scroll transition is running\r\n   */\r\n  // isMainScrollRunning() {\r\n  //   return this.activeAnimations.some((animation) => {\r\n  //     return animation.props.isMainScroll;\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */\r\n  isPanRunning() {\r\n    return this.activeAnimations.some((animation) => {\r\n      return animation.props.isPan;\r\n    });\r\n  }\r\n}\r\n\r\nexport default Animations;\r\n","/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */\r\nclass ScrollWheel {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    pswp.events.add(pswp.element, 'wheel', /** @type EventListener */(this._onWheel.bind(this)));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {WheelEvent} e\r\n   */\r\n  _onWheel(e) {\r\n    e.preventDefault();\r\n    const { currSlide } = this.pswp;\r\n    let { deltaX, deltaY } = e;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('wheel', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\r\n      // zoom\r\n      if (currSlide.isZoomable()) {\r\n        let zoomFactor = -deltaY;\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          zoomFactor *= 0.05;\r\n        } else {\r\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\r\n        }\r\n        zoomFactor = 2 ** zoomFactor;\r\n\r\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\r\n        currSlide.zoomTo(destZoomLevel, {\r\n          x: e.clientX,\r\n          y: e.clientY\r\n        });\r\n      }\r\n    } else {\r\n      // pan\r\n      if (currSlide.isPannable()) {\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          // 18 - average line height\r\n          deltaX *= 18;\r\n          deltaY *= 18;\r\n        }\r\n\r\n        currSlide.panTo(\r\n          currSlide.pan.x - deltaX,\r\n          currSlide.pan.y - deltaY\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default ScrollWheel;\r\n","import { createElement } from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementMarkupProps\r\n * @prop {boolean} [isCustomSVG]\r\n * @prop {string} inner\r\n * @prop {string} [outlineID]\r\n * @prop {number | string} [size]\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementData\r\n * @prop {DefaultUIElements | string} [name]\r\n * @prop {string} [className]\r\n * @prop {UIElementMarkup} [html]\r\n * @prop {boolean} [isButton]\r\n * @prop {keyof HTMLElementTagNameMap} [tagName]\r\n * @prop {string} [title]\r\n * @prop {string} [ariaLabel]\r\n * @prop {(element: HTMLElement, pswp: PhotoSwipe) => void} [onInit]\r\n * @prop {Methods<PhotoSwipe> | ((e: MouseEvent, element: HTMLElement, pswp: PhotoSwipe) => void)} [onClick]\r\n * @prop {'bar' | 'wrapper' | 'root'} [appendTo]\r\n * @prop {number} [order]\r\n */\r\n\r\n/** @typedef {'arrowPrev' | 'arrowNext' | 'close' | 'zoom' | 'counter'} DefaultUIElements */\r\n\r\n/** @typedef {string | UIElementMarkupProps} UIElementMarkup */\r\n\r\n/**\r\n * @param {UIElementMarkup} [htmlData]\r\n * @returns {string}\r\n */\r\nfunction addElementHTML(htmlData) {\r\n  if (typeof htmlData === 'string') {\r\n    // Allow developers to provide full svg,\r\n    // For example:\r\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\r\n    //   <path d=\"...\" />\r\n    //   <circle ... />\r\n    // </svg>\r\n    // Can also be any HTML string.\r\n    return htmlData;\r\n  }\r\n\r\n  if (!htmlData || !htmlData.isCustomSVG) {\r\n    return '';\r\n  }\r\n\r\n  const svgData = htmlData;\r\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">';\r\n  // replace all %d with size\r\n  out = out.split('%d').join(/** @type {string} */ (svgData.size || 32));\r\n\r\n  // Icons may contain outline/shadow,\r\n  // to make it we \"clone\" base icon shape and add border to it.\r\n  // Icon itself and border are styled via CSS.\r\n  //\r\n  // Property shadowID defines ID of element that should be cloned.\r\n  if (svgData.outlineID) {\r\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\r\n  }\r\n\r\n  out += svgData.inner;\r\n\r\n  out += '</svg>';\r\n\r\n  return out;\r\n}\r\n\r\nclass UIElement {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   * @param {UIElementData} data\r\n   */\r\n  constructor(pswp, data) {\r\n    const name = data.name || data.className;\r\n    let elementHTML = data.html;\r\n\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (pswp.options[name] === false) {\r\n      // exit if element is disabled from options\r\n      return;\r\n    }\r\n\r\n    // Allow to override SVG icons from options\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\r\n      // arrowPrevSVG\r\n      // arrowNextSVG\r\n      // closeSVG\r\n      // zoomSVG\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      elementHTML = pswp.options[name + 'SVG'];\r\n    }\r\n\r\n    pswp.dispatch('uiElementCreate', { data });\r\n\r\n    let className = '';\r\n    if (data.isButton) {\r\n      className += 'pswp__button ';\r\n      className += (data.className || `pswp__button--${data.name}`);\r\n    } else {\r\n      className += (data.className || `pswp__${data.name}`);\r\n    }\r\n\r\n    let tagName = data.isButton ? (data.tagName || 'button') : (data.tagName || 'div');\r\n    tagName = /** @type {keyof HTMLElementTagNameMap} */ (tagName.toLowerCase());\r\n    /** @type {HTMLElement} */\r\n    const element = createElement(className, tagName);\r\n\r\n    if (data.isButton) {\r\n      if (tagName === 'button') {\r\n        /** @type {HTMLButtonElement} */ (element).type = 'button';\r\n      }\r\n\r\n      let { title } = data;\r\n      const { ariaLabel } = data;\r\n\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      if (typeof pswp.options[name + 'Title'] === 'string') {\r\n        // @ts-expect-error lookup only by `data.name` maybe?\r\n        title = pswp.options[name + 'Title'];\r\n      }\r\n\r\n      if (title) {\r\n        element.title = title;\r\n      }\r\n\r\n      const ariaText = ariaLabel || title;\r\n      if (ariaText) {\r\n        element.setAttribute('aria-label', ariaText);\r\n      }\r\n    }\r\n\r\n    element.innerHTML = addElementHTML(elementHTML);\r\n\r\n    if (data.onInit) {\r\n      data.onInit(element, pswp);\r\n    }\r\n\r\n    if (data.onClick) {\r\n      element.onclick = (e) => {\r\n        if (typeof data.onClick === 'string') {\r\n          // @ts-ignore\r\n          pswp[data.onClick]();\r\n        } else if (typeof data.onClick === 'function') {\r\n          data.onClick(e, element, pswp);\r\n        }\r\n      };\r\n    }\r\n\r\n    // Top bar is default position\r\n    const appendTo = data.appendTo || 'bar';\r\n    /** @type {HTMLElement | undefined} root element by default */\r\n    let container = pswp.element;\r\n    if (appendTo === 'bar') {\r\n      if (!pswp.topBar) {\r\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', 'div', pswp.scrollWrap);\r\n      }\r\n      container = pswp.topBar;\r\n    } else {\r\n      // element outside of top bar gets a secondary class\r\n      // that makes element fade out on close\r\n      element.classList.add('pswp__hide-on-close');\r\n\r\n      if (appendTo === 'wrapper') {\r\n        container = pswp.scrollWrap;\r\n      }\r\n    }\r\n\r\n    container?.appendChild(pswp.applyFilters('uiElement', element, data));\r\n  }\r\n}\r\n\r\nexport default UIElement;\r\n","/*\r\n  Backward and forward arrow buttons\r\n */\r\n\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n *\r\n * @param {HTMLElement} element\r\n * @param {PhotoSwipe} pswp\r\n * @param {boolean} [isNextButton]\r\n */\r\nfunction initArrowButton(element, pswp, isNextButton) {\r\n  element.classList.add('pswp__button--arrow');\r\n  // TODO: this should point to a unique id for this instance\r\n  element.setAttribute('aria-controls', 'pswp__items');\r\n  pswp.on('change', () => {\r\n    if (!pswp.options.loop) {\r\n      if (isNextButton) {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\r\n      } else {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex > 0);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/** @type {UIElementData} */\r\nexport const arrowPrev = {\r\n  name: 'arrowPrev',\r\n  className: 'pswp__button--arrow--prev',\r\n  title: 'Previous',\r\n  order: 10,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'prev',\r\n  onInit: initArrowButton\r\n};\r\n\r\n/** @type {UIElementData} */\r\nexport const arrowNext = {\r\n  name: 'arrowNext',\r\n  className: 'pswp__button--arrow--next',\r\n  title: 'Next',\r\n  order: 11,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'next',\r\n  onInit: (el, pswp) => {\r\n    initArrowButton(el, pswp, true);\r\n  }\r\n};\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst closeButton = {\r\n  name: 'close',\r\n  title: 'Close',\r\n  order: 20,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\r\n    outlineID: 'pswp__icn-close'\r\n  },\r\n  onClick: 'close'\r\n};\r\n\r\nexport default closeButton;\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst zoomButton = {\r\n  name: 'zoom',\r\n  title: 'Zoom',\r\n  order: 10,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\r\n    outlineID: 'pswp__icn-zoom'\r\n  },\r\n  onClick: 'toggleZoom'\r\n};\r\n\r\nexport default zoomButton;\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nexport const loadingIndicator = {\r\n  name: 'preloader',\r\n  appendTo: 'bar',\r\n  order: 7,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\r\n    outlineID: 'pswp__icn-loading'\r\n  },\r\n  onInit: (indicatorElement, pswp) => {\r\n    /** @type {boolean | undefined} */\r\n    let isVisible;\r\n    /** @type {NodeJS.Timeout | null} */\r\n    let delayTimeout = null;\r\n\r\n    /**\r\n     * @param {string} className\r\n     * @param {boolean} add\r\n     */\r\n    const toggleIndicatorClass = (className, add) => {\r\n      indicatorElement.classList.toggle('pswp__preloader--' + className, add);\r\n    };\r\n\r\n    /**\r\n     * @param {boolean} visible\r\n     */\r\n    const setIndicatorVisibility = (visible) => {\r\n      if (isVisible !== visible) {\r\n        isVisible = visible;\r\n        toggleIndicatorClass('active', visible);\r\n      }\r\n    };\r\n\r\n    const updatePreloaderVisibility = () => {\r\n      if (!pswp.currSlide?.content.isLoading()) {\r\n        setIndicatorVisibility(false);\r\n        if (delayTimeout) {\r\n          clearTimeout(delayTimeout);\r\n          delayTimeout = null;\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (!delayTimeout) {\r\n        // display loading indicator with delay\r\n        delayTimeout = setTimeout(() => {\r\n          setIndicatorVisibility(Boolean(pswp.currSlide?.content.isLoading()));\r\n          delayTimeout = null;\r\n        }, pswp.options.preloaderDelay);\r\n      }\r\n    };\r\n\r\n    pswp.on('change', updatePreloaderVisibility);\r\n\r\n    pswp.on('loadComplete', (e) => {\r\n      if (pswp.currSlide === e.slide) {\r\n        updatePreloaderVisibility();\r\n      }\r\n    });\r\n\r\n    // expose the method\r\n    if (pswp.ui) {\r\n      pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\r\n    }\r\n  }\r\n};\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nexport const counterIndicator = {\r\n  name: 'counter',\r\n  order: 5,\r\n  onInit: (counterElement, pswp) => {\r\n    pswp.on('change', () => {\r\n      counterElement.innerText = (pswp.currIndex + 1)\r\n                                  + pswp.options.indexIndicatorSep\r\n                                  + pswp.getNumItems();\r\n    });\r\n  }\r\n};\r\n","import UIElement from './ui-element.js';\r\nimport { arrowPrev, arrowNext } from './button-arrow.js';\r\nimport closeButton from './button-close.js';\r\nimport zoomButton from './button-zoom.js';\r\nimport { loadingIndicator } from './loading-indicator.js';\r\nimport { counterIndicator } from './counter-indicator.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n\r\n/**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default, it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {HTMLElement} el\r\n * @param {boolean} isZoomedIn\r\n */\r\nfunction setZoomedIn(el, isZoomedIn) {\r\n  el.classList.toggle('pswp--zoomed-in', isZoomedIn);\r\n}\r\n\r\nclass UI {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isRegistered = false;\r\n    /** @type {UIElementData[]} */\r\n    this.uiElementsData = [];\r\n    /** @type {(UIElement | UIElementData)[]} */\r\n    this.items = [];\r\n    /** @type {() => void} */\r\n    this.updatePreloaderVisibility = () => {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {number | undefined}\r\n     */\r\n    this._lastUpdatedZoomLevel = undefined;\r\n  }\r\n\r\n  init() {\r\n    const { pswp } = this;\r\n    this.isRegistered = false;\r\n    this.uiElementsData = [\r\n      closeButton,\r\n      arrowPrev,\r\n      arrowNext,\r\n      zoomButton,\r\n      loadingIndicator,\r\n      counterIndicator\r\n    ];\r\n\r\n    pswp.dispatch('uiRegister');\r\n\r\n    // sort by order\r\n    this.uiElementsData.sort((a, b) => {\r\n      // default order is 0\r\n      return (a.order || 0) - (b.order || 0);\r\n    });\r\n\r\n    this.items = [];\r\n\r\n    this.isRegistered = true;\r\n    this.uiElementsData.forEach((uiElementData) => {\r\n      this.registerElement(uiElementData);\r\n    });\r\n\r\n    pswp.on('change', () => {\r\n      pswp.element?.classList.toggle('pswp--one-slide', pswp.getNumItems() === 1);\r\n    });\r\n\r\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\r\n  }\r\n\r\n  /**\r\n   * @param {UIElementData} elementData\r\n   */\r\n  registerElement(elementData) {\r\n    if (this.isRegistered) {\r\n      this.items.push(\r\n        new UIElement(this.pswp, elementData)\r\n      );\r\n    } else {\r\n      this.uiElementsData.push(elementData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   *\r\n   * @private\r\n   */\r\n  _onZoomPanUpdate() {\r\n    const { template, currSlide, options } = this.pswp;\r\n\r\n    if (this.pswp.opener.isClosing || !template || !currSlide) {\r\n      return;\r\n    }\r\n\r\n    let { currZoomLevel } = currSlide;\r\n\r\n    // if not open yet - check against initial zoom level\r\n    if (!this.pswp.opener.isOpen) {\r\n      currZoomLevel = currSlide.zoomLevels.initial;\r\n    }\r\n\r\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\r\n      return;\r\n    }\r\n    this._lastUpdatedZoomLevel = currZoomLevel;\r\n\r\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary;\r\n\r\n    // Initial and secondary zoom levels are almost equal\r\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\r\n      // disable zoom\r\n      setZoomedIn(template, false);\r\n      template.classList.remove('pswp--zoom-allowed');\r\n      return;\r\n    }\r\n\r\n    template.classList.add('pswp--zoom-allowed');\r\n\r\n    const potentialZoomLevel = currZoomLevel === currSlide.zoomLevels.initial\r\n      ? currSlide.zoomLevels.secondary : currSlide.zoomLevels.initial;\r\n\r\n    setZoomedIn(template, potentialZoomLevel <= currZoomLevel);\r\n\r\n    if (options.imageClickAction === 'zoom'\r\n        || options.imageClickAction === 'zoom-or-close') {\r\n      template.classList.add('pswp--click-to-zoom');\r\n    }\r\n  }\r\n}\r\n\r\nexport default UI;\r\n","/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/** @typedef {{ x: number; y: number; w: number; innerRect?: { w: number; h: number; x: number; y: number } }} Bounds */\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @returns Bounds\r\n */\r\nfunction getBoundsByElement(el) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n  return {\r\n    x: thumbAreaRect.left,\r\n    y: thumbAreaRect.top,\r\n    w: thumbAreaRect.width\r\n  };\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @param {number} imageWidth\r\n * @param {number} imageHeight\r\n * @returns Bounds\r\n */\r\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n\r\n  // fill image into the area\r\n  // (do they same as object-fit:cover does to retrieve coordinates)\r\n  const hRatio = thumbAreaRect.width / imageWidth;\r\n  const vRatio = thumbAreaRect.height / imageHeight;\r\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\r\n\r\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\r\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\r\n\r\n  /**\r\n   * Coordinates of the image,\r\n   * as if it was not cropped,\r\n   * height is calculated automatically\r\n   *\r\n   * @type {Bounds}\r\n   */\r\n  const bounds = {\r\n    x: thumbAreaRect.left + offsetX,\r\n    y: thumbAreaRect.top + offsetY,\r\n    w: imageWidth * fillZoomLevel\r\n  };\r\n\r\n  // Coordinates of inner crop area\r\n  // relative to the image\r\n  bounds.innerRect = {\r\n    w: thumbAreaRect.width,\r\n    h: thumbAreaRect.height,\r\n    x: offsetX,\r\n    y: offsetY\r\n  };\r\n\r\n  return bounds;\r\n}\r\n\r\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {number} index\r\n * @param {SlideData} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns {Bounds | undefined}\r\n */\r\nexport function getThumbBounds(index, itemData, instance) {\r\n  // legacy event, before filters were introduced\r\n  const event = instance.dispatch('thumbBounds', {\r\n    index,\r\n    itemData,\r\n    instance\r\n  });\r\n  // @ts-expect-error\r\n  if (event.thumbBounds) {\r\n    // @ts-expect-error\r\n    return event.thumbBounds;\r\n  }\r\n\r\n  const { element } = itemData;\r\n  /** @type {Bounds | undefined} */\r\n  let thumbBounds;\r\n  /** @type {HTMLElement | null | undefined} */\r\n  let thumbnail;\r\n\r\n  if (element && instance.options.thumbSelector !== false) {\r\n    const thumbSelector = instance.options.thumbSelector || 'img';\r\n    thumbnail = element.matches(thumbSelector)\r\n      ? element : /** @type {HTMLElement | null} */ (element.querySelector(thumbSelector));\r\n  }\r\n\r\n  thumbnail = instance.applyFilters('thumbEl', thumbnail, itemData, index);\r\n\r\n  if (thumbnail) {\r\n    if (!itemData.thumbCropped) {\r\n      thumbBounds = getBoundsByElement(thumbnail);\r\n    } else {\r\n      thumbBounds = getCroppedBoundsByElement(\r\n        thumbnail,\r\n        itemData.width || itemData.w || 0,\r\n        itemData.height || itemData.h || 0\r\n      );\r\n    }\r\n  }\r\n\r\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\r\n}\r\n","/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide | undefined, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point | undefined, transitionDuration: number | false | undefined }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource | undefined, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource | undefined) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement | null | undefined, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thubmnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds | undefined, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thubmnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    this.defaultPrevented = false;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe | undefined} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions | undefined} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name]?.push({ fn, priority });\r\n    this._filters[name]?.sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    this.pswp?.addFilter(name, fn, priority);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    this._filters[name]?.forEach((filter) => {\r\n      // @ts-expect-error\r\n      args[0] = filter.fn.apply(this, args);\r\n    });\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name]?.push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    this.pswp?.on(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    this.pswp?.off(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    this._listeners[name]?.forEach((listener) => {\r\n      listener.call(this, event);\r\n    });\r\n\r\n    return event;\r\n  }\r\n}\r\n\r\nexport default Eventable;\r\n","import { createElement, setWidthHeight, toTransformString } from '../util/util.js';\r\n\r\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    /** @type {HTMLImageElement | HTMLDivElement | null} */\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : 'div',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      const imgEl = /** @type {HTMLImageElement} */ (this.element);\r\n      imgEl.decoding = 'async';\r\n      imgEl.alt = '';\r\n      imgEl.src = imageSrc;\r\n      imgEl.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hidden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element?.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\r\n\r\nexport default Placeholder;\r\n","import { createElement, isSafari, LOAD_STATE, setWidthHeight } from '../util/util.js';\r\nimport Placeholder from './placeholder.js';\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement | undefined} */\r\n    this.element = undefined;\r\n    /** @type {Placeholder | undefined} */\r\n    this.placeholder = undefined;\r\n    /** @type {Slide | undefined} */\r\n    this.slide = undefined;\r\n\r\n    this.displayedImageWidth = 0;\r\n    this.displayedImageHeight = 0;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    this.isDecoding = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = undefined;\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean} isLazy\r\n   * @param {boolean} [reload]\r\n   */\r\n  load(isLazy, reload) {\r\n    if (this.slide && this.usePlaceholder()) {\r\n      if (!this.placeholder) {\r\n        const placeholderSrc = this.instance.applyFilters(\r\n          'placeholderSrc',\r\n          // use  image-based placeholder only for the first slide,\r\n          // as rendering (even small stretched thumbnail) is an expensive operation\r\n          (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n          this\r\n        );\r\n        this.placeholder = new Placeholder(\r\n          placeholderSrc,\r\n          this.slide.container\r\n        );\r\n      } else {\r\n        const placeholderEl = this.placeholder.element;\r\n        // Add placeholder to DOM if it was already created\r\n        if (placeholderEl && !placeholderEl.parentElement) {\r\n          this.slide.container.prepend(placeholderEl);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.element = createElement('pswp__img', 'img');\r\n      // Start loading only after width is defined, as sizes might depend on it.\r\n      // Due to Safari feature, we must define sizes before srcset.\r\n      if (this.displayedImageWidth) {\r\n        this.loadImage(isLazy);\r\n      }\r\n    } else {\r\n      this.element = createElement('pswp__content', 'div');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    if (!this.isImageContent()\r\n      || !this.element\r\n      || this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const imageElement = /** @type HTMLImageElement */ (this.element);\r\n\r\n    this.updateSrcsetSizes();\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src ?? '';\r\n    imageElement.alt = this.data.alt ?? '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide && this.element) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n\r\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is in error state\r\n   */\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    if (this.instance.dispatch(\r\n      'contentResize',\r\n      { content: this, width, height }).defaultPrevented\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const isInitialSizeUpdate = (!this.displayedImageWidth && width);\r\n\r\n      this.displayedImageWidth = width;\r\n      this.displayedImageHeight = height;\r\n\r\n      if (isInitialSizeUpdate) {\r\n        this.loadImage(false);\r\n      } else {\r\n        this.updateSrcsetSizes();\r\n      }\r\n\r\n      if (this.slide) {\r\n        this.instance.dispatch(\r\n          'imageSizeChange',\r\n          { slide: this.slide, width, height, content: this }\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\r\n  updateSrcsetSizes() {\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    if (!this.isImageContent() || !this.element || !this.data.srcset) {\r\n      return;\r\n    }\r\n\r\n    const image = /** @type HTMLImageElement */ (this.element);\r\n    const sizesWidth = this.instance.applyFilters(\r\n      'srcsetSizesWidth',\r\n      this.displayedImageWidth,\r\n      this\r\n    );\r\n\r\n    if (\r\n      !image.dataset.largestUsedSize\r\n      || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)\r\n    ) {\r\n      image.sizes = sizesWidth + 'px';\r\n      image.dataset.largestUsedSize = String(sizesWidth);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = undefined;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.destroy();\r\n      this.placeholder = undefined;\r\n    }\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      let errorMsgEl = createElement('pswp__error-msg', 'div');\r\n      errorMsgEl.innerText = this.instance.options?.errorMsg ?? '';\r\n      errorMsgEl = /** @type {HTMLDivElement} */ (this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      ));\r\n      this.element = createElement('pswp__content pswp__error-msg-container', 'div');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerText = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    if (this.isAttached || !this.element) {\r\n      return;\r\n    }\r\n\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const supportsDecode = ('decode' in this.element);\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      // We do not do this in Safari due to partial loading bug.\r\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\r\n        this.isDecoding = true;\r\n        // purposefully using finally instead of then,\r\n        // as if srcset sizes changes dynamically - it may cause decode error\r\n        /** @type {HTMLImageElement} */\r\n        (this.element).decode().catch(() => {}).finally(() => {\r\n          this.isDecoding = false;\r\n          this.appendImage();\r\n        });\r\n      } else {\r\n        this.appendImage();\r\n      }\r\n    } else if (this.slide && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented\r\n      || !this.slide) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent() && this.isDecoding && !isSafari()) {\r\n      // add image to slide when it becomes active,\r\n      // even if it's not finished decoding\r\n      this.appendImage();\r\n    } else if (this.isError()) {\r\n      this.load(false, true); // try to reload\r\n    }\r\n\r\n    if (this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'false');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n    if (this.slide && this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'true');\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n\r\n    if (this.placeholder && this.placeholder.element) {\r\n      this.placeholder.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n\r\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Content;\r\n","import { getViewportSize, getPanAreaSize } from '../util/viewport-size.js';\r\nimport ZoomLevel from './zoom-level.js';\r\n\r\n/** @typedef {import('./content.js').default} Content */\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n * @param {number} index\r\n * @returns {Content} Image that is being decoded or false.\r\n */\r\nexport function lazyLoadData(itemData, instance, index) {\r\n  const content = instance.createContentFromData(itemData, index);\r\n  /** @type {ZoomLevel | undefined} */\r\n  let zoomLevel;\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset, and we need to define sizes\r\n  if (options) {\r\n    zoomLevel = new ZoomLevel(options, itemData, -1);\r\n\r\n    let viewportSize;\r\n    if (instance.pswp) {\r\n      viewportSize = instance.pswp.viewportSize;\r\n    } else {\r\n      viewportSize = getViewportSize(options, instance);\r\n    }\r\n\r\n    const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n    zoomLevel.update(content.width, content.height, panAreaSize);\r\n  }\r\n\r\n  content.lazyLoad();\r\n\r\n  if (zoomLevel) {\r\n    content.setDisplayedSize(\r\n      Math.ceil(content.width * zoomLevel.initial),\r\n      Math.ceil(content.height * zoomLevel.initial)\r\n    );\r\n  }\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default, it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n * @returns {Content | undefined}\r\n */\r\nexport function lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\nclass ContentLoader {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    /** @type {Content[]} */\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number} [diff] Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} initialIndex\r\n   */\r\n  loadSlideByIndex(initialIndex) {\r\n    const index = this.pswp.getLoopedIndex(initialIndex);\r\n    // try to get cached content\r\n    let content = this.getContentByIndex(index);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Slide} slide\r\n   * @returns {Content}\r\n   */\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByIndex(slide.index);\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data, slide.index);\r\n      this.addToCache(content);\r\n    }\r\n\r\n    // assign slide to content\r\n    content.setSlide(slide);\r\n\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByIndex(content.index);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  removeByIndex(index) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   * @returns {Content | undefined}\r\n   */\r\n  getContentByIndex(index) {\r\n    return this._cachedItems.find(content => content.index === index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = [];\r\n  }\r\n}\r\n\r\nexport default ContentLoader;\r\n","import Eventable from './eventable.js';\r\nimport { getElementsFromOption } from '../util/util.js';\r\nimport Content from '../slide/content.js';\r\nimport { lazyLoadData } from '../slide/loader.js';\r\n\r\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems = 0;\r\n    const dataSource = this.options?.dataSource;\r\n\r\n    if (dataSource && 'length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   * @returns {Content}\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   * @returns {SlideData}\r\n   */\r\n  getItemData(index) {\r\n    const dataSource = this.options?.dataSource;\r\n    /** @type {SlideData | HTMLElement} */\r\n    let dataSourceItem = {};\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   * @returns {HTMLElement[]}\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options?.children || this.options?.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   * @returns {SlideData}\r\n   */\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (\r\n      element.tagName === 'A'\r\n        ? element\r\n        : element.querySelector('a')\r\n    );\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = linkEl.dataset.pswpWidth ? parseInt(linkEl.dataset.pswpWidth, 10) : 0;\r\n      itemData.height = linkEl.dataset.pswpHeight ? parseInt(linkEl.dataset.pswpHeight, 10) : 0;\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt') ?? '';\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n\r\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns {Content} Image that is being decoded or false.\r\n   */\r\n  lazyLoadData(itemData, index) {\r\n    return lazyLoadData(itemData, this, index);\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeBase;\r\n","import {\r\n  setTransform,\r\n  equalizePoints,\r\n  decodeImage,\r\n  toTransformString\r\n} from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/get-thumb-bounds.js').Bounds} Bounds */\r\n/** @typedef {import('./util/animations.js').AnimationProps} AnimationProps */\r\n\r\n// some browsers do not paint\r\n// elements which opacity is set to 0,\r\n// since we need to pre-render elements for the animation -\r\n// we set it to the minimum amount\r\nconst MIN_OPACITY = 0.003;\r\n\r\n/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */\r\nclass Opener {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isClosed = true;\r\n    this.isOpen = false;\r\n    this.isClosing = false;\r\n    this.isOpening = false;\r\n    /**\r\n     * @private\r\n     * @type {number | false | undefined}\r\n     */\r\n    this._duration = undefined;\r\n    /** @private */\r\n    this._useAnimation = false;\r\n    /** @private */\r\n    this._croppedZoom = false;\r\n    /** @private */\r\n    this._animateRootOpacity = false;\r\n    /** @private */\r\n    this._animateBgOpacity = false;\r\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | HTMLImageElement | null | undefined }\r\n     */\r\n    this._placeholder = undefined;\r\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | undefined }\r\n     */\r\n    this._opacityElement = undefined;\r\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | undefined }\r\n     */\r\n    this._cropContainer1 = undefined;\r\n    /**\r\n     * @private\r\n     * @type { HTMLElement | null | undefined }\r\n     */\r\n    this._cropContainer2 = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Bounds | undefined}\r\n     */\r\n    this._thumbBounds = undefined;\r\n\r\n\r\n    this._prepareOpen = this._prepareOpen.bind(this);\r\n\r\n    // Override initial zoom and pan position\r\n    pswp.on('firstZoomPan', this._prepareOpen);\r\n  }\r\n\r\n  open() {\r\n    this._prepareOpen();\r\n    this._start();\r\n  }\r\n\r\n  close() {\r\n    if (this.isClosed || this.isClosing || this.isOpening) {\r\n      // if we close during opening animation\r\n      // for now do nothing,\r\n      // browsers aren't good at changing the direction of the CSS transition\r\n      return;\r\n    }\r\n\r\n    const slide = this.pswp.currSlide;\r\n\r\n    this.isOpen = false;\r\n    this.isOpening = false;\r\n    this.isClosing = true;\r\n    this._duration = this.pswp.options.hideAnimationDuration;\r\n\r\n    if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n      this._duration = 0;\r\n    }\r\n\r\n    this._applyStartProps();\r\n    setTimeout(() => {\r\n      this._start();\r\n    }, this._croppedZoom ? 30 : 0);\r\n  }\r\n\r\n  /** @private */\r\n  _prepareOpen() {\r\n    this.pswp.off('firstZoomPan', this._prepareOpen);\r\n    if (!this.isOpening) {\r\n      const slide = this.pswp.currSlide;\r\n      this.isOpening = true;\r\n      this.isClosing = false;\r\n      this._duration = this.pswp.options.showAnimationDuration;\r\n      if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n        this._duration = 0;\r\n      }\r\n      this._applyStartProps();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _applyStartProps() {\r\n    const { pswp } = this;\r\n    const slide = this.pswp.currSlide;\r\n    const { options } = pswp;\r\n\r\n    if (options.showHideAnimationType === 'fade') {\r\n      options.showHideOpacity = true;\r\n      this._thumbBounds = undefined;\r\n    } else if (options.showHideAnimationType === 'none') {\r\n      options.showHideOpacity = false;\r\n      this._duration = 0;\r\n      this._thumbBounds = undefined;\r\n    } else if (this.isOpening && pswp._initialThumbBounds) {\r\n      // Use initial bounds if defined\r\n      this._thumbBounds = pswp._initialThumbBounds;\r\n    } else {\r\n      this._thumbBounds = this.pswp.getThumbBounds();\r\n    }\r\n\r\n    this._placeholder = slide?.getPlaceholderElement();\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Discard animations when duration is less than 50ms\r\n    this._useAnimation = Boolean(this._duration && this._duration > 50);\r\n    this._animateZoom = Boolean(this._thumbBounds)\r\n                        && slide?.content.usePlaceholder()\r\n                        && (!this.isClosing || !pswp.mainScroll.isShifted());\r\n    if (!this._animateZoom) {\r\n      this._animateRootOpacity = true;\r\n\r\n      if (this.isOpening && slide) {\r\n        slide.zoomAndPanToInitial();\r\n        slide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      this._animateRootOpacity = options.showHideOpacity ?? false;\r\n    }\r\n    this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;\r\n    this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\r\n\r\n    if (!this._useAnimation) {\r\n      this._duration = 0;\r\n      this._animateZoom = false;\r\n      this._animateBgOpacity = false;\r\n      this._animateRootOpacity = true;\r\n      if (this.isOpening) {\r\n        if (pswp.element) {\r\n          pswp.element.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.applyBgOpacity(1);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this._animateZoom && this._thumbBounds && this._thumbBounds.innerRect) {\r\n      // Properties are used when animation from cropped thumbnail\r\n      this._croppedZoom = true;\r\n      this._cropContainer1 = this.pswp.container;\r\n      this._cropContainer2 = this.pswp.currSlide?.holderElement;\r\n\r\n      if (pswp.container) {\r\n        pswp.container.style.overflow = 'hidden';\r\n        pswp.container.style.width = pswp.viewportSize.x + 'px';\r\n      }\r\n    } else {\r\n      this._croppedZoom = false;\r\n    }\r\n\r\n    if (this.isOpening) {\r\n      // Apply styles before opening transition\r\n      if (this._animateRootOpacity) {\r\n        if (pswp.element) {\r\n          pswp.element.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.applyBgOpacity(1);\r\n      } else {\r\n        if (this._animateBgOpacity && pswp.bg) {\r\n          pswp.bg.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        if (pswp.element) {\r\n          pswp.element.style.opacity = '1';\r\n        }\r\n      }\r\n\r\n      if (this._animateZoom) {\r\n        this._setClosedStateZoomPan();\r\n        if (this._placeholder) {\r\n          // tell browser that we plan to animate the placeholder\r\n          this._placeholder.style.willChange = 'transform';\r\n\r\n          // hide placeholder to allow hiding of\r\n          // elements that overlap it (such as icons over the thumbnail)\r\n          this._placeholder.style.opacity = String(MIN_OPACITY);\r\n        }\r\n      }\r\n    } else if (this.isClosing) {\r\n      // hide nearby slides to make sure that\r\n      // they are not painted during the transition\r\n      if (pswp.mainScroll.itemHolders[0]) {\r\n        pswp.mainScroll.itemHolders[0].el.style.display = 'none';\r\n      }\r\n      if (pswp.mainScroll.itemHolders[2]) {\r\n        pswp.mainScroll.itemHolders[2].el.style.display = 'none';\r\n      }\r\n\r\n      if (this._croppedZoom) {\r\n        if (pswp.mainScroll.x !== 0) {\r\n          // shift the main scroller to zero position\r\n          pswp.mainScroll.resetPosition();\r\n          pswp.mainScroll.resize();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _start() {\r\n    if (this.isOpening\r\n        && this._useAnimation\r\n        && this._placeholder\r\n        && this._placeholder.tagName === 'IMG') {\r\n      // To ensure smooth animation\r\n      // we wait till the current slide image placeholder is decoded,\r\n      // but no longer than 250ms,\r\n      // and no shorter than 50ms\r\n      // (just using requestanimationframe is not enough in Firefox,\r\n      // for some reason)\r\n      new Promise((resolve) => {\r\n        let decoded = false;\r\n        let isDelaying = true;\r\n        decodeImage(/** @type {HTMLImageElement} */ (this._placeholder)).finally(() => {\r\n          decoded = true;\r\n          if (!isDelaying) {\r\n            resolve(true);\r\n          }\r\n        });\r\n        setTimeout(() => {\r\n          isDelaying = false;\r\n          if (decoded) {\r\n            resolve(true);\r\n          }\r\n        }, 50);\r\n        setTimeout(resolve, 250);\r\n      }).finally(() => this._initiate());\r\n    } else {\r\n      this._initiate();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _initiate() {\r\n    this.pswp.element?.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\r\n\r\n    this.pswp.dispatch(\r\n      this.isOpening ? 'openingAnimationStart' : 'closingAnimationStart'\r\n    );\r\n\r\n    // legacy event\r\n    this.pswp.dispatch(\r\n      /** @type {'initialZoomIn' | 'initialZoomOut'} */\r\n      ('initialZoom' + (this.isOpening ? 'In' : 'Out'))\r\n    );\r\n\r\n    this.pswp.element?.classList.toggle('pswp--ui-visible', this.isOpening);\r\n\r\n    if (this.isOpening) {\r\n      if (this._placeholder) {\r\n        // unhide the placeholder\r\n        this._placeholder.style.opacity = '1';\r\n      }\r\n      this._animateToOpenState();\r\n    } else if (this.isClosing) {\r\n      this._animateToClosedState();\r\n    }\r\n\r\n    if (!this._useAnimation) {\r\n      this._onAnimationComplete();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _onAnimationComplete() {\r\n    const { pswp } = this;\r\n    this.isOpen = this.isOpening;\r\n    this.isClosed = this.isClosing;\r\n    this.isOpening = false;\r\n    this.isClosing = false;\r\n\r\n    pswp.dispatch(\r\n      this.isOpen ? 'openingAnimationEnd' : 'closingAnimationEnd'\r\n    );\r\n\r\n    // legacy event\r\n    pswp.dispatch(\r\n      /** @type {'initialZoomInEnd' | 'initialZoomOutEnd'} */\r\n      ('initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'))\r\n    );\r\n\r\n    if (this.isClosed) {\r\n      pswp.destroy();\r\n    } else if (this.isOpen) {\r\n      if (this._animateZoom && pswp.container) {\r\n        pswp.container.style.overflow = 'visible';\r\n        pswp.container.style.width = '100%';\r\n      }\r\n      pswp.currSlide?.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _animateToOpenState() {\r\n    const { pswp } = this;\r\n    if (this._animateZoom) {\r\n      if (this._croppedZoom && this._cropContainer1 && this._cropContainer2) {\r\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\r\n        this._animateTo(this._cropContainer2, 'transform', 'none');\r\n      }\r\n\r\n      if (pswp.currSlide) {\r\n        pswp.currSlide.zoomAndPanToInitial();\r\n        this._animateTo(\r\n          pswp.currSlide.container,\r\n          'transform',\r\n          pswp.currSlide.getCurrentTransform()\r\n        );\r\n      }\r\n    }\r\n\r\n    if (this._animateBgOpacity && pswp.bg) {\r\n      this._animateTo(pswp.bg, 'opacity', String(pswp.options.bgOpacity));\r\n    }\r\n\r\n    if (this._animateRootOpacity && pswp.element) {\r\n      this._animateTo(pswp.element, 'opacity', '1');\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _animateToClosedState() {\r\n    const { pswp } = this;\r\n\r\n    if (this._animateZoom) {\r\n      this._setClosedStateZoomPan(true);\r\n    }\r\n\r\n    // do not animate opacity if it's already at 0\r\n    if (this._animateBgOpacity && pswp.bgOpacity > 0.01 && pswp.bg) {\r\n      this._animateTo(pswp.bg, 'opacity', '0');\r\n    }\r\n\r\n    if (this._animateRootOpacity && pswp.element) {\r\n      this._animateTo(pswp.element, 'opacity', '0');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {boolean} [animate]\r\n   */\r\n  _setClosedStateZoomPan(animate) {\r\n    if (!this._thumbBounds) return;\r\n\r\n    const { pswp } = this;\r\n    const { innerRect } = this._thumbBounds;\r\n    const { currSlide, viewportSize } = pswp;\r\n\r\n    if (this._croppedZoom && innerRect && this._cropContainer1 && this._cropContainer2) {\r\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\r\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\r\n      const containerTwoPanX = viewportSize.x - innerRect.w;\r\n      const containerTwoPanY = viewportSize.y - innerRect.h;\r\n\r\n\r\n      if (animate) {\r\n        this._animateTo(\r\n          this._cropContainer1,\r\n          'transform',\r\n          toTransformString(containerOnePanX, containerOnePanY)\r\n        );\r\n\r\n        this._animateTo(\r\n          this._cropContainer2,\r\n          'transform',\r\n          toTransformString(containerTwoPanX, containerTwoPanY)\r\n        );\r\n      } else {\r\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\r\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\r\n      }\r\n    }\r\n\r\n    if (currSlide) {\r\n      equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\r\n      currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\r\n      if (animate) {\r\n        this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\r\n      } else {\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {HTMLElement} target\r\n   * @param {'transform' | 'opacity'} prop\r\n   * @param {string} propValue\r\n   */\r\n  _animateTo(target, prop, propValue) {\r\n    if (!this._duration) {\r\n      target.style[prop] = propValue;\r\n      return;\r\n    }\r\n\r\n    const { animations } = this.pswp;\r\n    /** @type {AnimationProps} */\r\n    const animProps = {\r\n      duration: this._duration,\r\n      easing: this.pswp.options.easing,\r\n      onComplete: () => {\r\n        if (!animations.activeAnimations.length) {\r\n          this._onAnimationComplete();\r\n        }\r\n      },\r\n      target,\r\n    };\r\n    animProps[prop] = propValue;\r\n    animations.startTransition(animProps);\r\n  }\r\n}\r\n\r\nexport default Opener;\r\n","import {\r\n  createElement,\r\n  equalizePoints,\r\n  pointsEqual,\r\n  clamp,\r\n} from './util/util.js';\r\n\r\nimport DOMEvents from './util/dom-events.js';\r\nimport Slide from './slide/slide.js';\r\nimport Gestures from './gestures/gestures.js';\r\nimport MainScroll from './main-scroll.js';\r\n\r\nimport Keyboard from './keyboard.js';\r\nimport Animations from './util/animations.js';\r\nimport ScrollWheel from './scroll-wheel.js';\r\nimport UI from './ui/ui.js';\r\nimport { getViewportSize } from './util/viewport-size.js';\r\nimport { getThumbBounds } from './slide/get-thumb-bounds.js';\r\nimport PhotoSwipeBase from './core/base.js';\r\nimport Opener from './opener.js';\r\nimport ContentLoader from './slide/loader.js';\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('./slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('./slide/zoom-level.js').ZoomLevelOption} ZoomLevelOption */\r\n/** @typedef {import('./ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('./main-scroll.js').ItemHolder} ItemHolder */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n/** @typedef {import('./slide/get-thumb-bounds').Bounds} Bounds */\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('./core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('./core/eventable.js').AugmentedEvent<T>} AugmentedEvent<T>\r\n */\r\n\r\n/** @typedef {{ x: number; y: number; id?: string | number }} Point */\r\n/** @typedef {{ top: number; bottom: number; left: number; right: number }} Padding */\r\n/** @typedef {SlideData[]} DataSourceArray */\r\n/** @typedef {{ gallery: HTMLElement; items?: HTMLElement[] }} DataSourceObject */\r\n/** @typedef {DataSourceArray | DataSourceObject} DataSource */\r\n/** @typedef {(point: Point, originalEvent: PointerEvent) => void} ActionFn */\r\n/** @typedef {'close' | 'next' | 'zoom' | 'zoom-or-close' | 'toggle-controls'} ActionType */\r\n/** @typedef {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} PhotoSwipeModule */\r\n/** @typedef {PhotoSwipeModule | Promise<PhotoSwipeModule> | (() => Promise<PhotoSwipeModule>)} PhotoSwipeModuleOption */\r\n\r\n/**\r\n * @typedef {string | NodeListOf<HTMLElement> | HTMLElement[] | HTMLElement} ElementProvider\r\n */\r\n\r\n/** @typedef {Partial<PreparedPhotoSwipeOptions>} PhotoSwipeOptions https://photoswipe.com/options/ */\r\n/**\r\n * @typedef {Object} PreparedPhotoSwipeOptions\r\n *\r\n * @prop {DataSource} [dataSource]\r\n * Pass an array of any items via dataSource option. Its length will determine amount of slides\r\n * (which may be modified further from numItems event).\r\n *\r\n * Each item should contain data that you need to generate slide\r\n * (for image slide it would be src (image URL), width (image width), height, srcset, alt).\r\n *\r\n * If these properties are not present in your initial array, you may \"pre-parse\" each item from itemData filter.\r\n *\r\n * @prop {number} bgOpacity\r\n * Background backdrop opacity, always define it via this option and not via CSS rgba color.\r\n *\r\n * @prop {number} spacing\r\n * Spacing between slides. Defined as ratio relative to the viewport width (0.1 = 10% of viewport).\r\n *\r\n * @prop {boolean} allowPanToNext\r\n * Allow swipe navigation to the next slide when the current slide is zoomed. Does not apply to mouse events.\r\n *\r\n * @prop {boolean} loop\r\n * If set to true you'll be able to swipe from the last to the first image.\r\n * Option is always false when there are less than 3 slides.\r\n *\r\n * @prop {boolean} [wheelToZoom]\r\n * By default PhotoSwipe zooms image with ctrl-wheel, if you enable this option - image will zoom just via wheel.\r\n *\r\n * @prop {boolean} pinchToClose\r\n * Pinch touch gesture to close the gallery.\r\n *\r\n * @prop {boolean} closeOnVerticalDrag\r\n * Vertical drag gesture to close the PhotoSwipe.\r\n *\r\n * @prop {Padding} [padding]\r\n * Slide area padding (in pixels).\r\n *\r\n * @prop {(viewportSize: Point, itemData: SlideData, index: number) => Padding} [paddingFn]\r\n * The option is checked frequently, so make sure it's performant. Overrides padding option if defined. For example:\r\n *\r\n * @prop {number | false} hideAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} showAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} zoomAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {string} easing\r\n * String, 'cubic-bezier(.4,0,.22,1)'. CSS easing function for open/close/zoom transitions.\r\n *\r\n * @prop {boolean} escKey\r\n * Esc key to close.\r\n *\r\n * @prop {boolean} arrowKeys\r\n * Left/right arrow keys for navigation.\r\n *\r\n * @prop {boolean} returnFocus\r\n * Restore focus the last active element after PhotoSwipe is closed.\r\n *\r\n * @prop {boolean} clickToCloseNonZoomable\r\n * If image is not zoomable (for example, smaller than viewport) it can be closed by clicking on it.\r\n *\r\n * @prop {ActionType | ActionFn | false} imageClickAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} bgClickAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} tapAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} doubleTapAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {number} preloaderDelay\r\n * Delay before the loading indicator will be displayed,\r\n * if image is loaded during it - the indicator will not be displayed at all. Can be zero.\r\n *\r\n * @prop {string} indexIndicatorSep\r\n * Used for slide count indicator (\"1 of 10 \").\r\n *\r\n * @prop {(options: PhotoSwipeOptions, pswp: PhotoSwipeBase) => Point} [getViewportSizeFn]\r\n * A function that should return slide viewport width and height, in format {x: 100, y: 100}.\r\n *\r\n * @prop {string} errorMsg\r\n * Message to display when the image wasn't able to load. If you need to display HTML - use contentErrorElement filter.\r\n *\r\n * @prop {[number, number]} preload\r\n * Lazy loading of nearby slides based on direction of movement. Should be an array with two integers,\r\n * first one - number of items to preload before the current image, second one - after the current image.\r\n * Two nearby images are always loaded.\r\n *\r\n * @prop {string} [mainClass]\r\n * Class that will be added to the root element of PhotoSwipe, may contain multiple separated by space.\r\n * Example on Styling page.\r\n *\r\n * @prop {HTMLElement} [appendToEl]\r\n * Element to which PhotoSwipe dialog will be appended when it opens.\r\n *\r\n * @prop {number} maxWidthToAnimate\r\n * Maximum width of image to animate, if initial rendered image width\r\n * is larger than this value - the opening/closing transition will be automatically disabled.\r\n *\r\n * @prop {string} [closeTitle]\r\n * Translating\r\n *\r\n * @prop {string} [zoomTitle]\r\n * Translating\r\n *\r\n * @prop {string} [arrowPrevTitle]\r\n * Translating\r\n *\r\n * @prop {string} [arrowNextTitle]\r\n * Translating\r\n *\r\n * @prop {'zoom' | 'fade' | 'none'} [showHideAnimationType]\r\n * To adjust opening or closing transition type use lightbox option `showHideAnimationType` (`String`).\r\n * It supports three values - `zoom` (default), `fade` (default if there is no thumbnail) and `none`.\r\n *\r\n * Animations are automatically disabled if user `(prefers-reduced-motion: reduce)`.\r\n *\r\n * @prop {number} index\r\n * Defines start slide index.\r\n *\r\n * @prop {(e: MouseEvent) => number} [getClickedIndexFn]\r\n *\r\n * @prop {boolean} [arrowPrev]\r\n * @prop {boolean} [arrowNext]\r\n * @prop {boolean} [zoom]\r\n * @prop {boolean} [close]\r\n * @prop {boolean} [counter]\r\n *\r\n * @prop {string} [arrowPrevSVG]\r\n * @prop {string} [arrowNextSVG]\r\n * @prop {string} [zoomSVG]\r\n * @prop {string} [closeSVG]\r\n * @prop {string} [counterSVG]\r\n *\r\n * @prop {string} [arrowPrevTitle]\r\n * @prop {string} [arrowNextTitle]\r\n * @prop {string} [zoomTitle]\r\n * @prop {string} [closeTitle]\r\n * @prop {string} [counterTitle]\r\n *\r\n * @prop {ZoomLevelOption} [initialZoomLevel]\r\n * @prop {ZoomLevelOption} [secondaryZoomLevel]\r\n * @prop {ZoomLevelOption} [maxZoomLevel]\r\n *\r\n * @prop {boolean} [mouseMovePan]\r\n * @prop {Point | null} [initialPointerPos]\r\n * @prop {boolean} [showHideOpacity]\r\n *\r\n * @prop {PhotoSwipeModuleOption} [pswpModule]\r\n * @prop {() => Promise<any>} [openPromise]\r\n * @prop {boolean} [preloadFirstSlide]\r\n * @prop {ElementProvider} [gallery]\r\n * @prop {string} [gallerySelector]\r\n * @prop {ElementProvider} [children]\r\n * @prop {string} [childSelector]\r\n * @prop {string | false} [thumbSelector]\r\n */\r\n\r\n/** @type {PreparedPhotoSwipeOptions} */\r\nconst defaultOptions = {\r\n  allowPanToNext: true,\r\n  spacing: 0.1,\r\n  loop: true,\r\n  pinchToClose: true,\r\n  closeOnVerticalDrag: true,\r\n  hideAnimationDuration: 333,\r\n  showAnimationDuration: 333,\r\n  zoomAnimationDuration: 333,\r\n  escKey: true,\r\n  arrowKeys: true,\r\n  returnFocus: true,\r\n  maxWidthToAnimate: 4000,\r\n  clickToCloseNonZoomable: true,\r\n  imageClickAction: 'zoom-or-close',\r\n  bgClickAction: 'close',\r\n  tapAction: 'toggle-controls',\r\n  doubleTapAction: 'zoom',\r\n  indexIndicatorSep: ' / ',\r\n  preloaderDelay: 2000,\r\n  bgOpacity: 0.8,\r\n\r\n  index: 0,\r\n  errorMsg: 'The image cannot be loaded',\r\n  preload: [1, 2],\r\n  easing: 'cubic-bezier(.4,0,.22,1)'\r\n};\r\n\r\n/**\r\n * PhotoSwipe Core\r\n */\r\nclass PhotoSwipe extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} [options]\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    this.options = this._prepareOptions(options || {});\r\n\r\n    /**\r\n     * offset of viewport relative to document\r\n     *\r\n     * @type {Point}\r\n     */\r\n    this.offset = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * @type {Point}\r\n     * @private\r\n     */\r\n    this._prevViewportSize = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * Size of scrollable PhotoSwipe viewport\r\n     *\r\n     * @type {Point}\r\n     */\r\n    this.viewportSize = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * background (backdrop) opacity\r\n     */\r\n    this.bgOpacity = 1;\r\n    this.currIndex = 0;\r\n    this.potentialIndex = 0;\r\n    this.isOpen = false;\r\n    this.isDestroying = false;\r\n    this.hasMouse = false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {SlideData}\r\n     */\r\n    this._initialItemData = {};\r\n    /** @type {Bounds | undefined} */\r\n    this._initialThumbBounds = undefined;\r\n\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.topBar = undefined;\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.element = undefined;\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.template = undefined;\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.container = undefined;\r\n    /** @type {HTMLElement | undefined} */\r\n    this.scrollWrap = undefined;\r\n    /** @type {Slide | undefined} */\r\n    this.currSlide = undefined;\r\n\r\n    this.events = new DOMEvents();\r\n    this.animations = new Animations();\r\n    this.mainScroll = new MainScroll(this);\r\n    this.gestures = new Gestures(this);\r\n    this.opener = new Opener(this);\r\n    this.keyboard = new Keyboard(this);\r\n    this.contentLoader = new ContentLoader(this);\r\n  }\r\n\r\n  /** @returns {boolean} */\r\n  init() {\r\n    if (this.isOpen || this.isDestroying) {\r\n      return false;\r\n    }\r\n\r\n    this.isOpen = true;\r\n    this.dispatch('init'); // legacy\r\n    this.dispatch('beforeOpen');\r\n\r\n    this._createMainStructure();\r\n\r\n    // add classes to the root element of PhotoSwipe\r\n    let rootClasses = 'pswp--open';\r\n    if (this.gestures.supportsTouch) {\r\n      rootClasses += ' pswp--touch';\r\n    }\r\n    if (this.options.mainClass) {\r\n      rootClasses += ' ' + this.options.mainClass;\r\n    }\r\n    if (this.element) {\r\n      this.element.className += ' ' + rootClasses;\r\n    }\r\n\r\n    this.currIndex = this.options.index || 0;\r\n    this.potentialIndex = this.currIndex;\r\n    this.dispatch('firstUpdate'); // starting index can be modified here\r\n\r\n    // initialize scroll wheel handler to block the scroll\r\n    this.scrollWheel = new ScrollWheel(this);\r\n\r\n    // sanitize index\r\n    if (Number.isNaN(this.currIndex)\r\n        || this.currIndex < 0\r\n        || this.currIndex >= this.getNumItems()) {\r\n      this.currIndex = 0;\r\n    }\r\n\r\n    if (!this.gestures.supportsTouch) {\r\n      // enable mouse features if no touch support detected\r\n      this.mouseDetected();\r\n    }\r\n\r\n    // causes forced synchronous layout\r\n    this.updateSize();\r\n\r\n    this.offset.y = window.pageYOffset;\r\n\r\n    this._initialItemData = this.getItemData(this.currIndex);\r\n    this.dispatch('gettingData', {\r\n      index: this.currIndex,\r\n      data: this._initialItemData,\r\n      slide: undefined\r\n    });\r\n\r\n    // *Layout* - calculate size and position of elements here\r\n    this._initialThumbBounds = this.getThumbBounds();\r\n    this.dispatch('initialLayout');\r\n\r\n    this.on('openingAnimationEnd', () => {\r\n      const { itemHolders } = this.mainScroll;\r\n\r\n      // Add content to the previous and next slide\r\n      if (itemHolders[0]) {\r\n        itemHolders[0].el.style.display = 'block';\r\n        this.setContent(itemHolders[0], this.currIndex - 1);\r\n      }\r\n      if (itemHolders[2]) {\r\n        itemHolders[2].el.style.display = 'block';\r\n        this.setContent(itemHolders[2], this.currIndex + 1);\r\n      }\r\n\r\n      this.appendHeavy();\r\n\r\n      this.contentLoader.updateLazy();\r\n\r\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\r\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\r\n      this.dispatch('bindEvents');\r\n    });\r\n\r\n    // set content for center slide (first time)\r\n    if (this.mainScroll.itemHolders[1]) {\r\n      this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\r\n    }\r\n    this.dispatch('change');\r\n\r\n    this.opener.open();\r\n\r\n    this.dispatch('afterInit');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {number} index\r\n   * @returns {number}\r\n   */\r\n  getLoopedIndex(index) {\r\n    const numSlides = this.getNumItems();\r\n\r\n    if (this.options.loop) {\r\n      if (index > numSlides - 1) {\r\n        index -= numSlides;\r\n      }\r\n\r\n      if (index < 0) {\r\n        index += numSlides;\r\n      }\r\n    }\r\n\r\n    return clamp(index, 0, numSlides - 1);\r\n  }\r\n\r\n  appendHeavy() {\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      itemHolder.slide?.appendHeavy();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Change the slide\r\n   * @param {number} index New index\r\n   */\r\n  goTo(index) {\r\n    this.mainScroll.moveIndexBy(\r\n      this.getLoopedIndex(index) - this.potentialIndex\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Go to the next slide.\r\n   */\r\n  next() {\r\n    this.goTo(this.potentialIndex + 1);\r\n  }\r\n\r\n  /**\r\n   * Go to the previous slide.\r\n   */\r\n  prev() {\r\n    this.goTo(this.potentialIndex - 1);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js zoomTo\r\n   *\r\n   * @param {Parameters<Slide['zoomTo']>} args\r\n   */\r\n  zoomTo(...args) {\r\n    this.currSlide?.zoomTo(...args);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js toggleZoom\r\n   */\r\n  toggleZoom() {\r\n    this.currSlide?.toggleZoom();\r\n  }\r\n\r\n  /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */\r\n  close() {\r\n    if (!this.opener.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isDestroying = true;\r\n\r\n    this.dispatch('close');\r\n\r\n    this.events.removeAll();\r\n    this.opener.close();\r\n  }\r\n\r\n  /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */\r\n  destroy() {\r\n    if (!this.isDestroying) {\r\n      this.options.showHideAnimationType = 'none';\r\n      this.close();\r\n      return;\r\n    }\r\n\r\n    this.dispatch('destroy');\r\n\r\n    this._listeners = {};\r\n\r\n    if (this.scrollWrap) {\r\n      this.scrollWrap.ontouchmove = null;\r\n      this.scrollWrap.ontouchend = null;\r\n    }\r\n\r\n    this.element?.remove();\r\n\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      itemHolder.slide?.destroy();\r\n    });\r\n\r\n    this.contentLoader.destroy();\r\n    this.events.removeAll();\r\n  }\r\n\r\n  /**\r\n   * Refresh/reload content of a slide by its index\r\n   *\r\n   * @param {number} slideIndex\r\n   */\r\n  refreshSlideContent(slideIndex) {\r\n    this.contentLoader.removeByIndex(slideIndex);\r\n    this.mainScroll.itemHolders.forEach((itemHolder, i) => {\r\n      let potentialHolderIndex = (this.currSlide?.index ?? 0) - 1 + i;\r\n      if (this.canLoop()) {\r\n        potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);\r\n      }\r\n      if (potentialHolderIndex === slideIndex) {\r\n        // set the new slide content\r\n        this.setContent(itemHolder, slideIndex, true);\r\n\r\n        // activate the new slide if it's current\r\n        if (i === 1) {\r\n          this.currSlide = itemHolder.slide;\r\n          itemHolder.slide?.setIsActive(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.dispatch('change');\r\n  }\r\n\r\n\r\n  /**\r\n   * Set slide content\r\n   *\r\n   * @param {ItemHolder} holder mainScroll.itemHolders array item\r\n   * @param {number} index Slide index\r\n   * @param {boolean} [force] If content should be set even if index wasn't changed\r\n   */\r\n  setContent(holder, index, force) {\r\n    if (this.canLoop()) {\r\n      index = this.getLoopedIndex(index);\r\n    }\r\n\r\n    if (holder.slide) {\r\n      if (holder.slide.index === index && !force) {\r\n        // exit if holder already contains this slide\r\n        // this could be common when just three slides are used\r\n        return;\r\n      }\r\n\r\n      // destroy previous slide\r\n      holder.slide.destroy();\r\n      holder.slide = undefined;\r\n    }\r\n\r\n    // exit if no loop and index is out of bounds\r\n    if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {\r\n      return;\r\n    }\r\n\r\n    const itemData = this.getItemData(index);\r\n    holder.slide = new Slide(itemData, index, this);\r\n\r\n    // set current slide\r\n    if (index === this.currIndex) {\r\n      this.currSlide = holder.slide;\r\n    }\r\n\r\n    holder.slide.append(holder.el);\r\n  }\r\n\r\n  /** @returns {Point} */\r\n  getViewportCenterPoint() {\r\n    return {\r\n      x: this.viewportSize.x / 2,\r\n      y: this.viewportSize.y / 2\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param {boolean} [force] Update size even if size of viewport was not changed.\r\n   */\r\n  updateSize(force) {\r\n    // let item;\r\n    // let itemIndex;\r\n\r\n    if (this.isDestroying) {\r\n      // exit if PhotoSwipe is closed or closing\r\n      // (to avoid errors, as resize event might be delayed)\r\n      return;\r\n    }\r\n\r\n    //const newWidth = this.scrollWrap.clientWidth;\r\n    //const newHeight = this.scrollWrap.clientHeight;\r\n\r\n    const newViewportSize = getViewportSize(this.options, this);\r\n\r\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\r\n      // Exit if dimensions were not changed\r\n      return;\r\n    }\r\n\r\n    //this._prevViewportSize.x = newWidth;\r\n    //this._prevViewportSize.y = newHeight;\r\n    equalizePoints(this._prevViewportSize, newViewportSize);\r\n\r\n    this.dispatch('beforeResize');\r\n\r\n    equalizePoints(this.viewportSize, this._prevViewportSize);\r\n\r\n    this._updatePageScrollOffset();\r\n\r\n    this.dispatch('viewportSize');\r\n\r\n    // Resize slides only after opener animation is finished\r\n    // and don't re-calculate size on inital size update\r\n    this.mainScroll.resize(this.opener.isOpen);\r\n\r\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\r\n      this.mouseDetected();\r\n    }\r\n\r\n    this.dispatch('resize');\r\n  }\r\n\r\n  /**\r\n   * @param {number} opacity\r\n   */\r\n  applyBgOpacity(opacity) {\r\n    this.bgOpacity = Math.max(opacity, 0);\r\n    if (this.bg) {\r\n      this.bg.style.opacity = String(this.bgOpacity * this.options.bgOpacity);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether mouse is detected\r\n   */\r\n  mouseDetected() {\r\n    if (!this.hasMouse) {\r\n      this.hasMouse = true;\r\n      this.element?.classList.add('pswp--has_mouse');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page resize event handler\r\n   *\r\n   * @private\r\n   */\r\n  _handlePageResize() {\r\n    this.updateSize();\r\n\r\n    // In iOS webview, if element size depends on document size,\r\n    // it'll be measured incorrectly in resize event\r\n    //\r\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\r\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\r\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\r\n      setTimeout(() => {\r\n        this.updateSize();\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   *\r\n   * @private\r\n   */\r\n  _updatePageScrollOffset() {\r\n    this.setScrollOffset(0, window.pageYOffset);\r\n  }\r\n\r\n  /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\r\n  setScrollOffset(x, y) {\r\n    this.offset.x = x;\r\n    this.offset.y = y;\r\n    this.dispatch('updateScrollOffset');\r\n  }\r\n\r\n  /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   *\r\n   * @private\r\n   */\r\n  _createMainStructure() {\r\n    // root DOM element of PhotoSwipe (.pswp)\r\n    this.element = createElement('pswp', 'div');\r\n    this.element.setAttribute('tabindex', '-1');\r\n    this.element.setAttribute('role', 'dialog');\r\n\r\n    // template is legacy prop\r\n    this.template = this.element;\r\n\r\n    // Background is added as a separate element,\r\n    // as animating opacity is faster than animating rgba()\r\n    this.bg = createElement('pswp__bg', 'div', this.element);\r\n    this.scrollWrap = createElement('pswp__scroll-wrap', 'section', this.element);\r\n    this.container = createElement('pswp__container', 'div', this.scrollWrap);\r\n\r\n    // aria pattern: carousel\r\n    this.scrollWrap.setAttribute('aria-roledescription', 'carousel');\r\n    this.container.setAttribute('aria-live', 'off');\r\n    this.container.setAttribute('id', 'pswp__items');\r\n\r\n    this.mainScroll.appendHolders();\r\n\r\n    this.ui = new UI(this);\r\n    this.ui.init();\r\n\r\n    // append to DOM\r\n    (this.options.appendToEl || document.body).appendChild(this.element);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   *\r\n   * @returns {Bounds | undefined}\r\n   */\r\n  getThumbBounds() {\r\n    return getThumbBounds(\r\n      this.currIndex,\r\n      this.currSlide ? this.currSlide.data : this._initialItemData,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If the PhotoSwipe can have continuous loop\r\n   * @returns Boolean\r\n   */\r\n  canLoop() {\r\n    return (this.options.loop && this.getNumItems() > 2);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PhotoSwipeOptions} options\r\n   * @returns {PreparedPhotoSwipeOptions}\r\n   */\r\n  _prepareOptions(options) {\r\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\r\n      options.showHideAnimationType = 'none';\r\n      options.zoomAnimationDuration = 0;\r\n    }\r\n\r\n    /** @type {PreparedPhotoSwipeOptions} */\r\n    return {\r\n      ...defaultOptions,\r\n      ...options\r\n    };\r\n  }\r\n}\r\n\r\nexport default PhotoSwipe;\r\n"],"names":["globalThis","self","window","global","register","module","exports","$0915ccbaea3d6573$var$createElement","className","tagName","appendToEl","el","document","createElement","appendChild","$0915ccbaea3d6573$var$equalizePoints","p1","p2","x","y","undefined","id","$0915ccbaea3d6573$var$roundPoint","p","Math","round","$0915ccbaea3d6573$var$getDistanceBetween","abs","sqrt","$0915ccbaea3d6573$var$pointsEqual","$0915ccbaea3d6573$var$clamp","val","min","max","$0915ccbaea3d6573$var$toTransformString","scale","propValue","$0915ccbaea3d6573$var$setTransform","style","transform","$0915ccbaea3d6573$var$setTransitionStyle","prop","duration","ease","transition","$0915ccbaea3d6573$var$setWidthHeight","w","h","width","height","Object","defineProperty","value","configurable","get","$0915ccbaea3d6573$export$2e2bcd8739ae039","set","s","enumerable","$0915ccbaea3d6573$var$LOAD_STATE","IDLE","LOADING","LOADED","ERROR","$0915ccbaea3d6573$var$isSafari","navigator","vendor","match","$0915ccbaea3d6573$var$supportsPassive","addEventListener","e","$0915ccbaea3d6573$var$DOMEvents","constructor","_pool","add","target","type","listener","passive","_toggleListener","remove","removeAll","forEach","poolItem","unbind","skipPool","methodName","types","split","eType","filter","push","eventOptions","$0915ccbaea3d6573$var$getViewportSize","options","pswp","getViewportSizeFn","newViewportSize","documentElement","clientWidth","innerHeight","$0915ccbaea3d6573$var$parsePaddingOption","viewportSize","itemData","index","paddingValue","paddingFn","padding","legacyPropName","toUpperCase","slice","Number","$0915ccbaea3d6573$var$getPanAreaSize","$0915ccbaea3d6573$var$PanBounds","slide","currZoomLevel","center","update","_updateAxis","dispatch","reset","axis","elSize","data","panAreaSize","correctPan","panOffset","$0915ccbaea3d6573$var$ZoomLevel","elementSize","fit","fill","vFill","initial","secondary","maxWidth","maxHeight","hRatio","vRatio","_getInitial","_getSecondary","_getMax","zoomLevels","slideData","_parseZoomLevelOption","optionPrefix","optionValue","$0915ccbaea3d6573$var$MAX_IMAGE_WIDTH","$0915ccbaea3d6573$var$Slide","isActive","currIndex","currentResolution","pan","isFirstSlide","opener","isOpen","content","contentLoader","getContentBySlide","container","holderElement","heavyAppended","bounds","prevDisplayedWidth","prevDisplayedHeight","setIsActive","activate","deactivate","append","transformOrigin","calculateSize","load","updateContentSize","appendHeavy","zoomAndPanToInitial","applyCurrentZoomPan","mainScroll","isShifted","defaultPrevented","destroy","hasSlide","resize","panTo","force","scaleMultiplier","sizeChanged","setDisplayedSize","getPlaceholderElement","placeholder","element","zoomTo","destZoomLevel","centerPoint","transitionDuration","ignoreBounds","isZoomable","animations","stopAllPan","prevZoomLevel","setZoomLevel","calculateZoomToPanOffset","finishTransition","_setResolution","startTransition","isPan","name","getCurrentTransform","onComplete","easing","toggleZoom","zoomAnimationDuration","point","totalPanDistance","getViewportCenterPoint","zoomFactor","panX","panY","isPannable","Boolean","_applyZoomTransform","currSlide","zoom","newResolution","$0915ccbaea3d6573$var$DragHandler","gestures","startPan","start","stopAll","change","prevP1","dragAxis","closeOnVerticalDrag","isMultitouch","_setPanWithFriction","bgOpacity","_getVerticalDragRatio","applyBgOpacity","mainScrollChanged","_panOrMoveMainScroll","end","velocity","indexDiff","mainScrollShiftDiff","getCurrSlideX","currentSlideVisibilityRatio","moveIndexBy","correctZoomPan","_finishPanGestureForAxis","panPos","restoreBgOpacity","projectedPosition","initialVelocity","vDragRatio","projectedVDragRatio","close","correctedPanPosition","dampingRatio","initialBgOpacity","totalPanDist","startSpring","onUpdate","pos","floor","delta","newMainScrollX","moveTo","newPan","allowPanToNext","currSlideMainScrollX","isLeftToRight","wasAtMinPanPosition","wasAtMaxPanPosition","potentialPan","customFriction","correctedPan","$0915ccbaea3d6573$var$getZoomPointsCenter","$0915ccbaea3d6573$var$ZoomHandler","_startPan","_startZoomPoint","_zoomPoint","_wasOverFitZoomLevel","_startZoomLevel","startP1","startP2","minZoomLevel","maxZoomLevel","pinchToClose","_calculatePanForZoomLevel","ignoreGesture","destinationZoomLevel","currZoomLevelNeedsChange","initialPan","destinationPan","panNeedsChange","naturalFrequency","now","newZoomLevel","$0915ccbaea3d6573$var$didTapOnMainContent","event","closest","$0915ccbaea3d6573$var$TapHandler","click","originalEvent","targetClassList","classList","isImageClick","contains","isBackgroundClick","_doClickOrTapAction","tap","doubleTap","actionName","actionFullName","call","clickToCloseNonZoomable","toggle","$0915ccbaea3d6573$var$Gestures","prevP2","_lastStartP1","_intervalP1","_numActivePoints","_ongoingPointers","_touchEventEnabled","_pointerEventEnabled","PointerEvent","supportsTouch","maxTouchPoints","_intervalTime","_velocityCalculated","isDragging","isZooming","raf","_tapTimer","drag","tapHandler","on","events","scrollWrap","_onClick","bind","_bindEvents","ontouchmove","ontouchend","pref","down","up","cancel","cancelEvent","onPointerDown","onPointerMove","onPointerUp","isMousePointer","pointerType","button","preventDefault","mouseDetected","_preventPointerEventBehaviour","_updatePoints","_clearTapTimer","_finishDrag","_updateStartPoints","_rafStopLoop","_rafRenderLoop","_calculateDragDirection","Date","_updateVelocity","_finishTap","_updatePrevPoints","requestAnimationFrame","time","_getVelocity","indexOf","tapDelay","doubleTapAction","setTimeout","clearTimeout","displacement","cancelAnimationFrame","pointerIndex","findIndex","ongoingPointer","pointerEvent","pointerId","splice","_convertEventPosToPoint","length","touchEvent","touches","diff","axisToCheck","pageX","offset","pageY","identifier","stopPropagation","$0915ccbaea3d6573$var$MainScroll","slideWidth","_currPositionIndex","_prevPositionIndex","_containerShiftIndex","itemHolders","resizeSlides","newSlideWidth","spacing","slideWidthChanged","itemHolder","resetPosition","appendHolders","i","setAttribute","display","canBeSwiped","getNumItems","animate","velocityX","newIndex","potentialIndex","numSlides","canLoop","getLoopedIndex","distance","stopMainScroll","destinationX","isMainScroll","updateCurrItem","currDiff","currDistance","tempHolder","positionDifference","diffAbs","shift","setContent","pop","unshift","updateLazy","dragging","newSlideIndexOffset","$0915ccbaea3d6573$var$KeyboardKeyCodesMap","Escape","z","ArrowLeft","ArrowUp","ArrowRight","ArrowDown","Tab","$0915ccbaea3d6573$var$getKeyboardEventKey","key","isKeySupported","$0915ccbaea3d6573$var$Keyboard","_wasFocused","initialPointerPos","_focusRoot","_onFocusIn","_onKeyDown","lastActiveElement","activeElement","returnFocus","focus","keydownAction","ctrlKey","metaKey","altKey","shiftKey","isForward","keyCode","escKey","arrowKeys","template","$0915ccbaea3d6573$var$CSSAnimation","props","onFinish","_target","_onComplete","_finished","_onTransitionEnd","_helperTimeout","_finalizeAnimation","removeEventListener","$0915ccbaea3d6573$var$SpringEaser","_dampingRatio","_naturalFrequency","_dampedFrequency","easeFrame","deltaPosition","deltaTime","coeff","naturalDumpingPow","E","dumpedFCos","cos","dumpedFSin","sin","$0915ccbaea3d6573$var$SpringAnimation","_raf","easer","prevTime","animationLoop","$0915ccbaea3d6573$var$Animations","activeAnimations","_start","isSpring","animation","stop","isPanRunning","some","$0915ccbaea3d6573$var$ScrollWheel","_onWheel","deltaX","deltaY","wheelToZoom","deltaMode","clientX","clientY","$0915ccbaea3d6573$var$UIElement","elementHTML","html","isButton","toLowerCase","title","ariaLabel","ariaText","innerHTML","$0915ccbaea3d6573$var$addElementHTML","htmlData","isCustomSVG","out","join","svgData","size","outlineID","inner","onInit","onClick","onclick","appendTo","topBar","applyFilters","$0915ccbaea3d6573$var$initArrowButton","isNextButton","loop","disabled","$0915ccbaea3d6573$var$arrowPrev","order","$0915ccbaea3d6573$var$arrowNext","$0915ccbaea3d6573$var$closeButton","$0915ccbaea3d6573$var$zoomButton","$0915ccbaea3d6573$var$loadingIndicator","indicatorElement","isVisible","delayTimeout","toggleIndicatorClass","setIndicatorVisibility","visible","updatePreloaderVisibility","isLoading","preloaderDelay","ui","$0915ccbaea3d6573$var$counterIndicator","counterElement","innerText","indexIndicatorSep","$0915ccbaea3d6573$var$setZoomedIn","isZoomedIn","$0915ccbaea3d6573$var$UI","isRegistered","uiElementsData","items","_lastUpdatedZoomLevel","init","sort","a","b","uiElementData","registerElement","_onZoomPanUpdate","elementData","isClosing","currZoomLevelDiff","potentialZoomLevel","imageClickAction","$0915ccbaea3d6573$var$PhotoSwipeEvent","details","assign","$0915ccbaea3d6573$var$Eventable","_listeners","_filters","addFilter","fn","priority","f1","f2","removeFilter","args","apply","off","$0915ccbaea3d6573$var$Placeholder","imageSrc","imgEl","decoding","alt","src","parentNode","$0915ccbaea3d6573$var$Content","instance","displayedImageWidth","displayedImageHeight","isAttached","isDecoding","state","removePlaceholder","keepPlaceholder","isLazy","reload","usePlaceholder","placeholderEl","parentElement","prepend","placeholderSrc","msrc","isImageContent","loadImage","imageElement","updateSrcsetSizes","srcset","complete","onLoaded","onload","onerror","onError","setSlide","displayError","isError","isInitialSizeUpdate","image","sizesWidth","dataset","largestUsedSize","parseInt","sizes","String","lazyLoad","errorMsgEl","errorMsg","supportsDecode","decode","catch","finally","appendImage","$0915ccbaea3d6573$var$lazyLoadData","zoomLevel","createContentFromData","ceil","$0915ccbaea3d6573$var$ContentLoader","limit","preload","_cachedItems","loadSlideByIndex","initialIndex","getContentByIndex","$0915ccbaea3d6573$var$lazyLoadSlide","getItemData","addToCache","removeByIndex","indexToRemove","item","removedItem","find","$0915ccbaea3d6573$var$PhotoSwipeBase","numItems","dataSource","_getGalleryDOMElements","gallery","dataSourceItem","Array","isArray","Element","_domElementToItemData","galleryElement","children","childSelector","$0915ccbaea3d6573$var$getElementsFromOption","option","legacySelector","parent","elements","NodeList","from","selector","querySelectorAll","linkEl","querySelector","pswpSrc","href","pswpSrcset","pswpWidth","pswpHeight","pswpType","thumbnailEl","currentSrc","getAttribute","pswpCropped","cropped","thumbCropped","lazyLoadData","$0915ccbaea3d6573$var$Opener","isClosed","isOpening","_duration","_useAnimation","_croppedZoom","_animateRootOpacity","_animateBgOpacity","_placeholder","_opacityElement","_cropContainer1","_cropContainer2","_thumbBounds","_prepareOpen","open","hideAnimationDuration","maxWidthToAnimate","_applyStartProps","showAnimationDuration","showHideAnimationType","showHideOpacity","_initialThumbBounds","getThumbBounds","_animateZoom","bg","opacity","innerRect","overflow","_setClosedStateZoomPan","willChange","Promise","resolve","img","decoded","isDelaying","$0915ccbaea3d6573$var$decodeImage","reject","_initiate","setProperty","_animateToOpenState","_animateToClosedState","_onAnimationComplete","_animateTo","containerOnePanX","containerOnePanY","containerTwoPanX","containerTwoPanY","animProps","$0915ccbaea3d6573$var$defaultOptions","bgClickAction","tapAction","_prepareOptions","_prevViewportSize","isDestroying","hasMouse","_initialItemData","keyboard","_createMainStructure","rootClasses","mainClass","scrollWheel","isNaN","updateSize","pageYOffset","_handlePageResize","_updatePageScrollOffset","goTo","next","prev","refreshSlideContent","slideIndex","potentialHolderIndex","holder","matchMedia","matches","test","userAgent","setScrollOffset","body","$0915ccbaea3d6573$var$getThumbBounds","thumbBounds","thumbnail","thumbSelector","$0915ccbaea3d6573$var$getCroppedBoundsByElement","imageWidth","imageHeight","thumbAreaRect","getBoundingClientRect","fillZoomLevel","offsetX","offsetY","left","top","$0915ccbaea3d6573$var$getBoundsByElement"],"version":3,"file":"photoswipe.esm.bee3cbe3.js.map"}